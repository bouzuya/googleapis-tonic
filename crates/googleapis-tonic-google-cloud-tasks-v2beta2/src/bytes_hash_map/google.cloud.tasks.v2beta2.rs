// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PullTarget {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PullMessage {
    #[prost(bytes = "bytes", tag = "1")]
    pub payload: ::prost::bytes::Bytes,
    #[prost(string, tag = "2")]
    pub tag: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppEngineHttpTarget {
    #[prost(message, optional, tag = "1")]
    pub app_engine_routing_override: ::core::option::Option<AppEngineRouting>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppEngineHttpRequest {
    #[prost(enumeration = "HttpMethod", tag = "1")]
    pub http_method: i32,
    #[prost(message, optional, tag = "2")]
    pub app_engine_routing: ::core::option::Option<AppEngineRouting>,
    #[prost(string, tag = "3")]
    pub relative_url: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "4")]
    pub headers: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(bytes = "bytes", tag = "5")]
    pub payload: ::prost::bytes::Bytes,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppEngineRouting {
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub instance: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub host: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpRequest {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(enumeration = "HttpMethod", tag = "2")]
    pub http_method: i32,
    #[prost(map = "string, string", tag = "3")]
    pub headers: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(bytes = "bytes", tag = "4")]
    pub body: ::prost::bytes::Bytes,
    #[prost(oneof = "http_request::AuthorizationHeader", tags = "5, 6")]
    pub authorization_header: ::core::option::Option<http_request::AuthorizationHeader>,
}
/// Nested message and enum types in `HttpRequest`.
pub mod http_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum AuthorizationHeader {
        #[prost(message, tag = "5")]
        OauthToken(super::OAuthToken),
        #[prost(message, tag = "6")]
        OidcToken(super::OidcToken),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PathOverride {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOverride {
    #[prost(string, tag = "1")]
    pub query_params: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UriOverride {
    #[prost(enumeration = "uri_override::Scheme", optional, tag = "1")]
    pub scheme: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "3")]
    pub port: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "4")]
    pub path_override: ::core::option::Option<PathOverride>,
    #[prost(message, optional, tag = "5")]
    pub query_override: ::core::option::Option<QueryOverride>,
    #[prost(enumeration = "uri_override::UriOverrideEnforceMode", tag = "6")]
    pub uri_override_enforce_mode: i32,
}
/// Nested message and enum types in `UriOverride`.
pub mod uri_override {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Scheme {
        Unspecified = 0,
        Http = 1,
        Https = 2,
    }
    impl Scheme {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Scheme::Unspecified => "SCHEME_UNSPECIFIED",
                Scheme::Http => "HTTP",
                Scheme::Https => "HTTPS",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SCHEME_UNSPECIFIED" => Some(Self::Unspecified),
                "HTTP" => Some(Self::Http),
                "HTTPS" => Some(Self::Https),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum UriOverrideEnforceMode {
        Unspecified = 0,
        IfNotExists = 1,
        Always = 2,
    }
    impl UriOverrideEnforceMode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                UriOverrideEnforceMode::Unspecified => {
                    "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED"
                }
                UriOverrideEnforceMode::IfNotExists => "IF_NOT_EXISTS",
                UriOverrideEnforceMode::Always => "ALWAYS",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED" => Some(Self::Unspecified),
                "IF_NOT_EXISTS" => Some(Self::IfNotExists),
                "ALWAYS" => Some(Self::Always),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpTarget {
    #[prost(message, optional, tag = "1")]
    pub uri_override: ::core::option::Option<UriOverride>,
    #[prost(enumeration = "HttpMethod", tag = "2")]
    pub http_method: i32,
    #[prost(message, repeated, tag = "3")]
    pub header_overrides: ::prost::alloc::vec::Vec<http_target::HeaderOverride>,
    #[prost(oneof = "http_target::AuthorizationHeader", tags = "5, 6")]
    pub authorization_header: ::core::option::Option<http_target::AuthorizationHeader>,
}
/// Nested message and enum types in `HttpTarget`.
pub mod http_target {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Header {
        #[prost(string, tag = "1")]
        pub key: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub value: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct HeaderOverride {
        #[prost(message, optional, tag = "1")]
        pub header: ::core::option::Option<Header>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum AuthorizationHeader {
        #[prost(message, tag = "5")]
        OauthToken(super::OAuthToken),
        #[prost(message, tag = "6")]
        OidcToken(super::OidcToken),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OAuthToken {
    #[prost(string, tag = "1")]
    pub service_account_email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OidcToken {
    #[prost(string, tag = "1")]
    pub service_account_email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub audience: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HttpMethod {
    Unspecified = 0,
    Post = 1,
    Get = 2,
    Head = 3,
    Put = 4,
    Delete = 5,
    Patch = 6,
    Options = 7,
}
impl HttpMethod {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            HttpMethod::Unspecified => "HTTP_METHOD_UNSPECIFIED",
            HttpMethod::Post => "POST",
            HttpMethod::Get => "GET",
            HttpMethod::Head => "HEAD",
            HttpMethod::Put => "PUT",
            HttpMethod::Delete => "DELETE",
            HttpMethod::Patch => "PATCH",
            HttpMethod::Options => "OPTIONS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HTTP_METHOD_UNSPECIFIED" => Some(Self::Unspecified),
            "POST" => Some(Self::Post),
            "GET" => Some(Self::Get),
            "HEAD" => Some(Self::Head),
            "PUT" => Some(Self::Put),
            "DELETE" => Some(Self::Delete),
            "PATCH" => Some(Self::Patch),
            "OPTIONS" => Some(Self::Options),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Queue {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub rate_limits: ::core::option::Option<RateLimits>,
    #[prost(message, optional, tag = "6")]
    pub retry_config: ::core::option::Option<RetryConfig>,
    #[prost(enumeration = "queue::State", tag = "7")]
    pub state: i32,
    #[prost(message, optional, tag = "8")]
    pub purge_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub task_ttl: ::core::option::Option<::prost_types::Duration>,
    #[prost(message, optional, tag = "10")]
    pub tombstone_ttl: ::core::option::Option<::prost_types::Duration>,
    #[prost(message, optional, tag = "16")]
    pub stats: ::core::option::Option<QueueStats>,
    #[prost(oneof = "queue::TargetType", tags = "3, 4, 17")]
    pub target_type: ::core::option::Option<queue::TargetType>,
}
/// Nested message and enum types in `Queue`.
pub mod queue {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Running = 1,
        Paused = 2,
        Disabled = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Running => "RUNNING",
                State::Paused => "PAUSED",
                State::Disabled => "DISABLED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "RUNNING" => Some(Self::Running),
                "PAUSED" => Some(Self::Paused),
                "DISABLED" => Some(Self::Disabled),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TargetType {
        #[prost(message, tag = "3")]
        AppEngineHttpTarget(super::AppEngineHttpTarget),
        #[prost(message, tag = "4")]
        PullTarget(super::PullTarget),
        #[prost(message, tag = "17")]
        HttpTarget(super::HttpTarget),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RateLimits {
    #[prost(double, tag = "1")]
    pub max_tasks_dispatched_per_second: f64,
    #[prost(int32, tag = "2")]
    pub max_burst_size: i32,
    #[prost(int32, tag = "3")]
    pub max_concurrent_tasks: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RetryConfig {
    #[prost(message, optional, tag = "3")]
    pub max_retry_duration: ::core::option::Option<::prost_types::Duration>,
    #[prost(message, optional, tag = "4")]
    pub min_backoff: ::core::option::Option<::prost_types::Duration>,
    #[prost(message, optional, tag = "5")]
    pub max_backoff: ::core::option::Option<::prost_types::Duration>,
    #[prost(int32, tag = "6")]
    pub max_doublings: i32,
    #[prost(oneof = "retry_config::NumAttempts", tags = "1, 2")]
    pub num_attempts: ::core::option::Option<retry_config::NumAttempts>,
}
/// Nested message and enum types in `RetryConfig`.
pub mod retry_config {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum NumAttempts {
        #[prost(int32, tag = "1")]
        MaxAttempts(i32),
        #[prost(bool, tag = "2")]
        UnlimitedAttempts(bool),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueueStats {
    #[prost(int64, tag = "1")]
    pub tasks_count: i64,
    #[prost(message, optional, tag = "2")]
    pub oldest_estimated_arrival_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(int64, tag = "3")]
    pub executed_last_minute_count: i64,
    #[prost(int64, tag = "4")]
    pub concurrent_dispatches_count: i64,
    #[prost(double, tag = "5")]
    pub effective_execution_rate: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Task {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub schedule_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub status: ::core::option::Option<TaskStatus>,
    #[prost(enumeration = "task::View", tag = "8")]
    pub view: i32,
    #[prost(oneof = "task::PayloadType", tags = "3, 4, 13")]
    pub payload_type: ::core::option::Option<task::PayloadType>,
}
/// Nested message and enum types in `Task`.
pub mod task {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum View {
        Unspecified = 0,
        Basic = 1,
        Full = 2,
    }
    impl View {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                View::Unspecified => "VIEW_UNSPECIFIED",
                View::Basic => "BASIC",
                View::Full => "FULL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "VIEW_UNSPECIFIED" => Some(Self::Unspecified),
                "BASIC" => Some(Self::Basic),
                "FULL" => Some(Self::Full),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum PayloadType {
        #[prost(message, tag = "3")]
        AppEngineHttpRequest(super::AppEngineHttpRequest),
        #[prost(message, tag = "4")]
        PullMessage(super::PullMessage),
        #[prost(message, tag = "13")]
        HttpRequest(super::HttpRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskStatus {
    #[prost(int32, tag = "1")]
    pub attempt_dispatch_count: i32,
    #[prost(int32, tag = "2")]
    pub attempt_response_count: i32,
    #[prost(message, optional, tag = "3")]
    pub first_attempt_status: ::core::option::Option<AttemptStatus>,
    #[prost(message, optional, tag = "4")]
    pub last_attempt_status: ::core::option::Option<AttemptStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttemptStatus {
    #[prost(message, optional, tag = "1")]
    pub schedule_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub dispatch_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub response_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "4")]
    pub response_status: ::core::option::Option<super::super::super::rpc::Status>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQueuesRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub filter: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub read_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQueuesResponse {
    #[prost(message, repeated, tag = "1")]
    pub queues: ::prost::alloc::vec::Vec<Queue>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQueueRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub read_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateQueueRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub queue: ::core::option::Option<Queue>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateQueueRequest {
    #[prost(message, optional, tag = "1")]
    pub queue: ::core::option::Option<Queue>,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteQueueRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PurgeQueueRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PauseQueueRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResumeQueueRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadQueueYamlRequest {
    #[prost(string, tag = "1")]
    pub app_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub http_body: ::core::option::Option<super::super::super::api::HttpBody>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTasksRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(enumeration = "task::View", tag = "2")]
    pub response_view: i32,
    #[prost(int32, tag = "4")]
    pub page_size: i32,
    #[prost(string, tag = "5")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTasksResponse {
    #[prost(message, repeated, tag = "1")]
    pub tasks: ::prost::alloc::vec::Vec<Task>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "task::View", tag = "2")]
    pub response_view: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTaskRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub task: ::core::option::Option<Task>,
    #[prost(enumeration = "task::View", tag = "3")]
    pub response_view: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTaskRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaseTasksRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub max_tasks: i32,
    #[prost(message, optional, tag = "3")]
    pub lease_duration: ::core::option::Option<::prost_types::Duration>,
    #[prost(enumeration = "task::View", tag = "4")]
    pub response_view: i32,
    #[prost(string, tag = "5")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaseTasksResponse {
    #[prost(message, repeated, tag = "1")]
    pub tasks: ::prost::alloc::vec::Vec<Task>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcknowledgeTaskRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub schedule_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenewLeaseRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub schedule_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub lease_duration: ::core::option::Option<::prost_types::Duration>,
    #[prost(enumeration = "task::View", tag = "4")]
    pub response_view: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelLeaseRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub schedule_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(enumeration = "task::View", tag = "3")]
    pub response_view: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunTaskRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "task::View", tag = "2")]
    pub response_view: i32,
}
/// Generated client implementations.
pub mod cloud_tasks_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Cloud Tasks allows developers to manage the execution of background
    /// work in their applications.
    #[derive(Debug, Clone)]
    pub struct CloudTasksClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> CloudTasksClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CloudTasksClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            CloudTasksClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists queues.
        ///
        /// Queues are returned in lexicographical order.
        pub async fn list_queues(
            &mut self,
            request: impl tonic::IntoRequest<super::ListQueuesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListQueuesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/ListQueues",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "ListQueues",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets a queue.
        pub async fn get_queue(
            &mut self,
            request: impl tonic::IntoRequest<super::GetQueueRequest>,
        ) -> std::result::Result<tonic::Response<super::Queue>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/GetQueue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.tasks.v2beta2.CloudTasks", "GetQueue"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a queue.
        ///
        /// Queues created with this method allow tasks to live for a maximum of 31
        /// days. After a task is 31 days old, the task will be deleted regardless of
        /// whether it was dispatched or not.
        ///
        /// WARNING: Using this method may have unintended side effects if you are
        /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
        /// Read
        /// [Overview of Queue Management and
        /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
        /// this method.
        pub async fn create_queue(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateQueueRequest>,
        ) -> std::result::Result<tonic::Response<super::Queue>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/CreateQueue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "CreateQueue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a queue.
        ///
        /// This method creates the queue if it does not exist and updates
        /// the queue if it does exist.
        ///
        /// Queues created with this method allow tasks to live for a maximum of 31
        /// days. After a task is 31 days old, the task will be deleted regardless of
        /// whether it was dispatched or not.
        ///
        /// WARNING: Using this method may have unintended side effects if you are
        /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
        /// Read
        /// [Overview of Queue Management and
        /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
        /// this method.
        pub async fn update_queue(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateQueueRequest>,
        ) -> std::result::Result<tonic::Response<super::Queue>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/UpdateQueue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "UpdateQueue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a queue.
        ///
        /// This command will delete the queue even if it has tasks in it.
        ///
        /// Note: If you delete a queue, a queue with the same name can't be created
        /// for 7 days.
        ///
        /// WARNING: Using this method may have unintended side effects if you are
        /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
        /// Read
        /// [Overview of Queue Management and
        /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
        /// this method.
        pub async fn delete_queue(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteQueueRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/DeleteQueue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "DeleteQueue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Purges a queue by deleting all of its tasks.
        ///
        /// All tasks created before this method is called are permanently deleted.
        ///
        /// Purge operations can take up to one minute to take effect. Tasks
        /// might be dispatched before the purge takes effect. A purge is irreversible.
        pub async fn purge_queue(
            &mut self,
            request: impl tonic::IntoRequest<super::PurgeQueueRequest>,
        ) -> std::result::Result<tonic::Response<super::Queue>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/PurgeQueue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "PurgeQueue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Pauses the queue.
        ///
        /// If a queue is paused then the system will stop dispatching tasks
        /// until the queue is resumed via
        /// \[ResumeQueue\]\[google.cloud.tasks.v2beta2.CloudTasks.ResumeQueue\]. Tasks can
        /// still be added when the queue is paused. A queue is paused if its
        /// \[state\]\[google.cloud.tasks.v2beta2.Queue.state\] is
        /// \[PAUSED\]\[google.cloud.tasks.v2beta2.Queue.State.PAUSED\].
        pub async fn pause_queue(
            &mut self,
            request: impl tonic::IntoRequest<super::PauseQueueRequest>,
        ) -> std::result::Result<tonic::Response<super::Queue>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/PauseQueue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "PauseQueue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Resume a queue.
        ///
        /// This method resumes a queue after it has been
        /// \[PAUSED\]\[google.cloud.tasks.v2beta2.Queue.State.PAUSED\] or
        /// \[DISABLED\]\[google.cloud.tasks.v2beta2.Queue.State.DISABLED\]. The state of a
        /// queue is stored in the queue's
        /// \[state\]\[google.cloud.tasks.v2beta2.Queue.state\]; after calling this method
        /// it will be set to
        /// \[RUNNING\]\[google.cloud.tasks.v2beta2.Queue.State.RUNNING\].
        ///
        /// WARNING: Resuming many high-QPS queues at the same time can
        /// lead to target overloading. If you are resuming high-QPS
        /// queues, follow the 500/50/5 pattern described in
        /// [Managing Cloud Tasks Scaling
        /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
        pub async fn resume_queue(
            &mut self,
            request: impl tonic::IntoRequest<super::ResumeQueueRequest>,
        ) -> std::result::Result<tonic::Response<super::Queue>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/ResumeQueue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "ResumeQueue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Update queue list by uploading a queue.yaml file.
        ///
        /// The queue.yaml file is supplied in the request body as a YAML encoded
        /// string. This method was added to support gcloud clients versions before
        /// 322.0.0. New clients should use CreateQueue instead of this method.
        pub async fn upload_queue_yaml(
            &mut self,
            request: impl tonic::IntoRequest<super::UploadQueueYamlRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/UploadQueueYaml",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "UploadQueueYaml",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets the access control policy for a
        /// \[Queue\]\[google.cloud.tasks.v2beta2.Queue\]. Returns an empty policy if the
        /// resource exists and does not have a policy set.
        ///
        /// Authorization requires the following
        /// [Google IAM](https://cloud.google.com/iam) permission on the specified
        /// resource parent:
        ///
        /// * `cloudtasks.queues.getIamPolicy`
        pub async fn get_iam_policy(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::super::iam::v1::GetIamPolicyRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::iam::v1::Policy>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/GetIamPolicy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "GetIamPolicy",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Sets the access control policy for a
        /// \[Queue\]\[google.cloud.tasks.v2beta2.Queue\]. Replaces any existing policy.
        ///
        /// Note: The Cloud Console does not check queue-level IAM permissions yet.
        /// Project-level permissions are required to use the Cloud Console.
        ///
        /// Authorization requires the following
        /// [Google IAM](https://cloud.google.com/iam) permission on the specified
        /// resource parent:
        ///
        /// * `cloudtasks.queues.setIamPolicy`
        pub async fn set_iam_policy(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::super::iam::v1::SetIamPolicyRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::iam::v1::Policy>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/SetIamPolicy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "SetIamPolicy",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns permissions that a caller has on a
        /// \[Queue\]\[google.cloud.tasks.v2beta2.Queue\]. If the resource does not exist,
        /// this will return an empty set of permissions, not a
        /// \[NOT_FOUND\]\[google.rpc.Code.NOT_FOUND\] error.
        ///
        /// Note: This operation is designed to be used for building permission-aware
        /// UIs and command-line tools, not for authorization checking. This operation
        /// may "fail open" without warning.
        pub async fn test_iam_permissions(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::super::iam::v1::TestIamPermissionsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::super::iam::v1::TestIamPermissionsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/TestIamPermissions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "TestIamPermissions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists the tasks in a queue.
        ///
        /// By default, only the \[BASIC\]\[google.cloud.tasks.v2beta2.Task.View.BASIC\]
        /// view is retrieved due to performance considerations;
        /// \[response_view\]\[google.cloud.tasks.v2beta2.ListTasksRequest.response_view\]
        /// controls the subset of information which is returned.
        ///
        /// The tasks may be returned in any order. The ordering may change at any
        /// time.
        pub async fn list_tasks(
            &mut self,
            request: impl tonic::IntoRequest<super::ListTasksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListTasksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/ListTasks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.tasks.v2beta2.CloudTasks", "ListTasks"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets a task.
        pub async fn get_task(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTaskRequest>,
        ) -> std::result::Result<tonic::Response<super::Task>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/GetTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.tasks.v2beta2.CloudTasks", "GetTask"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a task and adds it to a queue.
        ///
        /// Tasks cannot be updated after creation; there is no UpdateTask command.
        ///
        /// * For \[App Engine queues\]\[google.cloud.tasks.v2beta2.AppEngineHttpTarget\],
        ///  the maximum task size is
        ///  100KB.
        /// * For \[pull queues\]\[google.cloud.tasks.v2beta2.PullTarget\], the maximum
        ///  task size is 1MB.
        pub async fn create_task(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateTaskRequest>,
        ) -> std::result::Result<tonic::Response<super::Task>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/CreateTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "CreateTask",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a task.
        ///
        /// A task can be deleted if it is scheduled or dispatched. A task
        /// cannot be deleted if it has completed successfully or permanently
        /// failed.
        pub async fn delete_task(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteTaskRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/DeleteTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "DeleteTask",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Leases tasks from a pull queue for
        /// \[lease_duration\]\[google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration\].
        ///
        /// This method is invoked by the worker to obtain a lease. The
        /// worker must acknowledge the task via
        /// \[AcknowledgeTask\]\[google.cloud.tasks.v2beta2.CloudTasks.AcknowledgeTask\]
        /// after they have performed the work associated with the task.
        ///
        /// The \[payload\]\[google.cloud.tasks.v2beta2.PullMessage.payload\] is intended
        /// to store data that the worker needs to perform the work associated with the
        /// task. To return the payloads in the
        /// \[response\]\[google.cloud.tasks.v2beta2.LeaseTasksResponse\], set
        /// \[response_view\]\[google.cloud.tasks.v2beta2.LeaseTasksRequest.response_view\]
        /// to \[FULL\]\[google.cloud.tasks.v2beta2.Task.View.FULL\].
        ///
        /// A maximum of 10 qps of
        /// \[LeaseTasks\]\[google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks\] requests are
        /// allowed per queue. \[RESOURCE_EXHAUSTED\]\[google.rpc.Code.RESOURCE_EXHAUSTED\]
        /// is returned when this limit is
        /// exceeded. \[RESOURCE_EXHAUSTED\]\[google.rpc.Code.RESOURCE_EXHAUSTED\]
        /// is also returned when
        /// \[max_tasks_dispatched_per_second\]\[google.cloud.tasks.v2beta2.RateLimits.max_tasks_dispatched_per_second\]
        /// is exceeded.
        pub async fn lease_tasks(
            &mut self,
            request: impl tonic::IntoRequest<super::LeaseTasksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LeaseTasksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/LeaseTasks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "LeaseTasks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Acknowledges a pull task.
        ///
        /// The worker, that is, the entity that
        /// \[leased\]\[google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks\] this task must
        /// call this method to indicate that the work associated with the task has
        /// finished.
        ///
        /// The worker must acknowledge a task within the
        /// \[lease_duration\]\[google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration\]
        /// or the lease will expire and the task will become available to be leased
        /// again. After the task is acknowledged, it will not be returned
        /// by a later \[LeaseTasks\]\[google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks\],
        /// \[GetTask\]\[google.cloud.tasks.v2beta2.CloudTasks.GetTask\], or
        /// \[ListTasks\]\[google.cloud.tasks.v2beta2.CloudTasks.ListTasks\].
        pub async fn acknowledge_task(
            &mut self,
            request: impl tonic::IntoRequest<super::AcknowledgeTaskRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/AcknowledgeTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "AcknowledgeTask",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Renew the current lease of a pull task.
        ///
        /// The worker can use this method to extend the lease by a new
        /// duration, starting from now. The new task lease will be
        /// returned in the task's
        /// \[schedule_time\]\[google.cloud.tasks.v2beta2.Task.schedule_time\].
        pub async fn renew_lease(
            &mut self,
            request: impl tonic::IntoRequest<super::RenewLeaseRequest>,
        ) -> std::result::Result<tonic::Response<super::Task>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/RenewLease",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "RenewLease",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Cancel a pull task's lease.
        ///
        /// The worker can use this method to cancel a task's lease by
        /// setting its \[schedule_time\]\[google.cloud.tasks.v2beta2.Task.schedule_time\]
        /// to now. This will make the task available to be leased to the next caller
        /// of \[LeaseTasks\]\[google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks\].
        pub async fn cancel_lease(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelLeaseRequest>,
        ) -> std::result::Result<tonic::Response<super::Task>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/CancelLease",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.tasks.v2beta2.CloudTasks",
                        "CancelLease",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Forces a task to run now.
        ///
        /// When this method is called, Cloud Tasks will dispatch the task, even if
        /// the task is already running, the queue has reached its
        /// \[RateLimits\]\[google.cloud.tasks.v2beta2.RateLimits\] or is
        /// \[PAUSED\]\[google.cloud.tasks.v2beta2.Queue.State.PAUSED\].
        ///
        /// This command is meant to be used for manual debugging. For
        /// example, \[RunTask\]\[google.cloud.tasks.v2beta2.CloudTasks.RunTask\] can be
        /// used to retry a failed task after a fix has been made or to manually force
        /// a task to be dispatched now.
        ///
        /// The dispatched task is returned. That is, the task that is returned
        /// contains the \[status\]\[google.cloud.tasks.v2beta2.Task.status\] after the
        /// task is dispatched but before the task is received by its target.
        ///
        /// If Cloud Tasks receives a successful response from the task's
        /// target, then the task will be deleted; otherwise the task's
        /// \[schedule_time\]\[google.cloud.tasks.v2beta2.Task.schedule_time\] will be
        /// reset to the time that
        /// \[RunTask\]\[google.cloud.tasks.v2beta2.CloudTasks.RunTask\] was called plus
        /// the retry delay specified in the queue's
        /// \[RetryConfig\]\[google.cloud.tasks.v2beta2.RetryConfig\].
        ///
        /// \[RunTask\]\[google.cloud.tasks.v2beta2.CloudTasks.RunTask\] returns
        /// \[NOT_FOUND\]\[google.rpc.Code.NOT_FOUND\] when it is called on a
        /// task that has already succeeded or permanently failed.
        ///
        /// \[RunTask\]\[google.cloud.tasks.v2beta2.CloudTasks.RunTask\] cannot be called
        /// on a \[pull task\]\[google.cloud.tasks.v2beta2.PullMessage\].
        pub async fn run_task(
            &mut self,
            request: impl tonic::IntoRequest<super::RunTaskRequest>,
        ) -> std::result::Result<tonic::Response<super::Task>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.tasks.v2beta2.CloudTasks/RunTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.tasks.v2beta2.CloudTasks", "RunTask"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
