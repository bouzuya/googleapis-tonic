use std::{
    fs,
    path::{Path, PathBuf},
};

use anyhow::Context as _;

// FIXME: geenerate googleapis-tonic-xxx crates
pub fn build_crates(googleapis_tonic_src_dir: &str) -> anyhow::Result<()> {
    let googleapis_tonic_src_dir = PathBuf::from(googleapis_tonic_src_dir);
    // `"aaa.bbb.ccc.rs"`
    // aaa maybe contains `r#`
    let mut file_names = vec![];
    let out_dir = googleapis_tonic_src_dir.join("vec_u8_hash_map");
    for dir_entry in fs::read_dir(out_dir)? {
        let dir_entry = dir_entry?;
        let path = dir_entry.path();
        let file_name = path
            .file_name()
            .with_context(|| format!("file_name is None {}", path.display()))?
            .to_str()
            .with_context(|| format!("file_name is not utf-8 {}", path.display()))?;
        file_names.push(file_name.to_owned());
    }
    file_names.sort();
    // println!("{:#?}", file_names);

    let file_name = &file_names[0];

    let crate_name = format!(
        "googleapis-tonic-{}",
        file_name
            .split('.')
            .filter(|s| s != &"rs")
            .collect::<Vec<&str>>()
            .join("-")
    );
    // println!("{}", crate_name);

    // crates/googleapis-tonic-{crate_name}/
    //   src/
    //     bytes_btree_map/    ... variant directory
    //       {file_name}
    //     bytes_hash_map/
    //     vec_u8_btree_map/
    //     vec_u8_hash_map/
    //     bytes_btree_map.rs  ... variant file
    //     bytes_hash_map.rs
    //     lib.rs
    //     vec_u8_btree_map.rs
    //     vec_u8_hash_map.rs
    //   Cargo.toml
    let crate_dir = PathBuf::from("crates").join(&crate_name);
    fs::create_dir_all(&crate_dir)?;
    write_cargo_toml(&crate_dir, &crate_name)?;
    let src_dir = crate_dir.join("src");
    for variant in [
        "bytes_btree_map",
        "bytes_hash_map",
        "vec_u8_btree_map",
        "vec_u8_hash_map",
    ] {
        write_variant_dir(&googleapis_tonic_src_dir, &src_dir, variant, file_name)?;
        write_variant_file(&src_dir, variant)?;
    }
    fs::copy(
        googleapis_tonic_src_dir.join("lib.rs"),
        src_dir.join("lib.rs"),
    )?;
    Ok(())
}

// crates/googleapis-tonic-{crate_name}/Cargo.toml
fn write_cargo_toml(crate_dir: &Path, crate_name: &str) -> anyhow::Result<()> {
    let cargo_toml_path = crate_dir.join("Cargo.toml");
    let cargo_toml_content = r#"[package]
name = "{CRATE_NAME}"
version = "{VERSION}"
authors = ["bouzuya <m@bouzuya.net>"]
description = "A Google APIs client library generated by tonic-build"
edition = "2021"
keywords = ["api", "gcloud", "gcp", "google", "tonic"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/bouzuya/googleapis-tonic"

[dependencies]
prost = "0.13.1"
prost-types = "0.13.1"
tonic = { version = "0.12.1", default-features = false, features = [
  "codegen",
  "prost",
] }

[lints.clippy]
non_minimal_cfg = "allow"

[lints.rust]
unused_imports = "allow"

[features]
btree-map = []
bytes = []
default = ["hash-map", "vec-u8"]
hash-map = []
vec-u8 = []
"#
    .replace("{CRATE_NAME}", crate_name)
    .replace("{VERSION}", "0.0.0");
    fs::write(cargo_toml_path, cargo_toml_content)?;
    Ok(())
}

// crates/googleapis-tonic-{crate_name}/src/{variant}/{file_name}.rs
fn write_variant_dir(
    googleapis_tonic_src_dir: &Path,
    src_dir: &Path,
    variant: &str,
    file_name: &str,
) -> anyhow::Result<()> {
    let variant_dir = src_dir.join(variant);
    fs::create_dir_all(&variant_dir)?;
    fs::copy(
        googleapis_tonic_src_dir.join(variant).join(file_name),
        variant_dir.join(file_name),
    )?;
    Ok(())
}

// crates/googleapis-tonic-{crate_name}/src/{variant}.rs
fn write_variant_file(src_dir: &Path, variant: &str) -> anyhow::Result<()> {
    // FIXME:
    let variant_file = src_dir.join(format!("{}.rs", variant));
    let variant_file_content = r#"pub mod cloud {
    pub mod kubernetes {
        pub mod security {
            pub mod containersecurity_logging {
                include!("{VARIANT}/cloud.kubernetes.security.containersecurity_logging.rs");
            }
        }
    }
}
"#
    .replace("{VARIANT}", variant);
    fs::write(variant_file, variant_file_content)?;
    Ok(())
}
