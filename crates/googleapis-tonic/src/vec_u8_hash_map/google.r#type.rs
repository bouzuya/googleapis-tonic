// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LatLng {
    #[prost(double, tag = "1")]
    pub latitude: f64,
    #[prost(double, tag = "2")]
    pub longitude: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Date {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(int32, tag = "2")]
    pub month: i32,
    #[prost(int32, tag = "3")]
    pub day: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Money {
    #[prost(string, tag = "1")]
    pub currency_code: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub units: i64,
    #[prost(int32, tag = "3")]
    pub nanos: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PostalAddress {
    #[prost(int32, tag = "1")]
    pub revision: i32,
    #[prost(string, tag = "2")]
    pub region_code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub language_code: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub postal_code: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub sorting_code: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub administrative_area: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub locality: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub sublocality: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "9")]
    pub address_lines: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "10")]
    pub recipients: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "11")]
    pub organization: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocalizedText {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub language_code: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DayOfWeek {
    Unspecified = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
    Sunday = 7,
}
impl DayOfWeek {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DayOfWeek::Unspecified => "DAY_OF_WEEK_UNSPECIFIED",
            DayOfWeek::Monday => "MONDAY",
            DayOfWeek::Tuesday => "TUESDAY",
            DayOfWeek::Wednesday => "WEDNESDAY",
            DayOfWeek::Thursday => "THURSDAY",
            DayOfWeek::Friday => "FRIDAY",
            DayOfWeek::Saturday => "SATURDAY",
            DayOfWeek::Sunday => "SUNDAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DAY_OF_WEEK_UNSPECIFIED" => Some(Self::Unspecified),
            "MONDAY" => Some(Self::Monday),
            "TUESDAY" => Some(Self::Tuesday),
            "WEDNESDAY" => Some(Self::Wednesday),
            "THURSDAY" => Some(Self::Thursday),
            "FRIDAY" => Some(Self::Friday),
            "SATURDAY" => Some(Self::Saturday),
            "SUNDAY" => Some(Self::Sunday),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TimeOfDay {
    #[prost(int32, tag = "1")]
    pub hours: i32,
    #[prost(int32, tag = "2")]
    pub minutes: i32,
    #[prost(int32, tag = "3")]
    pub seconds: i32,
    #[prost(int32, tag = "4")]
    pub nanos: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Interval {
    #[prost(message, optional, tag = "1")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DateTime {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(int32, tag = "2")]
    pub month: i32,
    #[prost(int32, tag = "3")]
    pub day: i32,
    #[prost(int32, tag = "4")]
    pub hours: i32,
    #[prost(int32, tag = "5")]
    pub minutes: i32,
    #[prost(int32, tag = "6")]
    pub seconds: i32,
    #[prost(int32, tag = "7")]
    pub nanos: i32,
    #[prost(oneof = "date_time::TimeOffset", tags = "8, 9")]
    pub time_offset: ::core::option::Option<date_time::TimeOffset>,
}
/// Nested message and enum types in `DateTime`.
pub mod date_time {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TimeOffset {
        #[prost(message, tag = "8")]
        UtcOffset(::prost_types::Duration),
        #[prost(message, tag = "9")]
        TimeZone(super::TimeZone),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeZone {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PhoneNumber {
    #[prost(string, tag = "3")]
    pub extension: ::prost::alloc::string::String,
    #[prost(oneof = "phone_number::Kind", tags = "1, 2")]
    pub kind: ::core::option::Option<phone_number::Kind>,
}
/// Nested message and enum types in `PhoneNumber`.
pub mod phone_number {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ShortCode {
        #[prost(string, tag = "1")]
        pub region_code: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub number: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(string, tag = "1")]
        E164Number(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        ShortCode(ShortCode),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Expr {
    #[prost(string, tag = "1")]
    pub expression: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub location: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Color {
    #[prost(float, tag = "1")]
    pub red: f32,
    #[prost(float, tag = "2")]
    pub green: f32,
    #[prost(float, tag = "3")]
    pub blue: f32,
    #[prost(message, optional, tag = "4")]
    pub alpha: ::core::option::Option<f32>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CalendarPeriod {
    Unspecified = 0,
    Day = 1,
    Week = 2,
    Fortnight = 3,
    Month = 4,
    Quarter = 5,
    Half = 6,
    Year = 7,
}
impl CalendarPeriod {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CalendarPeriod::Unspecified => "CALENDAR_PERIOD_UNSPECIFIED",
            CalendarPeriod::Day => "DAY",
            CalendarPeriod::Week => "WEEK",
            CalendarPeriod::Fortnight => "FORTNIGHT",
            CalendarPeriod::Month => "MONTH",
            CalendarPeriod::Quarter => "QUARTER",
            CalendarPeriod::Half => "HALF",
            CalendarPeriod::Year => "YEAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CALENDAR_PERIOD_UNSPECIFIED" => Some(Self::Unspecified),
            "DAY" => Some(Self::Day),
            "WEEK" => Some(Self::Week),
            "FORTNIGHT" => Some(Self::Fortnight),
            "MONTH" => Some(Self::Month),
            "QUARTER" => Some(Self::Quarter),
            "HALF" => Some(Self::Half),
            "YEAR" => Some(Self::Year),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Quaternion {
    #[prost(double, tag = "1")]
    pub x: f64,
    #[prost(double, tag = "2")]
    pub y: f64,
    #[prost(double, tag = "3")]
    pub z: f64,
    #[prost(double, tag = "4")]
    pub w: f64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Month {
    Unspecified = 0,
    January = 1,
    February = 2,
    March = 3,
    April = 4,
    May = 5,
    June = 6,
    July = 7,
    August = 8,
    September = 9,
    October = 10,
    November = 11,
    December = 12,
}
impl Month {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Month::Unspecified => "MONTH_UNSPECIFIED",
            Month::January => "JANUARY",
            Month::February => "FEBRUARY",
            Month::March => "MARCH",
            Month::April => "APRIL",
            Month::May => "MAY",
            Month::June => "JUNE",
            Month::July => "JULY",
            Month::August => "AUGUST",
            Month::September => "SEPTEMBER",
            Month::October => "OCTOBER",
            Month::November => "NOVEMBER",
            Month::December => "DECEMBER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONTH_UNSPECIFIED" => Some(Self::Unspecified),
            "JANUARY" => Some(Self::January),
            "FEBRUARY" => Some(Self::February),
            "MARCH" => Some(Self::March),
            "APRIL" => Some(Self::April),
            "MAY" => Some(Self::May),
            "JUNE" => Some(Self::June),
            "JULY" => Some(Self::July),
            "AUGUST" => Some(Self::August),
            "SEPTEMBER" => Some(Self::September),
            "OCTOBER" => Some(Self::October),
            "NOVEMBER" => Some(Self::November),
            "DECEMBER" => Some(Self::December),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fraction {
    #[prost(int64, tag = "1")]
    pub numerator: i64,
    #[prost(int64, tag = "2")]
    pub denominator: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Decimal {
    #[prost(string, tag = "1")]
    pub value: ::prost::alloc::string::String,
}
