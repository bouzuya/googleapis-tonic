// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Environment {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub display_name: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub description: ::prost::alloc::string::String,
#[prost(string, tag = "8")]
pub post_startup_script: ::prost::alloc::string::String,
#[prost(message, optional, tag = "9")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(oneof = "environment::ImageType", tags = "6, 7")]
pub image_type: ::core::option::Option<environment::ImageType>,
}
/// Nested message and enum types in `Environment`.
pub mod environment {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum ImageType {
#[prost(message, tag = "6")]
VmImage(super::VmImage),
#[prost(message, tag = "7")]
ContainerImage(super::ContainerImage),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VmImage {
#[prost(string, tag = "1")]
pub project: ::prost::alloc::string::String,
#[prost(oneof = "vm_image::Image", tags = "2, 3")]
pub image: ::core::option::Option<vm_image::Image>,
}
/// Nested message and enum types in `VmImage`.
pub mod vm_image {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Image {
#[prost(string, tag = "2")]
ImageName(::prost::alloc::string::String),
#[prost(string, tag = "3")]
ImageFamily(::prost::alloc::string::String),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerImage {
#[prost(string, tag = "1")]
pub repository: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub tag: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReservationAffinity {
#[prost(enumeration = "reservation_affinity::Type", tag = "1")]
pub consume_reservation_type: i32,
#[prost(string, tag = "2")]
pub key: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Nested message and enum types in `ReservationAffinity`.
pub mod reservation_affinity {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
Unspecified = 0,
NoReservation = 1,
AnyReservation = 2,
SpecificReservation = 3,
}
impl Type {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Type::Unspecified => "TYPE_UNSPECIFIED",
Type::NoReservation => "NO_RESERVATION",
Type::AnyReservation => "ANY_RESERVATION",
Type::SpecificReservation => "SPECIFIC_RESERVATION",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"NO_RESERVATION" => Some(Self::NoReservation),
"ANY_RESERVATION" => Some(Self::AnyReservation),
"SPECIFIC_RESERVATION" => Some(Self::SpecificReservation),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub post_startup_script: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub proxy_uri: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "6")]
pub instance_owners: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, tag = "7")]
pub service_account: ::prost::alloc::string::String,
#[prost(string, tag = "8")]
pub machine_type: ::prost::alloc::string::String,
#[prost(message, optional, tag = "9")]
pub accelerator_config: ::core::option::Option<instance::AcceleratorConfig>,
#[prost(enumeration = "instance::State", tag = "10")]
pub state: i32,
#[prost(bool, tag = "11")]
pub install_gpu_driver: bool,
#[prost(string, tag = "12")]
pub custom_gpu_driver_path: ::prost::alloc::string::String,
#[prost(enumeration = "instance::DiskType", tag = "13")]
pub boot_disk_type: i32,
#[prost(int64, tag = "14")]
pub boot_disk_size_gb: i64,
#[prost(enumeration = "instance::DiskType", tag = "25")]
pub data_disk_type: i32,
#[prost(int64, tag = "26")]
pub data_disk_size_gb: i64,
#[prost(bool, tag = "27")]
pub no_remove_data_disk: bool,
#[prost(enumeration = "instance::DiskEncryption", tag = "15")]
pub disk_encryption: i32,
#[prost(string, tag = "16")]
pub kms_key: ::prost::alloc::string::String,
#[prost(bool, tag = "17")]
pub no_public_ip: bool,
#[prost(bool, tag = "18")]
pub no_proxy_access: bool,
#[prost(string, tag = "19")]
pub network: ::prost::alloc::string::String,
#[prost(string, tag = "20")]
pub subnet: ::prost::alloc::string::String,
#[prost(map = "string, string", tag = "21")]
pub labels: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(map = "string, string", tag = "22")]
pub metadata: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(enumeration = "instance::NicType", tag = "28")]
pub nic_type: i32,
#[prost(message, optional, tag = "29")]
pub reservation_affinity: ::core::option::Option<ReservationAffinity>,
#[prost(bool, tag = "31")]
pub can_ip_forward: bool,
#[prost(message, optional, tag = "23")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "24")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(oneof = "instance::Environment", tags = "2, 3")]
pub environment: ::core::option::Option<instance::Environment>,
}
/// Nested message and enum types in `Instance`.
pub mod instance {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceleratorConfig {
#[prost(enumeration = "AcceleratorType", tag = "1")]
pub r#type: i32,
#[prost(int64, tag = "2")]
pub core_count: i64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AcceleratorType {
Unspecified = 0,
NvidiaTeslaK80 = 1,
NvidiaTeslaP100 = 2,
NvidiaTeslaV100 = 3,
NvidiaTeslaP4 = 4,
NvidiaTeslaT4 = 5,
NvidiaTeslaT4Vws = 8,
NvidiaTeslaP100Vws = 9,
NvidiaTeslaP4Vws = 10,
TpuV2 = 6,
TpuV3 = 7,
}
impl AcceleratorType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
AcceleratorType::Unspecified => "ACCELERATOR_TYPE_UNSPECIFIED",
AcceleratorType::NvidiaTeslaK80 => "NVIDIA_TESLA_K80",
AcceleratorType::NvidiaTeslaP100 => "NVIDIA_TESLA_P100",
AcceleratorType::NvidiaTeslaV100 => "NVIDIA_TESLA_V100",
AcceleratorType::NvidiaTeslaP4 => "NVIDIA_TESLA_P4",
AcceleratorType::NvidiaTeslaT4 => "NVIDIA_TESLA_T4",
AcceleratorType::NvidiaTeslaT4Vws => "NVIDIA_TESLA_T4_VWS",
AcceleratorType::NvidiaTeslaP100Vws => "NVIDIA_TESLA_P100_VWS",
AcceleratorType::NvidiaTeslaP4Vws => "NVIDIA_TESLA_P4_VWS",
AcceleratorType::TpuV2 => "TPU_V2",
AcceleratorType::TpuV3 => "TPU_V3",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"ACCELERATOR_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"NVIDIA_TESLA_K80" => Some(Self::NvidiaTeslaK80),
"NVIDIA_TESLA_P100" => Some(Self::NvidiaTeslaP100),
"NVIDIA_TESLA_V100" => Some(Self::NvidiaTeslaV100),
"NVIDIA_TESLA_P4" => Some(Self::NvidiaTeslaP4),
"NVIDIA_TESLA_T4" => Some(Self::NvidiaTeslaT4),
"NVIDIA_TESLA_T4_VWS" => Some(Self::NvidiaTeslaT4Vws),
"NVIDIA_TESLA_P100_VWS" => Some(Self::NvidiaTeslaP100Vws),
"NVIDIA_TESLA_P4_VWS" => Some(Self::NvidiaTeslaP4Vws),
"TPU_V2" => Some(Self::TpuV2),
"TPU_V3" => Some(Self::TpuV3),
_ => None,
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum State {
Unspecified = 0,
Starting = 1,
Provisioning = 2,
Active = 3,
Stopping = 4,
Stopped = 5,
Deleted = 6,
Upgrading = 7,
Initializing = 8,
Registering = 9,
Suspending = 10,
Suspended = 11,
}
impl State {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
State::Unspecified => "STATE_UNSPECIFIED",
State::Starting => "STARTING",
State::Provisioning => "PROVISIONING",
State::Active => "ACTIVE",
State::Stopping => "STOPPING",
State::Stopped => "STOPPED",
State::Deleted => "DELETED",
State::Upgrading => "UPGRADING",
State::Initializing => "INITIALIZING",
State::Registering => "REGISTERING",
State::Suspending => "SUSPENDING",
State::Suspended => "SUSPENDED",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STATE_UNSPECIFIED" => Some(Self::Unspecified),
"STARTING" => Some(Self::Starting),
"PROVISIONING" => Some(Self::Provisioning),
"ACTIVE" => Some(Self::Active),
"STOPPING" => Some(Self::Stopping),
"STOPPED" => Some(Self::Stopped),
"DELETED" => Some(Self::Deleted),
"UPGRADING" => Some(Self::Upgrading),
"INITIALIZING" => Some(Self::Initializing),
"REGISTERING" => Some(Self::Registering),
"SUSPENDING" => Some(Self::Suspending),
"SUSPENDED" => Some(Self::Suspended),
_ => None,
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DiskType {
Unspecified = 0,
PdStandard = 1,
PdSsd = 2,
PdBalanced = 3,
}
impl DiskType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
DiskType::Unspecified => "DISK_TYPE_UNSPECIFIED",
DiskType::PdStandard => "PD_STANDARD",
DiskType::PdSsd => "PD_SSD",
DiskType::PdBalanced => "PD_BALANCED",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"DISK_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"PD_STANDARD" => Some(Self::PdStandard),
"PD_SSD" => Some(Self::PdSsd),
"PD_BALANCED" => Some(Self::PdBalanced),
_ => None,
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DiskEncryption {
Unspecified = 0,
Gmek = 1,
Cmek = 2,
}
impl DiskEncryption {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
DiskEncryption::Unspecified => "DISK_ENCRYPTION_UNSPECIFIED",
DiskEncryption::Gmek => "GMEK",
DiskEncryption::Cmek => "CMEK",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"DISK_ENCRYPTION_UNSPECIFIED" => Some(Self::Unspecified),
"GMEK" => Some(Self::Gmek),
"CMEK" => Some(Self::Cmek),
_ => None,
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NicType {
UnspecifiedNicType = 0,
VirtioNet = 1,
Gvnic = 2,
}
impl NicType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
NicType::UnspecifiedNicType => "UNSPECIFIED_NIC_TYPE",
NicType::VirtioNet => "VIRTIO_NET",
NicType::Gvnic => "GVNIC",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"UNSPECIFIED_NIC_TYPE" => Some(Self::UnspecifiedNicType),
"VIRTIO_NET" => Some(Self::VirtioNet),
"GVNIC" => Some(Self::Gvnic),
_ => None,
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Environment {
#[prost(message, tag = "2")]
VmImage(super::VmImage),
#[prost(message, tag = "3")]
ContainerImage(super::ContainerImage),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
#[prost(message, optional, tag = "1")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "2")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "3")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub status_message: ::prost::alloc::string::String,
#[prost(bool, tag = "6")]
pub requested_cancellation: bool,
#[prost(string, tag = "7")]
pub api_version: ::prost::alloc::string::String,
#[prost(string, tag = "8")]
pub endpoint: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesResponse {
#[prost(message, repeated, tag = "1")]
pub instances: ::prost::alloc::vec::Vec<Instance>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstanceRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub instance_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub instance: ::core::option::Option<Instance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterInstanceRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub instance_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetInstanceAcceleratorRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(enumeration = "instance::AcceleratorType", tag = "2")]
pub r#type: i32,
#[prost(int64, tag = "3")]
pub core_count: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetInstanceMachineTypeRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub machine_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetInstanceLabelsRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(map = "string, string", tag = "2")]
pub labels: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportInstanceInfoRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub vm_id: ::prost::alloc::string::String,
#[prost(map = "string, string", tag = "3")]
pub metadata: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IsInstanceUpgradeableRequest {
#[prost(string, tag = "1")]
pub notebook_instance: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IsInstanceUpgradeableResponse {
#[prost(bool, tag = "1")]
pub upgradeable: bool,
#[prost(string, tag = "2")]
pub upgrade_version: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub upgrade_info: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub upgrade_image: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpgradeInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpgradeInstanceInternalRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub vm_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListEnvironmentsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListEnvironmentsResponse {
#[prost(message, repeated, tag = "1")]
pub environments: ::prost::alloc::vec::Vec<Environment>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnvironmentRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEnvironmentRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub environment_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub environment: ::core::option::Option<Environment>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteEnvironmentRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod notebook_service_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// API v1beta1 service for Cloud AI Platform Notebooks.
#[derive(Debug, Clone)]
pub struct NotebookServiceClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> NotebookServiceClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> NotebookServiceClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
NotebookServiceClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Lists instances in a given project and location.
pub async fn list_instances(&mut self, request: impl tonic::IntoRequest<super::ListInstancesRequest>) -> std::result::Result<tonic::Response<super::ListInstancesResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/ListInstances");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "ListInstances"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single Instance.
pub async fn get_instance(&mut self, request: impl tonic::IntoRequest<super::GetInstanceRequest>) -> std::result::Result<tonic::Response<super::Instance>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/GetInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "GetInstance"));
self.inner.unary(req, path, codec).await
}
/// Creates a new Instance in a given project and location.
pub async fn create_instance(&mut self, request: impl tonic::IntoRequest<super::CreateInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/CreateInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "CreateInstance"));
self.inner.unary(req, path, codec).await
}
/// Registers an existing legacy notebook instance to the Notebooks API server.
/// Legacy instances are instances created with the legacy Compute Engine
/// calls. They are not manageable by the Notebooks API out of the box. This
/// call makes these instances manageable by the Notebooks API.
pub async fn register_instance(&mut self, request: impl tonic::IntoRequest<super::RegisterInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/RegisterInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "RegisterInstance"));
self.inner.unary(req, path, codec).await
}
/// Updates the guest accelerators of a single Instance.
pub async fn set_instance_accelerator(&mut self, request: impl tonic::IntoRequest<super::SetInstanceAcceleratorRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/SetInstanceAccelerator");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "SetInstanceAccelerator"));
self.inner.unary(req, path, codec).await
}
/// Updates the machine type of a single Instance.
pub async fn set_instance_machine_type(&mut self, request: impl tonic::IntoRequest<super::SetInstanceMachineTypeRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/SetInstanceMachineType");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "SetInstanceMachineType"));
self.inner.unary(req, path, codec).await
}
/// Updates the labels of an Instance.
pub async fn set_instance_labels(&mut self, request: impl tonic::IntoRequest<super::SetInstanceLabelsRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/SetInstanceLabels");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "SetInstanceLabels"));
self.inner.unary(req, path, codec).await
}
/// Deletes a single Instance.
pub async fn delete_instance(&mut self, request: impl tonic::IntoRequest<super::DeleteInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/DeleteInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "DeleteInstance"));
self.inner.unary(req, path, codec).await
}
/// Starts a notebook instance.
pub async fn start_instance(&mut self, request: impl tonic::IntoRequest<super::StartInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/StartInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "StartInstance"));
self.inner.unary(req, path, codec).await
}
/// Stops a notebook instance.
pub async fn stop_instance(&mut self, request: impl tonic::IntoRequest<super::StopInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/StopInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "StopInstance"));
self.inner.unary(req, path, codec).await
}
/// Resets a notebook instance.
pub async fn reset_instance(&mut self, request: impl tonic::IntoRequest<super::ResetInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/ResetInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "ResetInstance"));
self.inner.unary(req, path, codec).await
}
/// Allows notebook instances to
/// report their latest instance information to the Notebooks
/// API server. The server will merge the reported information to
/// the instance metadata store. Do not use this method directly.
pub async fn report_instance_info(&mut self, request: impl tonic::IntoRequest<super::ReportInstanceInfoRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/ReportInstanceInfo");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "ReportInstanceInfo"));
self.inner.unary(req, path, codec).await
}
/// Check if a notebook instance is upgradable.
/// Deprecated. Please consider using v1.
pub async fn is_instance_upgradeable(&mut self, request: impl tonic::IntoRequest<super::IsInstanceUpgradeableRequest>) -> std::result::Result<tonic::Response<super::IsInstanceUpgradeableResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/IsInstanceUpgradeable");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "IsInstanceUpgradeable"));
self.inner.unary(req, path, codec).await
}
/// Upgrades a notebook instance to the latest version.
/// Deprecated. Please consider using v1.
pub async fn upgrade_instance(&mut self, request: impl tonic::IntoRequest<super::UpgradeInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/UpgradeInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "UpgradeInstance"));
self.inner.unary(req, path, codec).await
}
/// Allows notebook instances to
/// call this endpoint to upgrade themselves. Do not use this method directly.
/// Deprecated. Please consider using v1.
pub async fn upgrade_instance_internal(&mut self, request: impl tonic::IntoRequest<super::UpgradeInstanceInternalRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/UpgradeInstanceInternal");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "UpgradeInstanceInternal"));
self.inner.unary(req, path, codec).await
}
/// Lists environments in a project.
pub async fn list_environments(&mut self, request: impl tonic::IntoRequest<super::ListEnvironmentsRequest>) -> std::result::Result<tonic::Response<super::ListEnvironmentsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/ListEnvironments");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "ListEnvironments"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single Environment.
pub async fn get_environment(&mut self, request: impl tonic::IntoRequest<super::GetEnvironmentRequest>) -> std::result::Result<tonic::Response<super::Environment>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/GetEnvironment");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "GetEnvironment"));
self.inner.unary(req, path, codec).await
}
/// Creates a new Environment.
pub async fn create_environment(&mut self, request: impl tonic::IntoRequest<super::CreateEnvironmentRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/CreateEnvironment");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "CreateEnvironment"));
self.inner.unary(req, path, codec).await
}
/// Deletes a single Environment.
pub async fn delete_environment(&mut self, request: impl tonic::IntoRequest<super::DeleteEnvironmentRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.notebooks.v1beta1.NotebookService/DeleteEnvironment");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.notebooks.v1beta1.NotebookService", "DeleteEnvironment"));
self.inner.unary(req, path, codec).await
}
}
}
