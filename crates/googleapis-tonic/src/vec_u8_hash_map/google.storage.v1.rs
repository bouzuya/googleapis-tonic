// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bucket {
    #[prost(message, repeated, tag = "1")]
    pub acl: ::prost::alloc::vec::Vec<BucketAccessControl>,
    #[prost(message, repeated, tag = "2")]
    pub default_object_acl: ::prost::alloc::vec::Vec<ObjectAccessControl>,
    #[prost(message, optional, tag = "3")]
    pub lifecycle: ::core::option::Option<bucket::Lifecycle>,
    #[prost(message, optional, tag = "4")]
    pub time_created: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "5")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "7")]
    pub project_number: i64,
    #[prost(int64, tag = "8")]
    pub metageneration: i64,
    #[prost(message, repeated, tag = "9")]
    pub cors: ::prost::alloc::vec::Vec<bucket::Cors>,
    #[prost(string, tag = "10")]
    pub location: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub storage_class: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub etag: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "13")]
    pub updated: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(bool, tag = "14")]
    pub default_event_based_hold: bool,
    #[prost(map = "string, string", tag = "15")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "16")]
    pub website: ::core::option::Option<bucket::Website>,
    #[prost(message, optional, tag = "17")]
    pub versioning: ::core::option::Option<bucket::Versioning>,
    #[prost(message, optional, tag = "18")]
    pub logging: ::core::option::Option<bucket::Logging>,
    #[prost(message, optional, tag = "19")]
    pub owner: ::core::option::Option<Owner>,
    #[prost(message, optional, tag = "20")]
    pub encryption: ::core::option::Option<bucket::Encryption>,
    #[prost(message, optional, tag = "21")]
    pub billing: ::core::option::Option<bucket::Billing>,
    #[prost(message, optional, tag = "22")]
    pub retention_policy: ::core::option::Option<bucket::RetentionPolicy>,
    #[prost(string, tag = "23")]
    pub location_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "24")]
    pub iam_configuration: ::core::option::Option<bucket::IamConfiguration>,
    #[deprecated]
    #[prost(string, repeated, tag = "25")]
    pub zone_affinity: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "26")]
    pub satisfies_pzs: bool,
    #[prost(message, optional, tag = "28")]
    pub autoclass: ::core::option::Option<bucket::Autoclass>,
}
/// Nested message and enum types in `Bucket`.
pub mod bucket {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Billing {
        #[prost(bool, tag = "1")]
        pub requester_pays: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Cors {
        #[prost(string, repeated, tag = "1")]
        pub origin: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "2")]
        pub method: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "3")]
        pub response_header: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(int32, tag = "4")]
        pub max_age_seconds: i32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Encryption {
        #[prost(string, tag = "1")]
        pub default_kms_key_name: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct IamConfiguration {
        #[prost(message, optional, tag = "1")]
        pub uniform_bucket_level_access: ::core::option::Option<
            iam_configuration::UniformBucketLevelAccess,
        >,
        #[prost(enumeration = "iam_configuration::PublicAccessPrevention", tag = "2")]
        pub public_access_prevention: i32,
    }
    /// Nested message and enum types in `IamConfiguration`.
    pub mod iam_configuration {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct UniformBucketLevelAccess {
            #[prost(bool, tag = "1")]
            pub enabled: bool,
            #[prost(message, optional, tag = "2")]
            pub locked_time: ::core::option::Option<::prost_types::Timestamp>,
        }
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum PublicAccessPrevention {
            Unspecified = 0,
            Enforced = 1,
            Inherited = 2,
        }
        impl PublicAccessPrevention {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    PublicAccessPrevention::Unspecified => {
                        "PUBLIC_ACCESS_PREVENTION_UNSPECIFIED"
                    }
                    PublicAccessPrevention::Enforced => "ENFORCED",
                    PublicAccessPrevention::Inherited => "INHERITED",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "PUBLIC_ACCESS_PREVENTION_UNSPECIFIED" => Some(Self::Unspecified),
                    "ENFORCED" => Some(Self::Enforced),
                    "INHERITED" => Some(Self::Inherited),
                    _ => None,
                }
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Lifecycle {
        #[prost(message, repeated, tag = "1")]
        pub rule: ::prost::alloc::vec::Vec<lifecycle::Rule>,
    }
    /// Nested message and enum types in `Lifecycle`.
    pub mod lifecycle {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Rule {
            #[prost(message, optional, tag = "1")]
            pub action: ::core::option::Option<rule::Action>,
            #[prost(message, optional, tag = "2")]
            pub condition: ::core::option::Option<rule::Condition>,
        }
        /// Nested message and enum types in `Rule`.
        pub mod rule {
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct Action {
                #[prost(string, tag = "1")]
                pub r#type: ::prost::alloc::string::String,
                #[prost(string, tag = "2")]
                pub storage_class: ::prost::alloc::string::String,
            }
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct Condition {
                #[prost(int32, tag = "1")]
                pub age: i32,
                #[prost(message, optional, tag = "2")]
                pub created_before: ::core::option::Option<::prost_types::Timestamp>,
                #[prost(message, optional, tag = "3")]
                pub is_live: ::core::option::Option<bool>,
                #[prost(int32, tag = "4")]
                pub num_newer_versions: i32,
                #[prost(string, repeated, tag = "5")]
                pub matches_storage_class: ::prost::alloc::vec::Vec<
                    ::prost::alloc::string::String,
                >,
                #[prost(string, tag = "6")]
                pub matches_pattern: ::prost::alloc::string::String,
                #[prost(int32, tag = "7")]
                pub days_since_custom_time: i32,
                #[prost(message, optional, tag = "8")]
                pub custom_time_before: ::core::option::Option<::prost_types::Timestamp>,
                #[prost(int32, tag = "9")]
                pub days_since_noncurrent_time: i32,
                #[prost(message, optional, tag = "10")]
                pub noncurrent_time_before: ::core::option::Option<
                    ::prost_types::Timestamp,
                >,
                #[prost(string, repeated, tag = "11")]
                pub matches_prefix: ::prost::alloc::vec::Vec<
                    ::prost::alloc::string::String,
                >,
                #[prost(string, repeated, tag = "12")]
                pub matches_suffix: ::prost::alloc::vec::Vec<
                    ::prost::alloc::string::String,
                >,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Logging {
        #[prost(string, tag = "1")]
        pub log_bucket: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub log_object_prefix: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RetentionPolicy {
        #[prost(message, optional, tag = "1")]
        pub effective_time: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(bool, tag = "2")]
        pub is_locked: bool,
        #[prost(int64, tag = "3")]
        pub retention_period: i64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Versioning {
        #[prost(bool, tag = "1")]
        pub enabled: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Website {
        #[prost(string, tag = "1")]
        pub main_page_suffix: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub not_found_page: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Autoclass {
        #[prost(bool, tag = "1")]
        pub enabled: bool,
        #[prost(message, optional, tag = "2")]
        pub toggle_time: ::core::option::Option<::prost_types::Timestamp>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BucketAccessControl {
    #[prost(string, tag = "1")]
    pub role: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub etag: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub entity_id: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub domain: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub project_team: ::core::option::Option<ProjectTeam>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBucketAccessControlsResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<BucketAccessControl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBucketsResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Bucket>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Channel {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub resource_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub resource_uri: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub expiration: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "6")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub address: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "8")]
    pub params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(bool, tag = "9")]
    pub payload: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListChannelsResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<list_channels_response::Items>,
}
/// Nested message and enum types in `ListChannelsResponse`.
pub mod list_channels_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Items {
        #[prost(string, tag = "1")]
        pub channel_id: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub resource_id: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub push_url: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub subscriber_email: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "5")]
        pub creation_time: ::core::option::Option<::prost_types::Timestamp>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChecksummedData {
    #[prost(bytes = "vec", tag = "1")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub crc32c: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectChecksums {
    #[prost(message, optional, tag = "1")]
    pub crc32c: ::core::option::Option<u32>,
    #[prost(string, tag = "2")]
    pub md5_hash: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CommonEnums {}
/// Nested message and enum types in `CommonEnums`.
pub mod common_enums {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Projection {
        Unspecified = 0,
        NoAcl = 1,
        Full = 2,
    }
    impl Projection {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Projection::Unspecified => "PROJECTION_UNSPECIFIED",
                Projection::NoAcl => "NO_ACL",
                Projection::Full => "FULL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PROJECTION_UNSPECIFIED" => Some(Self::Unspecified),
                "NO_ACL" => Some(Self::NoAcl),
                "FULL" => Some(Self::Full),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PredefinedBucketAcl {
        Unspecified = 0,
        BucketAclAuthenticatedRead = 1,
        BucketAclPrivate = 2,
        BucketAclProjectPrivate = 3,
        BucketAclPublicRead = 4,
        BucketAclPublicReadWrite = 5,
    }
    impl PredefinedBucketAcl {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                PredefinedBucketAcl::Unspecified => "PREDEFINED_BUCKET_ACL_UNSPECIFIED",
                PredefinedBucketAcl::BucketAclAuthenticatedRead => {
                    "BUCKET_ACL_AUTHENTICATED_READ"
                }
                PredefinedBucketAcl::BucketAclPrivate => "BUCKET_ACL_PRIVATE",
                PredefinedBucketAcl::BucketAclProjectPrivate => {
                    "BUCKET_ACL_PROJECT_PRIVATE"
                }
                PredefinedBucketAcl::BucketAclPublicRead => "BUCKET_ACL_PUBLIC_READ",
                PredefinedBucketAcl::BucketAclPublicReadWrite => {
                    "BUCKET_ACL_PUBLIC_READ_WRITE"
                }
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PREDEFINED_BUCKET_ACL_UNSPECIFIED" => Some(Self::Unspecified),
                "BUCKET_ACL_AUTHENTICATED_READ" => Some(Self::BucketAclAuthenticatedRead),
                "BUCKET_ACL_PRIVATE" => Some(Self::BucketAclPrivate),
                "BUCKET_ACL_PROJECT_PRIVATE" => Some(Self::BucketAclProjectPrivate),
                "BUCKET_ACL_PUBLIC_READ" => Some(Self::BucketAclPublicRead),
                "BUCKET_ACL_PUBLIC_READ_WRITE" => Some(Self::BucketAclPublicReadWrite),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PredefinedObjectAcl {
        Unspecified = 0,
        ObjectAclAuthenticatedRead = 1,
        ObjectAclBucketOwnerFullControl = 2,
        ObjectAclBucketOwnerRead = 3,
        ObjectAclPrivate = 4,
        ObjectAclProjectPrivate = 5,
        ObjectAclPublicRead = 6,
    }
    impl PredefinedObjectAcl {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                PredefinedObjectAcl::Unspecified => "PREDEFINED_OBJECT_ACL_UNSPECIFIED",
                PredefinedObjectAcl::ObjectAclAuthenticatedRead => {
                    "OBJECT_ACL_AUTHENTICATED_READ"
                }
                PredefinedObjectAcl::ObjectAclBucketOwnerFullControl => {
                    "OBJECT_ACL_BUCKET_OWNER_FULL_CONTROL"
                }
                PredefinedObjectAcl::ObjectAclBucketOwnerRead => {
                    "OBJECT_ACL_BUCKET_OWNER_READ"
                }
                PredefinedObjectAcl::ObjectAclPrivate => "OBJECT_ACL_PRIVATE",
                PredefinedObjectAcl::ObjectAclProjectPrivate => {
                    "OBJECT_ACL_PROJECT_PRIVATE"
                }
                PredefinedObjectAcl::ObjectAclPublicRead => "OBJECT_ACL_PUBLIC_READ",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PREDEFINED_OBJECT_ACL_UNSPECIFIED" => Some(Self::Unspecified),
                "OBJECT_ACL_AUTHENTICATED_READ" => Some(Self::ObjectAclAuthenticatedRead),
                "OBJECT_ACL_BUCKET_OWNER_FULL_CONTROL" => {
                    Some(Self::ObjectAclBucketOwnerFullControl)
                }
                "OBJECT_ACL_BUCKET_OWNER_READ" => Some(Self::ObjectAclBucketOwnerRead),
                "OBJECT_ACL_PRIVATE" => Some(Self::ObjectAclPrivate),
                "OBJECT_ACL_PROJECT_PRIVATE" => Some(Self::ObjectAclProjectPrivate),
                "OBJECT_ACL_PUBLIC_READ" => Some(Self::ObjectAclPublicRead),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentRange {
    #[prost(int64, tag = "1")]
    pub start: i64,
    #[prost(int64, tag = "2")]
    pub end: i64,
    #[prost(int64, tag = "3")]
    pub complete_length: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HmacKeyMetadata {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub access_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub service_account_email: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub state: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub time_created: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub updated: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "8")]
    pub etag: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Notification {
    #[prost(string, tag = "1")]
    pub topic: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub event_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "3")]
    pub custom_attributes: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub object_name_prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub payload_format: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNotificationsResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Notification>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Object {
    #[prost(string, tag = "1")]
    pub content_encoding: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub content_disposition: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub cache_control: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub acl: ::prost::alloc::vec::Vec<ObjectAccessControl>,
    #[prost(string, tag = "5")]
    pub content_language: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub metageneration: i64,
    #[prost(message, optional, tag = "7")]
    pub time_deleted: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "8")]
    pub content_type: ::prost::alloc::string::String,
    #[prost(int64, tag = "9")]
    pub size: i64,
    #[prost(message, optional, tag = "10")]
    pub time_created: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "11")]
    pub crc32c: ::core::option::Option<u32>,
    #[prost(int32, tag = "12")]
    pub component_count: i32,
    #[prost(string, tag = "13")]
    pub md5_hash: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub etag: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "15")]
    pub updated: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "16")]
    pub storage_class: ::prost::alloc::string::String,
    #[prost(string, tag = "17")]
    pub kms_key_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "18")]
    pub time_storage_class_updated: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(bool, tag = "19")]
    pub temporary_hold: bool,
    #[prost(message, optional, tag = "20")]
    pub retention_expiration_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(map = "string, string", tag = "21")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "29")]
    pub event_based_hold: ::core::option::Option<bool>,
    #[prost(string, tag = "23")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "24")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "25")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(int64, tag = "26")]
    pub generation: i64,
    #[prost(message, optional, tag = "27")]
    pub owner: ::core::option::Option<Owner>,
    #[prost(message, optional, tag = "28")]
    pub customer_encryption: ::core::option::Option<object::CustomerEncryption>,
    #[prost(message, optional, tag = "30")]
    pub custom_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `Object`.
pub mod object {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CustomerEncryption {
        #[prost(string, tag = "1")]
        pub encryption_algorithm: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub key_sha256: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectAccessControl {
    #[prost(string, tag = "1")]
    pub role: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub etag: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub generation: i64,
    #[prost(string, tag = "7")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub entity_id: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub domain: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "11")]
    pub project_team: ::core::option::Option<ProjectTeam>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectAccessControlsResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<ObjectAccessControl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectsResponse {
    #[prost(string, repeated, tag = "1")]
    pub prefixes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<Object>,
    #[prost(string, tag = "3")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProjectTeam {
    #[prost(string, tag = "1")]
    pub project_number: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub team: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceAccount {
    #[prost(string, tag = "1")]
    pub email_address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Owner {
    #[prost(string, tag = "1")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteBucketAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBucketAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertBucketAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub bucket_access_control: ::core::option::Option<BucketAccessControl>,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBucketAccessControlsRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatchBucketAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub bucket_access_control: ::core::option::Option<BucketAccessControl>,
    #[prost(message, optional, tag = "5")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateBucketAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub bucket_access_control: ::core::option::Option<BucketAccessControl>,
    #[prost(message, optional, tag = "5")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "3")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "3")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::Projection", tag = "4")]
    pub projection: i32,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertBucketRequest {
    #[prost(enumeration = "common_enums::PredefinedBucketAcl", tag = "1")]
    pub predefined_acl: i32,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "2")]
    pub predefined_default_object_acl: i32,
    #[prost(string, tag = "3")]
    pub project: ::prost::alloc::string::String,
    #[prost(enumeration = "common_enums::Projection", tag = "4")]
    pub projection: i32,
    #[prost(message, optional, tag = "6")]
    pub bucket: ::core::option::Option<Bucket>,
    #[prost(message, optional, tag = "7")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListChannelsRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBucketsRequest {
    #[prost(int32, tag = "1")]
    pub max_results: i32,
    #[prost(string, tag = "2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub project: ::prost::alloc::string::String,
    #[prost(enumeration = "common_enums::Projection", tag = "5")]
    pub projection: i32,
    #[prost(message, optional, tag = "7")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockRetentionPolicyRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub if_metageneration_match: i64,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatchBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "3")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::PredefinedBucketAcl", tag = "4")]
    pub predefined_acl: i32,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "5")]
    pub predefined_default_object_acl: i32,
    #[prost(enumeration = "common_enums::Projection", tag = "6")]
    pub projection: i32,
    #[prost(message, optional, tag = "8")]
    pub metadata: ::core::option::Option<Bucket>,
    #[prost(message, optional, tag = "9")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "10")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "3")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::PredefinedBucketAcl", tag = "4")]
    pub predefined_acl: i32,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "5")]
    pub predefined_default_object_acl: i32,
    #[prost(enumeration = "common_enums::Projection", tag = "6")]
    pub projection: i32,
    #[prost(message, optional, tag = "8")]
    pub metadata: ::core::option::Option<Bucket>,
    #[prost(message, optional, tag = "9")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopChannelRequest {
    #[prost(message, optional, tag = "1")]
    pub channel: ::core::option::Option<Channel>,
    #[prost(message, optional, tag = "2")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteDefaultObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDefaultObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertDefaultObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub object_access_control: ::core::option::Option<ObjectAccessControl>,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDefaultObjectAccessControlsRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "3")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatchDefaultObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub object_access_control: ::core::option::Option<ObjectAccessControl>,
    #[prost(message, optional, tag = "5")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDefaultObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub object_access_control: ::core::option::Option<ObjectAccessControl>,
    #[prost(message, optional, tag = "5")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteNotificationRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub notification: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNotificationRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub notification: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertNotificationRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub notification: ::core::option::Option<Notification>,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNotificationsRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub generation: i64,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub generation: i64,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub generation: i64,
    #[prost(message, optional, tag = "5")]
    pub object_access_control: ::core::option::Option<ObjectAccessControl>,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectAccessControlsRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub generation: i64,
    #[prost(message, optional, tag = "5")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatchObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub generation: i64,
    #[prost(message, optional, tag = "5")]
    pub object_access_control: ::core::option::Option<ObjectAccessControl>,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
    #[prost(message, optional, tag = "7")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateObjectAccessControlRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub generation: i64,
    #[prost(message, optional, tag = "6")]
    pub object_access_control: ::core::option::Option<ObjectAccessControl>,
    #[prost(message, optional, tag = "7")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
    #[prost(message, optional, tag = "8")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeObjectRequest {
    #[prost(string, tag = "1")]
    pub destination_bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub destination_object: ::prost::alloc::string::String,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "3")]
    pub destination_predefined_acl: i32,
    #[prost(message, optional, tag = "11")]
    pub destination: ::core::option::Option<Object>,
    #[prost(message, repeated, tag = "12")]
    pub source_objects: ::prost::alloc::vec::Vec<compose_object_request::SourceObjects>,
    #[prost(message, optional, tag = "4")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(string, tag = "6")]
    pub kms_key_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "10")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
/// Nested message and enum types in `ComposeObjectRequest`.
pub mod compose_object_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SourceObjects {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(int64, tag = "2")]
        pub generation: i64,
        #[prost(message, optional, tag = "3")]
        pub object_preconditions: ::core::option::Option<
            source_objects::ObjectPreconditions,
        >,
    }
    /// Nested message and enum types in `SourceObjects`.
    pub mod source_objects {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct ObjectPreconditions {
            #[prost(message, optional, tag = "1")]
            pub if_generation_match: ::core::option::Option<i64>,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CopyObjectRequest {
    #[prost(string, tag = "1")]
    pub destination_bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub destination_object: ::prost::alloc::string::String,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "3")]
    pub destination_predefined_acl: i32,
    #[prost(message, optional, tag = "4")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "6")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "7")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "8")]
    pub if_source_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "9")]
    pub if_source_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "10")]
    pub if_source_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "11")]
    pub if_source_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::Projection", tag = "12")]
    pub projection: i32,
    #[prost(string, tag = "13")]
    pub source_bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub source_object: ::prost::alloc::string::String,
    #[prost(int64, tag = "15")]
    pub source_generation: i64,
    #[prost(message, optional, tag = "17")]
    pub destination: ::core::option::Option<Object>,
    #[prost(string, tag = "20")]
    pub destination_kms_key_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "18")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "19")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteObjectRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub upload_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub generation: i64,
    #[prost(message, optional, tag = "5")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "6")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "7")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "8")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "10")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "11")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectMediaRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub generation: i64,
    #[prost(int64, tag = "4")]
    pub read_offset: i64,
    #[prost(int64, tag = "5")]
    pub read_limit: i64,
    #[prost(message, optional, tag = "6")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "7")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "8")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "9")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "11")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "12")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub generation: i64,
    #[prost(message, optional, tag = "4")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "6")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "7")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::Projection", tag = "8")]
    pub projection: i32,
    #[prost(message, optional, tag = "10")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "11")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectMediaResponse {
    #[prost(message, optional, tag = "1")]
    pub checksummed_data: ::core::option::Option<ChecksummedData>,
    #[prost(message, optional, tag = "2")]
    pub object_checksums: ::core::option::Option<ObjectChecksums>,
    #[prost(message, optional, tag = "3")]
    pub content_range: ::core::option::Option<ContentRange>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<Object>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertObjectSpec {
    #[prost(message, optional, tag = "1")]
    pub resource: ::core::option::Option<Object>,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "2")]
    pub predefined_acl: i32,
    #[prost(message, optional, tag = "3")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "4")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "6")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::Projection", tag = "7")]
    pub projection: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertObjectRequest {
    #[prost(int64, tag = "3")]
    pub write_offset: i64,
    #[prost(message, optional, tag = "6")]
    pub object_checksums: ::core::option::Option<ObjectChecksums>,
    #[prost(bool, tag = "7")]
    pub finish_write: bool,
    #[prost(message, optional, tag = "8")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "9")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
    #[prost(oneof = "insert_object_request::FirstMessage", tags = "1, 2")]
    pub first_message: ::core::option::Option<insert_object_request::FirstMessage>,
    #[prost(oneof = "insert_object_request::Data", tags = "4, 5")]
    pub data: ::core::option::Option<insert_object_request::Data>,
}
/// Nested message and enum types in `InsertObjectRequest`.
pub mod insert_object_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum FirstMessage {
        #[prost(string, tag = "1")]
        UploadId(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        InsertObjectSpec(super::InsertObjectSpec),
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(message, tag = "4")]
        ChecksummedData(super::ChecksummedData),
        #[prost(message, tag = "5")]
        Reference(super::GetObjectMediaRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectsRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub delimiter: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub include_trailing_delimiter: bool,
    #[prost(int32, tag = "4")]
    pub max_results: i32,
    #[prost(string, tag = "5")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(enumeration = "common_enums::Projection", tag = "7")]
    pub projection: i32,
    #[prost(bool, tag = "9")]
    pub versions: bool,
    #[prost(string, tag = "11")]
    pub lexicographic_start: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub lexicographic_end: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryWriteStatusRequest {
    #[prost(string, tag = "1")]
    pub upload_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryWriteStatusResponse {
    #[prost(int64, tag = "1")]
    pub committed_size: i64,
    #[prost(bool, tag = "2")]
    pub complete: bool,
    #[prost(message, optional, tag = "3")]
    pub resource: ::core::option::Option<Object>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RewriteObjectRequest {
    #[prost(string, tag = "1")]
    pub destination_bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub destination_object: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub destination_kms_key_name: ::prost::alloc::string::String,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "4")]
    pub destination_predefined_acl: i32,
    #[prost(message, optional, tag = "5")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "6")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "7")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "8")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "9")]
    pub if_source_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "10")]
    pub if_source_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "11")]
    pub if_source_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "12")]
    pub if_source_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(int64, tag = "13")]
    pub max_bytes_rewritten_per_call: i64,
    #[prost(enumeration = "common_enums::Projection", tag = "14")]
    pub projection: i32,
    #[prost(string, tag = "15")]
    pub rewrite_token: ::prost::alloc::string::String,
    #[prost(string, tag = "16")]
    pub source_bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "17")]
    pub source_object: ::prost::alloc::string::String,
    #[prost(int64, tag = "18")]
    pub source_generation: i64,
    #[prost(message, optional, tag = "20")]
    pub object: ::core::option::Option<Object>,
    #[prost(string, tag = "21")]
    pub copy_source_encryption_algorithm: ::prost::alloc::string::String,
    #[prost(string, tag = "22")]
    pub copy_source_encryption_key: ::prost::alloc::string::String,
    #[prost(string, tag = "23")]
    pub copy_source_encryption_key_sha256: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "24")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "25")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RewriteResponse {
    #[prost(int64, tag = "1")]
    pub total_bytes_rewritten: i64,
    #[prost(int64, tag = "2")]
    pub object_size: i64,
    #[prost(bool, tag = "3")]
    pub done: bool,
    #[prost(string, tag = "4")]
    pub rewrite_token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub resource: ::core::option::Option<Object>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartResumableWriteRequest {
    #[prost(message, optional, tag = "1")]
    pub insert_object_spec: ::core::option::Option<InsertObjectSpec>,
    #[prost(message, optional, tag = "3")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "4")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartResumableWriteResponse {
    #[prost(string, tag = "1")]
    pub upload_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatchObjectRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub generation: i64,
    #[prost(message, optional, tag = "4")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "6")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "7")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "8")]
    pub predefined_acl: i32,
    #[prost(enumeration = "common_enums::Projection", tag = "9")]
    pub projection: i32,
    #[prost(message, optional, tag = "11")]
    pub metadata: ::core::option::Option<Object>,
    #[prost(message, optional, tag = "12")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "13")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "14")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateObjectRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub generation: i64,
    #[prost(message, optional, tag = "4")]
    pub if_generation_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub if_generation_not_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "6")]
    pub if_metageneration_match: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "7")]
    pub if_metageneration_not_match: ::core::option::Option<i64>,
    #[prost(enumeration = "common_enums::PredefinedObjectAcl", tag = "8")]
    pub predefined_acl: i32,
    #[prost(enumeration = "common_enums::Projection", tag = "9")]
    pub projection: i32,
    #[prost(message, optional, tag = "11")]
    pub metadata: ::core::option::Option<Object>,
    #[prost(message, optional, tag = "12")]
    pub common_object_request_params: ::core::option::Option<CommonObjectRequestParams>,
    #[prost(message, optional, tag = "13")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchAllObjectsRequest {
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub versions: bool,
    #[prost(string, tag = "3")]
    pub delimiter: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub max_results: i32,
    #[prost(string, tag = "5")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub include_trailing_delimiter: bool,
    #[prost(string, tag = "7")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(enumeration = "common_enums::Projection", tag = "8")]
    pub projection: i32,
    #[prost(message, optional, tag = "10")]
    pub channel: ::core::option::Option<Channel>,
    #[prost(message, optional, tag = "11")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProjectServiceAccountRequest {
    #[prost(string, tag = "1")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateHmacKeyRequest {
    #[prost(string, tag = "1")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub service_account_email: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateHmacKeyResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<HmacKeyMetadata>,
    #[prost(string, tag = "2")]
    pub secret: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteHmacKeyRequest {
    #[prost(string, tag = "1")]
    pub access_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHmacKeyRequest {
    #[prost(string, tag = "1")]
    pub access_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListHmacKeysRequest {
    #[prost(string, tag = "1")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub service_account_email: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub show_deleted_keys: bool,
    #[prost(int32, tag = "4")]
    pub max_results: i32,
    #[prost(string, tag = "5")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListHmacKeysResponse {
    #[prost(string, tag = "1")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<HmacKeyMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHmacKeyRequest {
    #[prost(string, tag = "1")]
    pub access_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<HmacKeyMetadata>,
    #[prost(message, optional, tag = "5")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIamPolicyRequest {
    #[prost(message, optional, tag = "1")]
    pub iam_request: ::core::option::Option<super::super::iam::v1::GetIamPolicyRequest>,
    #[prost(message, optional, tag = "2")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetIamPolicyRequest {
    #[prost(message, optional, tag = "1")]
    pub iam_request: ::core::option::Option<super::super::iam::v1::SetIamPolicyRequest>,
    #[prost(message, optional, tag = "2")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestIamPermissionsRequest {
    #[prost(message, optional, tag = "1")]
    pub iam_request: ::core::option::Option<
        super::super::iam::v1::TestIamPermissionsRequest,
    >,
    #[prost(message, optional, tag = "2")]
    pub common_request_params: ::core::option::Option<CommonRequestParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonObjectRequestParams {
    #[prost(string, tag = "1")]
    pub encryption_algorithm: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub encryption_key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub encryption_key_sha256: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonRequestParams {
    #[prost(string, tag = "1")]
    pub user_project: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quota_user: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub fields: ::core::option::Option<::prost_types::FieldMask>,
}
