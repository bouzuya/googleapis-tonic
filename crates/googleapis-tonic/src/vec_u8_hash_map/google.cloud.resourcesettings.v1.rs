// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Setting {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "7")]
pub metadata: ::core::option::Option<SettingMetadata>,
#[prost(message, optional, tag = "8")]
pub local_value: ::core::option::Option<Value>,
#[prost(message, optional, tag = "9")]
pub effective_value: ::core::option::Option<Value>,
#[prost(string, tag = "10")]
pub etag: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SettingMetadata {
#[prost(string, tag = "1")]
pub display_name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub description: ::prost::alloc::string::String,
#[prost(bool, tag = "3")]
pub read_only: bool,
#[prost(enumeration = "setting_metadata::DataType", tag = "4")]
pub data_type: i32,
#[prost(message, optional, tag = "5")]
pub default_value: ::core::option::Option<Value>,
}
/// Nested message and enum types in `SettingMetadata`.
pub mod setting_metadata {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DataType {
Unspecified = 0,
Boolean = 1,
String = 2,
StringSet = 3,
EnumValue = 4,
}
impl DataType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
DataType::Unspecified => "DATA_TYPE_UNSPECIFIED",
DataType::Boolean => "BOOLEAN",
DataType::String => "STRING",
DataType::StringSet => "STRING_SET",
DataType::EnumValue => "ENUM_VALUE",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"DATA_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"BOOLEAN" => Some(Self::Boolean),
"STRING" => Some(Self::String),
"STRING_SET" => Some(Self::StringSet),
"ENUM_VALUE" => Some(Self::EnumValue),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Value {
#[prost(oneof = "value::Value", tags = "1, 2, 3, 4")]
pub value: ::core::option::Option<value::Value>,
}
/// Nested message and enum types in `Value`.
pub mod value {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringSet {
#[prost(string, repeated, tag = "1")]
pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnumValue {
#[prost(string, tag = "1")]
pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Value {
#[prost(bool, tag = "1")]
BooleanValue(bool),
#[prost(string, tag = "2")]
StringValue(::prost::alloc::string::String),
#[prost(message, tag = "3")]
StringSetValue(StringSet),
#[prost(message, tag = "4")]
EnumValue(EnumValue),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSettingsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(enumeration = "SettingView", tag = "4")]
pub view: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSettingsResponse {
#[prost(message, repeated, tag = "1")]
pub settings: ::prost::alloc::vec::Vec<Setting>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSettingRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(enumeration = "SettingView", tag = "2")]
pub view: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSettingRequest {
#[prost(message, optional, tag = "1")]
pub setting: ::core::option::Option<Setting>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SettingView {
Unspecified = 0,
Basic = 1,
EffectiveValue = 2,
LocalValue = 3,
}
impl SettingView {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
SettingView::Unspecified => "SETTING_VIEW_UNSPECIFIED",
SettingView::Basic => "SETTING_VIEW_BASIC",
SettingView::EffectiveValue => "SETTING_VIEW_EFFECTIVE_VALUE",
SettingView::LocalValue => "SETTING_VIEW_LOCAL_VALUE",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"SETTING_VIEW_UNSPECIFIED" => Some(Self::Unspecified),
"SETTING_VIEW_BASIC" => Some(Self::Basic),
"SETTING_VIEW_EFFECTIVE_VALUE" => Some(Self::EffectiveValue),
"SETTING_VIEW_LOCAL_VALUE" => Some(Self::LocalValue),
_ => None,
}
}
}
/// Generated client implementations.
pub mod resource_settings_service_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// An interface to interact with resource settings and setting values throughout
/// the resource hierarchy.
///
/// Services may surface a number of settings for users to control how their
/// resources behave. Values of settings applied on a given Cloud resource are
/// evaluated hierarchically and inherited by all descendants of that resource.
///
/// For all requests, returns a `google.rpc.Status` with
/// `google.rpc.Code.PERMISSION_DENIED` if the IAM check fails or the `parent`
/// resource is not in a Cloud Organization.
/// For all requests, returns a `google.rpc.Status` with
/// `google.rpc.Code.INVALID_ARGUMENT` if the request is malformed.
/// (== deprecation_description Resource Settings is deprecated. As of November
/// 7, 2023, no organizations will be onboarded for any of the enabled settings,
/// and the service will be shut down on October 1, 2024. ==)
#[derive(Debug, Clone)]
pub struct ResourceSettingsServiceClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> ResourceSettingsServiceClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> ResourceSettingsServiceClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
ResourceSettingsServiceClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Lists all the settings that are available on the Cloud resource `parent`.
pub async fn list_settings(&mut self, request: impl tonic::IntoRequest<super::ListSettingsRequest>) -> std::result::Result<tonic::Response<super::ListSettingsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.resourcesettings.v1.ResourceSettingsService/ListSettings");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.resourcesettings.v1.ResourceSettingsService", "ListSettings"));
self.inner.unary(req, path, codec).await
}
/// Gets a setting.
///
/// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
/// setting does not exist.
pub async fn get_setting(&mut self, request: impl tonic::IntoRequest<super::GetSettingRequest>) -> std::result::Result<tonic::Response<super::Setting>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.resourcesettings.v1.ResourceSettingsService/GetSetting");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.resourcesettings.v1.ResourceSettingsService", "GetSetting"));
self.inner.unary(req, path, codec).await
}
/// Updates a setting.
///
/// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
/// setting does not exist.
/// Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if
/// the setting is flagged as read only.
/// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
/// supplied in the request does not match the persisted etag of the setting
/// value.
///
/// On success, the response will contain only `name`, `local_value` and
/// `etag`.  The `metadata` and `effective_value` cannot be updated through
/// this API.
///
/// Note: the supplied setting will perform a full overwrite of the
/// `local_value` field.
pub async fn update_setting(&mut self, request: impl tonic::IntoRequest<super::UpdateSettingRequest>) -> std::result::Result<tonic::Response<super::Setting>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.resourcesettings.v1.ResourceSettingsService/UpdateSetting");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.resourcesettings.v1.ResourceSettingsService", "UpdateSetting"));
self.inner.unary(req, path, codec).await
}
}
}
