// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Policy {
#[prost(int32, tag = "1")]
pub version: i32,
#[prost(string, tag = "2")]
pub constraint: ::prost::alloc::string::String,
#[prost(bytes = "vec", tag = "3")]
pub etag: ::prost::alloc::vec::Vec<u8>,
#[prost(message, optional, tag = "4")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(oneof = "policy::PolicyType", tags = "5, 6, 7")]
pub policy_type: ::core::option::Option<policy::PolicyType>,
}
/// Nested message and enum types in `Policy`.
pub mod policy {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPolicy {
#[prost(string, repeated, tag = "1")]
pub allowed_values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, repeated, tag = "2")]
pub denied_values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(enumeration = "list_policy::AllValues", tag = "3")]
pub all_values: i32,
#[prost(string, tag = "4")]
pub suggested_value: ::prost::alloc::string::String,
#[prost(bool, tag = "5")]
pub inherit_from_parent: bool,
}
/// Nested message and enum types in `ListPolicy`.
pub mod list_policy {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AllValues {
Unspecified = 0,
Allow = 1,
Deny = 2,
}
impl AllValues {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
AllValues::Unspecified => "ALL_VALUES_UNSPECIFIED",
AllValues::Allow => "ALLOW",
AllValues::Deny => "DENY",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"ALL_VALUES_UNSPECIFIED" => Some(Self::Unspecified),
"ALLOW" => Some(Self::Allow),
"DENY" => Some(Self::Deny),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BooleanPolicy {
#[prost(bool, tag = "1")]
pub enforced: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RestoreDefault {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum PolicyType {
#[prost(message, tag = "5")]
ListPolicy(ListPolicy),
#[prost(message, tag = "6")]
BooleanPolicy(BooleanPolicy),
#[prost(message, tag = "7")]
RestoreDefault(RestoreDefault),
}
}
