// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConversionSource {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "conversion_source::State", tag = "5")]
    pub state: i32,
    #[prost(message, optional, tag = "6")]
    pub expire_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(enumeration = "conversion_source::Controller", tag = "7")]
    pub controller: i32,
    #[prost(oneof = "conversion_source::SourceData", tags = "3, 4")]
    pub source_data: ::core::option::Option<conversion_source::SourceData>,
}
/// Nested message and enum types in `ConversionSource`.
pub mod conversion_source {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Active = 1,
        Archived = 2,
        Pending = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Active => "ACTIVE",
                State::Archived => "ARCHIVED",
                State::Pending => "PENDING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "ARCHIVED" => Some(Self::Archived),
                "PENDING" => Some(Self::Pending),
                _ => None,
            }
        }
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Controller {
        Unspecified = 0,
        Merchant = 1,
        YoutubeAffiliates = 2,
    }
    impl Controller {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Controller::Unspecified => "CONTROLLER_UNSPECIFIED",
                Controller::Merchant => "MERCHANT",
                Controller::YoutubeAffiliates => "YOUTUBE_AFFILIATES",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CONTROLLER_UNSPECIFIED" => Some(Self::Unspecified),
                "MERCHANT" => Some(Self::Merchant),
                "YOUTUBE_AFFILIATES" => Some(Self::YoutubeAffiliates),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum SourceData {
        #[prost(message, tag = "3")]
        GoogleAnalyticsLink(super::GoogleAnalyticsLink),
        #[prost(message, tag = "4")]
        MerchantCenterDestination(super::MerchantCenterDestination),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttributionSettings {
    #[prost(int32, tag = "1")]
    pub attribution_lookback_window_days: i32,
    #[prost(enumeration = "attribution_settings::AttributionModel", tag = "2")]
    pub attribution_model: i32,
    #[prost(message, repeated, tag = "3")]
    pub conversion_type: ::prost::alloc::vec::Vec<attribution_settings::ConversionType>,
}
/// Nested message and enum types in `AttributionSettings`.
pub mod attribution_settings {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ConversionType {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(bool, tag = "2")]
        pub report: bool,
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum AttributionModel {
        Unspecified = 0,
        CrossChannelLastClick = 1,
        AdsPreferredLastClick = 2,
        CrossChannelDataDriven = 5,
        CrossChannelFirstClick = 6,
        CrossChannelLinear = 7,
        CrossChannelPositionBased = 8,
        CrossChannelTimeDecay = 9,
    }
    impl AttributionModel {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                AttributionModel::Unspecified => "ATTRIBUTION_MODEL_UNSPECIFIED",
                AttributionModel::CrossChannelLastClick => "CROSS_CHANNEL_LAST_CLICK",
                AttributionModel::AdsPreferredLastClick => "ADS_PREFERRED_LAST_CLICK",
                AttributionModel::CrossChannelDataDriven => "CROSS_CHANNEL_DATA_DRIVEN",
                AttributionModel::CrossChannelFirstClick => "CROSS_CHANNEL_FIRST_CLICK",
                AttributionModel::CrossChannelLinear => "CROSS_CHANNEL_LINEAR",
                AttributionModel::CrossChannelPositionBased => "CROSS_CHANNEL_POSITION_BASED",
                AttributionModel::CrossChannelTimeDecay => "CROSS_CHANNEL_TIME_DECAY",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ATTRIBUTION_MODEL_UNSPECIFIED" => Some(Self::Unspecified),
                "CROSS_CHANNEL_LAST_CLICK" => Some(Self::CrossChannelLastClick),
                "ADS_PREFERRED_LAST_CLICK" => Some(Self::AdsPreferredLastClick),
                "CROSS_CHANNEL_DATA_DRIVEN" => Some(Self::CrossChannelDataDriven),
                "CROSS_CHANNEL_FIRST_CLICK" => Some(Self::CrossChannelFirstClick),
                "CROSS_CHANNEL_LINEAR" => Some(Self::CrossChannelLinear),
                "CROSS_CHANNEL_POSITION_BASED" => Some(Self::CrossChannelPositionBased),
                "CROSS_CHANNEL_TIME_DECAY" => Some(Self::CrossChannelTimeDecay),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GoogleAnalyticsLink {
    #[prost(int64, tag = "1")]
    pub property_id: i64,
    #[prost(message, optional, tag = "2")]
    pub attribution_settings: ::core::option::Option<AttributionSettings>,
    #[prost(string, tag = "3")]
    pub property: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MerchantCenterDestination {
    #[prost(string, tag = "1")]
    pub destination: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub attribution_settings: ::core::option::Option<AttributionSettings>,
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub currency_code: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConversionSourceRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub conversion_source: ::core::option::Option<ConversionSource>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConversionSourceRequest {
    #[prost(message, optional, tag = "1")]
    pub conversion_source: ::core::option::Option<ConversionSource>,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteConversionSourceRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UndeleteConversionSourceRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversionSourceRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConversionSourcesRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub show_deleted: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConversionSourcesResponse {
    #[prost(message, repeated, tag = "1")]
    pub conversion_sources: ::prost::alloc::vec::Vec<ConversionSource>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod conversion_sources_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Service for managing conversion sources for a merchant account.
    #[derive(Debug, Clone)]
    pub struct ConversionSourcesServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ConversionSourcesServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ConversionSourcesServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            ConversionSourcesServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Creates a new conversion source.
        pub async fn create_conversion_source(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateConversionSourceRequest>,
        ) -> std::result::Result<tonic::Response<super::ConversionSource>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/google.shopping.merchant.conversions.v1beta.ConversionSourcesService/CreateConversionSource");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.shopping.merchant.conversions.v1beta.ConversionSourcesService",
                "CreateConversionSource",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Updates information of an existing conversion source. Available only for
        /// Merchant Center Destination conversion sources.
        pub async fn update_conversion_source(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateConversionSourceRequest>,
        ) -> std::result::Result<tonic::Response<super::ConversionSource>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/google.shopping.merchant.conversions.v1beta.ConversionSourcesService/UpdateConversionSource");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.shopping.merchant.conversions.v1beta.ConversionSourcesService",
                "UpdateConversionSource",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Archives an existing conversion source. If the conversion source is a
        /// Merchant Center Destination, it will be recoverable for 30 days. If the
        /// conversion source is a Google Analytics Link, it will be deleted
        /// immediately and can be restored by creating a new one.
        pub async fn delete_conversion_source(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteConversionSourceRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/google.shopping.merchant.conversions.v1beta.ConversionSourcesService/DeleteConversionSource");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.shopping.merchant.conversions.v1beta.ConversionSourcesService",
                "DeleteConversionSource",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Re-enables an archived conversion source. Only Available for Merchant
        /// Center Destination conversion sources.
        pub async fn undelete_conversion_source(
            &mut self,
            request: impl tonic::IntoRequest<super::UndeleteConversionSourceRequest>,
        ) -> std::result::Result<tonic::Response<super::ConversionSource>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/google.shopping.merchant.conversions.v1beta.ConversionSourcesService/UndeleteConversionSource");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.shopping.merchant.conversions.v1beta.ConversionSourcesService",
                "UndeleteConversionSource",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Fetches a conversion source.
        pub async fn get_conversion_source(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversionSourceRequest>,
        ) -> std::result::Result<tonic::Response<super::ConversionSource>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/google.shopping.merchant.conversions.v1beta.ConversionSourcesService/GetConversionSource");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.shopping.merchant.conversions.v1beta.ConversionSourcesService",
                "GetConversionSource",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves the list of conversion sources the caller has access to.
        pub async fn list_conversion_sources(
            &mut self,
            request: impl tonic::IntoRequest<super::ListConversionSourcesRequest>,
        ) -> std::result::Result<tonic::Response<super::ListConversionSourcesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/google.shopping.merchant.conversions.v1beta.ConversionSourcesService/ListConversionSources");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.shopping.merchant.conversions.v1beta.ConversionSourcesService",
                "ListConversionSources",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
