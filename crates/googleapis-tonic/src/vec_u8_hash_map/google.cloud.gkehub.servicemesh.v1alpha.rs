// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureState {
#[prost(message, repeated, tag = "1")]
pub analysis_messages: ::prost::alloc::vec::Vec<AnalysisMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipState {
#[prost(message, repeated, tag = "1")]
pub analysis_messages: ::prost::alloc::vec::Vec<AnalysisMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalysisMessageBase {
#[prost(message, optional, tag = "1")]
pub r#type: ::core::option::Option<analysis_message_base::Type>,
#[prost(enumeration = "analysis_message_base::Level", tag = "2")]
pub level: i32,
#[prost(string, tag = "3")]
pub documentation_url: ::prost::alloc::string::String,
}
/// Nested message and enum types in `AnalysisMessageBase`.
pub mod analysis_message_base {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Type {
#[prost(string, tag = "1")]
pub display_name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub code: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Level {
Unspecified = 0,
Error = 3,
Warning = 8,
Info = 12,
}
impl Level {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Level::Unspecified => "LEVEL_UNSPECIFIED",
Level::Error => "ERROR",
Level::Warning => "WARNING",
Level::Info => "INFO",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"LEVEL_UNSPECIFIED" => Some(Self::Unspecified),
"ERROR" => Some(Self::Error),
"WARNING" => Some(Self::Warning),
"INFO" => Some(Self::Info),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalysisMessage {
#[prost(message, optional, tag = "1")]
pub message_base: ::core::option::Option<AnalysisMessageBase>,
#[prost(string, tag = "2")]
pub description: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub resource_paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(message, optional, tag = "4")]
pub args: ::core::option::Option<::prost_types::Struct>,
}
