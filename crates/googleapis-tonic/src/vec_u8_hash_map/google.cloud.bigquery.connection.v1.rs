// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConnectionRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub connection_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub connection: ::core::option::Option<Connection>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConnectionRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "4")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsResponse {
#[prost(string, tag = "1")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(message, repeated, tag = "2")]
pub connections: ::prost::alloc::vec::Vec<Connection>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConnectionRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub connection: ::core::option::Option<Connection>,
#[prost(message, optional, tag = "3")]
pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteConnectionRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connection {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub friendly_name: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub description: ::prost::alloc::string::String,
#[prost(int64, tag = "5")]
pub creation_time: i64,
#[prost(int64, tag = "6")]
pub last_modified_time: i64,
#[prost(bool, tag = "7")]
pub has_credential: bool,
#[prost(oneof = "connection::Properties", tags = "4, 8, 11, 21, 22, 23, 24")]
pub properties: ::core::option::Option<connection::Properties>,
}
/// Nested message and enum types in `Connection`.
pub mod connection {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Properties {
#[prost(message, tag = "4")]
CloudSql(super::CloudSqlProperties),
#[prost(message, tag = "8")]
Aws(super::AwsProperties),
#[prost(message, tag = "11")]
Azure(super::AzureProperties),
#[prost(message, tag = "21")]
CloudSpanner(super::CloudSpannerProperties),
#[prost(message, tag = "22")]
CloudResource(super::CloudResourceProperties),
#[prost(message, tag = "23")]
Spark(super::SparkProperties),
#[prost(message, tag = "24")]
SalesforceDataCloud(super::SalesforceDataCloudProperties),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudSqlProperties {
#[prost(string, tag = "1")]
pub instance_id: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub database: ::prost::alloc::string::String,
#[prost(enumeration = "cloud_sql_properties::DatabaseType", tag = "3")]
pub r#type: i32,
#[prost(message, optional, tag = "4")]
pub credential: ::core::option::Option<CloudSqlCredential>,
#[prost(string, tag = "5")]
pub service_account_id: ::prost::alloc::string::String,
}
/// Nested message and enum types in `CloudSqlProperties`.
pub mod cloud_sql_properties {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DatabaseType {
Unspecified = 0,
Postgres = 1,
Mysql = 2,
}
impl DatabaseType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
DatabaseType::Unspecified => "DATABASE_TYPE_UNSPECIFIED",
DatabaseType::Postgres => "POSTGRES",
DatabaseType::Mysql => "MYSQL",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"DATABASE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"POSTGRES" => Some(Self::Postgres),
"MYSQL" => Some(Self::Mysql),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudSqlCredential {
#[prost(string, tag = "1")]
pub username: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub password: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudSpannerProperties {
#[prost(string, tag = "1")]
pub database: ::prost::alloc::string::String,
#[prost(bool, tag = "2")]
pub use_parallelism: bool,
#[prost(int32, tag = "5")]
pub max_parallelism: i32,
#[prost(bool, tag = "3")]
pub use_serverless_analytics: bool,
#[prost(bool, tag = "6")]
pub use_data_boost: bool,
#[prost(string, tag = "4")]
pub database_role: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AwsProperties {
#[prost(oneof = "aws_properties::AuthenticationMethod", tags = "2, 3")]
pub authentication_method: ::core::option::Option<aws_properties::AuthenticationMethod>,
}
/// Nested message and enum types in `AwsProperties`.
pub mod aws_properties {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum AuthenticationMethod {
#[prost(message, tag = "2")]
CrossAccountRole(super::AwsCrossAccountRole),
#[prost(message, tag = "3")]
AccessRole(super::AwsAccessRole),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AwsCrossAccountRole {
#[prost(string, tag = "1")]
pub iam_role_id: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub iam_user_id: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub external_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AwsAccessRole {
#[prost(string, tag = "1")]
pub iam_role_id: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub identity: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AzureProperties {
#[prost(string, tag = "1")]
pub application: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub client_id: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub object_id: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub customer_tenant_id: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub redirect_uri: ::prost::alloc::string::String,
#[prost(string, tag = "6")]
pub federated_application_client_id: ::prost::alloc::string::String,
#[prost(string, tag = "7")]
pub identity: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudResourceProperties {
#[prost(string, tag = "1")]
pub service_account_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetastoreServiceConfig {
#[prost(string, tag = "1")]
pub metastore_service: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SparkHistoryServerConfig {
#[prost(string, tag = "1")]
pub dataproc_cluster: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SparkProperties {
#[prost(string, tag = "1")]
pub service_account_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub metastore_service_config: ::core::option::Option<MetastoreServiceConfig>,
#[prost(message, optional, tag = "4")]
pub spark_history_server_config: ::core::option::Option<SparkHistoryServerConfig>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SalesforceDataCloudProperties {
#[prost(string, tag = "1")]
pub instance_uri: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub identity: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub tenant_id: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod connection_service_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// Manages external data source connections and credentials.
#[derive(Debug, Clone)]
pub struct ConnectionServiceClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> ConnectionServiceClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> ConnectionServiceClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
ConnectionServiceClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Creates a new connection.
pub async fn create_connection(&mut self, request: impl tonic::IntoRequest<super::CreateConnectionRequest>) -> std::result::Result<tonic::Response<super::Connection>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/CreateConnection");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "CreateConnection"));
self.inner.unary(req, path, codec).await
}
/// Returns specified connection.
pub async fn get_connection(&mut self, request: impl tonic::IntoRequest<super::GetConnectionRequest>) -> std::result::Result<tonic::Response<super::Connection>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/GetConnection");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "GetConnection"));
self.inner.unary(req, path, codec).await
}
/// Returns a list of connections in the given project.
pub async fn list_connections(&mut self, request: impl tonic::IntoRequest<super::ListConnectionsRequest>) -> std::result::Result<tonic::Response<super::ListConnectionsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/ListConnections");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "ListConnections"));
self.inner.unary(req, path, codec).await
}
/// Updates the specified connection. For security reasons, also resets
/// credential if connection properties are in the update field mask.
pub async fn update_connection(&mut self, request: impl tonic::IntoRequest<super::UpdateConnectionRequest>) -> std::result::Result<tonic::Response<super::Connection>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/UpdateConnection");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "UpdateConnection"));
self.inner.unary(req, path, codec).await
}
/// Deletes connection and associated credential.
pub async fn delete_connection(&mut self, request: impl tonic::IntoRequest<super::DeleteConnectionRequest>) -> std::result::Result<tonic::Response<()>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/DeleteConnection");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "DeleteConnection"));
self.inner.unary(req, path, codec).await
}
/// Gets the access control policy for a resource.
/// Returns an empty policy if the resource exists and does not have a policy
/// set.
pub async fn get_iam_policy(&mut self, request: impl tonic::IntoRequest<super::super::super::super::super::iam::v1::GetIamPolicyRequest>) -> std::result::Result<tonic::Response<super::super::super::super::super::iam::v1::Policy>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/GetIamPolicy");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "GetIamPolicy"));
self.inner.unary(req, path, codec).await
}
/// Sets the access control policy on the specified resource. Replaces any
/// existing policy.
///
/// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
pub async fn set_iam_policy(&mut self, request: impl tonic::IntoRequest<super::super::super::super::super::iam::v1::SetIamPolicyRequest>) -> std::result::Result<tonic::Response<super::super::super::super::super::iam::v1::Policy>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/SetIamPolicy");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "SetIamPolicy"));
self.inner.unary(req, path, codec).await
}
/// Returns permissions that a caller has on the specified resource.
/// If the resource does not exist, this will return an empty set of
/// permissions, not a `NOT_FOUND` error.
///
/// Note: This operation is designed to be used for building permission-aware
/// UIs and command-line tools, not for authorization checking. This operation
/// may "fail open" without warning.
pub async fn test_iam_permissions(&mut self, request: impl tonic::IntoRequest<super::super::super::super::super::iam::v1::TestIamPermissionsRequest>) -> std::result::Result<tonic::Response<super::super::super::super::super::iam::v1::TestIamPermissionsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.bigquery.connection.v1.ConnectionService/TestIamPermissions");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.bigquery.connection.v1.ConnectionService", "TestIamPermissions"));
self.inner.unary(req, path, codec).await
}
}
}
