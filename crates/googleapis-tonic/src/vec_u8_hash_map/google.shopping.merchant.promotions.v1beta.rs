// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Attributes {
    #[prost(enumeration = "ProductApplicability", tag = "1")]
    pub product_applicability: i32,
    #[prost(enumeration = "OfferType", tag = "2")]
    pub offer_type: i32,
    #[prost(string, tag = "3")]
    pub generic_redemption_code: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub long_title: ::prost::alloc::string::String,
    #[prost(enumeration = "CouponValueType", tag = "5")]
    pub coupon_value_type: i32,
    #[prost(
        enumeration = "super::super::super::r#type::destination::DestinationEnum",
        repeated,
        packed = "false",
        tag = "6"
    )]
    pub promotion_destinations: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "7")]
    pub item_id_inclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "8")]
    pub brand_inclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "9")]
    pub item_group_id_inclusion: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, repeated, tag = "10")]
    pub product_type_inclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "11")]
    pub item_id_exclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "12")]
    pub brand_exclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "13")]
    pub item_group_id_exclusion: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, repeated, tag = "14")]
    pub product_type_exclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "15")]
    pub minimum_purchase_amount: ::core::option::Option<
        super::super::super::r#type::Price,
    >,
    #[prost(int64, tag = "16")]
    pub minimum_purchase_quantity: i64,
    #[prost(int64, tag = "17")]
    pub limit_quantity: i64,
    #[prost(message, optional, tag = "18")]
    pub limit_value: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(int64, tag = "19")]
    pub percent_off: i64,
    #[prost(message, optional, tag = "20")]
    pub money_off_amount: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(int64, tag = "21")]
    pub get_this_quantity_discounted: i64,
    #[prost(message, optional, tag = "22")]
    pub free_gift_value: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(string, tag = "23")]
    pub free_gift_description: ::prost::alloc::string::String,
    #[prost(string, tag = "24")]
    pub free_gift_item_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "25")]
    pub promotion_effective_time_period: ::core::option::Option<
        super::super::super::super::r#type::Interval,
    >,
    #[prost(message, optional, tag = "26")]
    pub promotion_display_time_period: ::core::option::Option<
        super::super::super::super::r#type::Interval,
    >,
    #[prost(enumeration = "StoreApplicability", tag = "28")]
    pub store_applicability: i32,
    #[prost(string, repeated, tag = "29")]
    pub store_codes_inclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "30")]
    pub store_codes_exclusion: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "31")]
    pub promotion_url: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromotionStatus {
    #[prost(message, repeated, tag = "1")]
    pub destination_statuses: ::prost::alloc::vec::Vec<
        promotion_status::DestinationStatus,
    >,
    #[prost(message, repeated, tag = "2")]
    pub item_level_issues: ::prost::alloc::vec::Vec<promotion_status::ItemLevelIssue>,
    #[prost(message, optional, tag = "3")]
    pub creation_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "4")]
    pub last_update_date: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `PromotionStatus`.
pub mod promotion_status {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct DestinationStatus {
        #[prost(
            enumeration = "super::super::super::super::r#type::reporting_context::ReportingContextEnum",
            tag = "1"
        )]
        pub reporting_context: i32,
        #[prost(enumeration = "destination_status::State", tag = "2")]
        pub status: i32,
    }
    /// Nested message and enum types in `DestinationStatus`.
    pub mod destination_status {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum State {
            Unspecified = 0,
            InReview = 1,
            Rejected = 2,
            Live = 3,
            Stopped = 4,
            Expired = 5,
            Pending = 6,
        }
        impl State {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    State::Unspecified => "STATE_UNSPECIFIED",
                    State::InReview => "IN_REVIEW",
                    State::Rejected => "REJECTED",
                    State::Live => "LIVE",
                    State::Stopped => "STOPPED",
                    State::Expired => "EXPIRED",
                    State::Pending => "PENDING",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                    "IN_REVIEW" => Some(Self::InReview),
                    "REJECTED" => Some(Self::Rejected),
                    "LIVE" => Some(Self::Live),
                    "STOPPED" => Some(Self::Stopped),
                    "EXPIRED" => Some(Self::Expired),
                    "PENDING" => Some(Self::Pending),
                    _ => None,
                }
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ItemLevelIssue {
        #[prost(string, tag = "1")]
        pub code: ::prost::alloc::string::String,
        #[prost(enumeration = "item_level_issue::Severity", tag = "2")]
        pub severity: i32,
        #[prost(string, tag = "3")]
        pub resolution: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub attribute: ::prost::alloc::string::String,
        #[prost(
            enumeration = "super::super::super::super::r#type::reporting_context::ReportingContextEnum",
            tag = "5"
        )]
        pub reporting_context: i32,
        #[prost(string, tag = "6")]
        pub description: ::prost::alloc::string::String,
        #[prost(string, tag = "7")]
        pub detail: ::prost::alloc::string::String,
        #[prost(string, tag = "8")]
        pub documentation: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "9")]
        pub applicable_countries: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
    }
    /// Nested message and enum types in `ItemLevelIssue`.
    pub mod item_level_issue {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Severity {
            Unspecified = 0,
            NotImpacted = 1,
            Demoted = 2,
            Disapproved = 3,
        }
        impl Severity {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Severity::Unspecified => "SEVERITY_UNSPECIFIED",
                    Severity::NotImpacted => "NOT_IMPACTED",
                    Severity::Demoted => "DEMOTED",
                    Severity::Disapproved => "DISAPPROVED",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "SEVERITY_UNSPECIFIED" => Some(Self::Unspecified),
                    "NOT_IMPACTED" => Some(Self::NotImpacted),
                    "DEMOTED" => Some(Self::Demoted),
                    "DISAPPROVED" => Some(Self::Disapproved),
                    _ => None,
                }
            }
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProductApplicability {
    Unspecified = 0,
    AllProducts = 1,
    SpecificProducts = 2,
}
impl ProductApplicability {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ProductApplicability::Unspecified => "PRODUCT_APPLICABILITY_UNSPECIFIED",
            ProductApplicability::AllProducts => "ALL_PRODUCTS",
            ProductApplicability::SpecificProducts => "SPECIFIC_PRODUCTS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_APPLICABILITY_UNSPECIFIED" => Some(Self::Unspecified),
            "ALL_PRODUCTS" => Some(Self::AllProducts),
            "SPECIFIC_PRODUCTS" => Some(Self::SpecificProducts),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StoreApplicability {
    Unspecified = 0,
    AllStores = 1,
    SpecificStores = 2,
}
impl StoreApplicability {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StoreApplicability::Unspecified => "STORE_APPLICABILITY_UNSPECIFIED",
            StoreApplicability::AllStores => "ALL_STORES",
            StoreApplicability::SpecificStores => "SPECIFIC_STORES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STORE_APPLICABILITY_UNSPECIFIED" => Some(Self::Unspecified),
            "ALL_STORES" => Some(Self::AllStores),
            "SPECIFIC_STORES" => Some(Self::SpecificStores),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OfferType {
    Unspecified = 0,
    NoCode = 1,
    GenericCode = 2,
}
impl OfferType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OfferType::Unspecified => "OFFER_TYPE_UNSPECIFIED",
            OfferType::NoCode => "NO_CODE",
            OfferType::GenericCode => "GENERIC_CODE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OFFER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "NO_CODE" => Some(Self::NoCode),
            "GENERIC_CODE" => Some(Self::GenericCode),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RedemptionChannel {
    Unspecified = 0,
    InStore = 1,
    Online = 2,
}
impl RedemptionChannel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RedemptionChannel::Unspecified => "REDEMPTION_CHANNEL_UNSPECIFIED",
            RedemptionChannel::InStore => "IN_STORE",
            RedemptionChannel::Online => "ONLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REDEMPTION_CHANNEL_UNSPECIFIED" => Some(Self::Unspecified),
            "IN_STORE" => Some(Self::InStore),
            "ONLINE" => Some(Self::Online),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CouponValueType {
    Unspecified = 0,
    MoneyOff = 1,
    PercentOff = 2,
    BuyMGetNMoneyOff = 3,
    BuyMGetNPercentOff = 4,
    BuyMGetMoneyOff = 5,
    BuyMGetPercentOff = 6,
    FreeGift = 7,
    FreeGiftWithValue = 8,
    FreeGiftWithItemId = 9,
    FreeShippingStandard = 10,
    FreeShippingOvernight = 11,
    FreeShippingTwoDay = 12,
}
impl CouponValueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CouponValueType::Unspecified => "COUPON_VALUE_TYPE_UNSPECIFIED",
            CouponValueType::MoneyOff => "MONEY_OFF",
            CouponValueType::PercentOff => "PERCENT_OFF",
            CouponValueType::BuyMGetNMoneyOff => "BUY_M_GET_N_MONEY_OFF",
            CouponValueType::BuyMGetNPercentOff => "BUY_M_GET_N_PERCENT_OFF",
            CouponValueType::BuyMGetMoneyOff => "BUY_M_GET_MONEY_OFF",
            CouponValueType::BuyMGetPercentOff => "BUY_M_GET_PERCENT_OFF",
            CouponValueType::FreeGift => "FREE_GIFT",
            CouponValueType::FreeGiftWithValue => "FREE_GIFT_WITH_VALUE",
            CouponValueType::FreeGiftWithItemId => "FREE_GIFT_WITH_ITEM_ID",
            CouponValueType::FreeShippingStandard => "FREE_SHIPPING_STANDARD",
            CouponValueType::FreeShippingOvernight => "FREE_SHIPPING_OVERNIGHT",
            CouponValueType::FreeShippingTwoDay => "FREE_SHIPPING_TWO_DAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COUPON_VALUE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "MONEY_OFF" => Some(Self::MoneyOff),
            "PERCENT_OFF" => Some(Self::PercentOff),
            "BUY_M_GET_N_MONEY_OFF" => Some(Self::BuyMGetNMoneyOff),
            "BUY_M_GET_N_PERCENT_OFF" => Some(Self::BuyMGetNPercentOff),
            "BUY_M_GET_MONEY_OFF" => Some(Self::BuyMGetMoneyOff),
            "BUY_M_GET_PERCENT_OFF" => Some(Self::BuyMGetPercentOff),
            "FREE_GIFT" => Some(Self::FreeGift),
            "FREE_GIFT_WITH_VALUE" => Some(Self::FreeGiftWithValue),
            "FREE_GIFT_WITH_ITEM_ID" => Some(Self::FreeGiftWithItemId),
            "FREE_SHIPPING_STANDARD" => Some(Self::FreeShippingStandard),
            "FREE_SHIPPING_OVERNIGHT" => Some(Self::FreeShippingOvernight),
            "FREE_SHIPPING_TWO_DAY" => Some(Self::FreeShippingTwoDay),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Promotion {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub promotion_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub content_language: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub target_country: ::prost::alloc::string::String,
    #[prost(enumeration = "RedemptionChannel", repeated, packed = "false", tag = "5")]
    pub redemption_channel: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, tag = "6")]
    pub data_source: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub attributes: ::core::option::Option<Attributes>,
    #[prost(message, repeated, tag = "8")]
    pub custom_attributes: ::prost::alloc::vec::Vec<
        super::super::super::r#type::CustomAttribute,
    >,
    #[prost(message, optional, tag = "9")]
    pub promotion_status: ::core::option::Option<PromotionStatus>,
    #[prost(int64, optional, tag = "10")]
    pub version_number: ::core::option::Option<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertPromotionRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub promotion: ::core::option::Option<Promotion>,
    #[prost(string, tag = "3")]
    pub data_source: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPromotionRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPromotionsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPromotionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub promotions: ::prost::alloc::vec::Vec<Promotion>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod promotions_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service to manage promotions for products.
    #[derive(Debug, Clone)]
    pub struct PromotionsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> PromotionsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PromotionsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            PromotionsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Inserts a promotion for your Merchant Center account. If the promotion
        /// already exists, then it updates the promotion instead.
        pub async fn insert_promotion(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertPromotionRequest>,
        ) -> std::result::Result<tonic::Response<super::Promotion>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.shopping.merchant.promotions.v1beta.PromotionsService/InsertPromotion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.shopping.merchant.promotions.v1beta.PromotionsService",
                        "InsertPromotion",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves the promotion from your Merchant Center account.
        ///
        /// After inserting or updating a promotion input, it may take several
        /// minutes before the updated promotion can be retrieved.
        pub async fn get_promotion(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPromotionRequest>,
        ) -> std::result::Result<tonic::Response<super::Promotion>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.shopping.merchant.promotions.v1beta.PromotionsService/GetPromotion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.shopping.merchant.promotions.v1beta.PromotionsService",
                        "GetPromotion",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists the promotions in your Merchant Center account. The
        /// response might contain fewer items than specified by `pageSize`. Rely on
        /// `pageToken` to determine if there are more items to be requested.
        ///
        /// After inserting or updating a promotion, it may take several minutes before
        /// the updated processed promotion can be retrieved.
        pub async fn list_promotions(
            &mut self,
            request: impl tonic::IntoRequest<super::ListPromotionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListPromotionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.shopping.merchant.promotions.v1beta.PromotionsService/ListPromotions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.shopping.merchant.promotions.v1beta.PromotionsService",
                        "ListPromotions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
