// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Attributes {
    #[prost(bool, optional, tag = "4")]
    pub identifier_exists: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_bundle: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "6")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub link: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub mobile_link: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub canonical_link: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub image_link: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "12")]
    pub additional_image_links: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "16")]
    pub expiration_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "79")]
    pub disclosure_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(bool, optional, tag = "17")]
    pub adult: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "18")]
    pub age_group: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "19")]
    pub availability: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "20")]
    pub availability_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, optional, tag = "21")]
    pub brand: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub color: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "23")]
    pub condition: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "24")]
    pub gender: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "25")]
    pub google_product_category: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "26")]
    pub gtin: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "27")]
    pub item_group_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "28")]
    pub material: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "29")]
    pub mpn: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "30")]
    pub pattern: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "31")]
    pub price: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(message, optional, tag = "32")]
    pub installment: ::core::option::Option<Installment>,
    #[prost(message, optional, tag = "33")]
    pub subscription_cost: ::core::option::Option<SubscriptionCost>,
    #[prost(message, optional, tag = "34")]
    pub loyalty_points: ::core::option::Option<LoyaltyPoints>,
    #[prost(message, repeated, tag = "136")]
    pub loyalty_programs: ::prost::alloc::vec::Vec<LoyaltyProgram>,
    #[prost(string, repeated, tag = "35")]
    pub product_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "36")]
    pub sale_price: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(message, optional, tag = "37")]
    pub sale_price_effective_date: ::core::option::Option<
        super::super::super::super::r#type::Interval,
    >,
    #[prost(int64, optional, tag = "38")]
    pub sell_on_google_quantity: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "119")]
    pub product_height: ::core::option::Option<ProductDimension>,
    #[prost(message, optional, tag = "120")]
    pub product_length: ::core::option::Option<ProductDimension>,
    #[prost(message, optional, tag = "121")]
    pub product_width: ::core::option::Option<ProductDimension>,
    #[prost(message, optional, tag = "122")]
    pub product_weight: ::core::option::Option<ProductWeight>,
    #[prost(message, repeated, tag = "39")]
    pub shipping: ::prost::alloc::vec::Vec<Shipping>,
    #[prost(message, repeated, tag = "135")]
    pub free_shipping_threshold: ::prost::alloc::vec::Vec<FreeShippingThreshold>,
    #[prost(message, optional, tag = "40")]
    pub shipping_weight: ::core::option::Option<ShippingWeight>,
    #[prost(message, optional, tag = "41")]
    pub shipping_length: ::core::option::Option<ShippingDimension>,
    #[prost(message, optional, tag = "42")]
    pub shipping_width: ::core::option::Option<ShippingDimension>,
    #[prost(message, optional, tag = "43")]
    pub shipping_height: ::core::option::Option<ShippingDimension>,
    #[prost(int64, optional, tag = "44")]
    pub max_handling_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "45")]
    pub min_handling_time: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "46")]
    pub shipping_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "47")]
    pub transit_time_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "48")]
    pub size: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "49")]
    pub size_system: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "50")]
    pub size_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "51")]
    pub taxes: ::prost::alloc::vec::Vec<Tax>,
    #[prost(string, optional, tag = "52")]
    pub tax_category: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "53")]
    pub energy_efficiency_class: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "54")]
    pub min_energy_efficiency_class: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "55")]
    pub max_energy_efficiency_class: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "56")]
    pub unit_pricing_measure: ::core::option::Option<UnitPricingMeasure>,
    #[prost(message, optional, tag = "57")]
    pub unit_pricing_base_measure: ::core::option::Option<UnitPricingBaseMeasure>,
    #[prost(int64, optional, tag = "58")]
    pub multipack: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "59")]
    pub ads_grouping: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "60")]
    pub ads_labels: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "61")]
    pub ads_redirect: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "62")]
    pub cost_of_goods_sold: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(message, repeated, tag = "63")]
    pub product_details: ::prost::alloc::vec::Vec<ProductDetail>,
    #[prost(string, repeated, tag = "64")]
    pub product_highlights: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "65")]
    pub display_ads_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "66")]
    pub display_ads_similar_ids: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "67")]
    pub display_ads_title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "68")]
    pub display_ads_link: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "69")]
    pub display_ads_value: ::core::option::Option<f64>,
    #[prost(string, repeated, tag = "70")]
    pub promotion_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "80")]
    pub pickup_method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "81")]
    pub pickup_sla: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "82")]
    pub link_template: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "83")]
    pub mobile_link_template: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "71")]
    pub custom_label_0: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "72")]
    pub custom_label_1: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "73")]
    pub custom_label_2: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "74")]
    pub custom_label_3: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "75")]
    pub custom_label_4: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "76")]
    pub included_destinations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "77")]
    pub excluded_destinations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "78")]
    pub shopping_ads_excluded_countries: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "1")]
    pub external_seller_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub pause: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "14")]
    pub lifestyle_image_links: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "84")]
    pub cloud_export_additional_properties: ::prost::alloc::vec::Vec<
        CloudExportAdditionalProperties,
    >,
    #[prost(string, optional, tag = "130")]
    pub virtual_model_link: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "123")]
    pub certifications: ::prost::alloc::vec::Vec<Certification>,
    #[prost(message, optional, tag = "132")]
    pub structured_title: ::core::option::Option<ProductStructuredTitle>,
    #[prost(message, optional, tag = "133")]
    pub structured_description: ::core::option::Option<ProductStructuredDescription>,
    #[prost(message, optional, tag = "124")]
    pub auto_pricing_min_price: ::core::option::Option<
        super::super::super::r#type::Price,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tax {
    #[prost(double, tag = "1")]
    pub rate: f64,
    #[prost(string, tag = "2")]
    pub country: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub region: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub tax_ship: bool,
    #[prost(int64, tag = "5")]
    pub location_id: i64,
    #[prost(string, tag = "6")]
    pub postal_code: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShippingWeight {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(string, tag = "2")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShippingDimension {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(string, tag = "2")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnitPricingBaseMeasure {
    #[prost(int64, tag = "1")]
    pub value: i64,
    #[prost(string, tag = "2")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnitPricingMeasure {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(string, tag = "2")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionCost {
    #[prost(enumeration = "SubscriptionPeriod", tag = "1")]
    pub period: i32,
    #[prost(int64, tag = "2")]
    pub period_length: i64,
    #[prost(message, optional, tag = "3")]
    pub amount: ::core::option::Option<super::super::super::r#type::Price>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Installment {
    #[prost(int64, tag = "1")]
    pub months: i64,
    #[prost(message, optional, tag = "2")]
    pub amount: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(message, optional, tag = "3")]
    pub downpayment: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(string, optional, tag = "4")]
    pub credit_type: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoyaltyPoints {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub points_value: i64,
    #[prost(double, tag = "3")]
    pub ratio: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoyaltyProgram {
    #[prost(string, optional, tag = "1")]
    pub program_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub tier_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub price: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(message, optional, tag = "4")]
    pub cashback_for_future_use: ::core::option::Option<
        super::super::super::r#type::Price,
    >,
    #[prost(int64, optional, tag = "5")]
    pub loyalty_points: ::core::option::Option<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shipping {
    #[prost(message, optional, tag = "1")]
    pub price: ::core::option::Option<super::super::super::r#type::Price>,
    #[prost(string, tag = "2")]
    pub country: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub region: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub service: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub location_id: i64,
    #[prost(string, tag = "6")]
    pub location_group_name: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub postal_code: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "8")]
    pub min_handling_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "9")]
    pub max_handling_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "10")]
    pub min_transit_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "11")]
    pub max_transit_time: ::core::option::Option<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreeShippingThreshold {
    #[prost(string, optional, tag = "1")]
    pub country: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub price_threshold: ::core::option::Option<super::super::super::r#type::Price>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductDetail {
    #[prost(string, tag = "1")]
    pub section_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub attribute_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub attribute_value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Certification {
    #[prost(string, optional, tag = "1")]
    pub certification_authority: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub certification_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub certification_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub certification_value: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductStructuredTitle {
    #[prost(string, optional, tag = "1")]
    pub digital_source_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductStructuredDescription {
    #[prost(string, optional, tag = "1")]
    pub digital_source_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductDimension {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(string, tag = "2")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductWeight {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(string, tag = "2")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductStatus {
    #[prost(message, repeated, tag = "3")]
    pub destination_statuses: ::prost::alloc::vec::Vec<
        product_status::DestinationStatus,
    >,
    #[prost(message, repeated, tag = "4")]
    pub item_level_issues: ::prost::alloc::vec::Vec<product_status::ItemLevelIssue>,
    #[prost(message, optional, tag = "5")]
    pub creation_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub last_update_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub google_expiration_date: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `ProductStatus`.
pub mod product_status {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DestinationStatus {
        #[prost(
            enumeration = "super::super::super::super::r#type::reporting_context::ReportingContextEnum",
            tag = "1"
        )]
        pub reporting_context: i32,
        #[prost(string, repeated, tag = "2")]
        pub approved_countries: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "3")]
        pub pending_countries: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "4")]
        pub disapproved_countries: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ItemLevelIssue {
        #[prost(string, tag = "1")]
        pub code: ::prost::alloc::string::String,
        #[prost(enumeration = "item_level_issue::Severity", tag = "2")]
        pub severity: i32,
        #[prost(string, tag = "3")]
        pub resolution: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub attribute: ::prost::alloc::string::String,
        #[prost(
            enumeration = "super::super::super::super::r#type::reporting_context::ReportingContextEnum",
            tag = "5"
        )]
        pub reporting_context: i32,
        #[prost(string, tag = "6")]
        pub description: ::prost::alloc::string::String,
        #[prost(string, tag = "7")]
        pub detail: ::prost::alloc::string::String,
        #[prost(string, tag = "8")]
        pub documentation: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "9")]
        pub applicable_countries: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
    }
    /// Nested message and enum types in `ItemLevelIssue`.
    pub mod item_level_issue {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Severity {
            Unspecified = 0,
            NotImpacted = 1,
            Demoted = 2,
            Disapproved = 3,
        }
        impl Severity {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Severity::Unspecified => "SEVERITY_UNSPECIFIED",
                    Severity::NotImpacted => "NOT_IMPACTED",
                    Severity::Demoted => "DEMOTED",
                    Severity::Disapproved => "DISAPPROVED",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "SEVERITY_UNSPECIFIED" => Some(Self::Unspecified),
                    "NOT_IMPACTED" => Some(Self::NotImpacted),
                    "DEMOTED" => Some(Self::Demoted),
                    "DISAPPROVED" => Some(Self::Disapproved),
                    _ => None,
                }
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudExportAdditionalProperties {
    #[prost(string, optional, tag = "1")]
    pub property_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub text_value: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub bool_value: ::core::option::Option<bool>,
    #[prost(int64, repeated, tag = "4")]
    pub int_value: ::prost::alloc::vec::Vec<i64>,
    #[prost(float, repeated, tag = "5")]
    pub float_value: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, optional, tag = "6")]
    pub min_value: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "7")]
    pub max_value: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "8")]
    pub unit_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SubscriptionPeriod {
    Unspecified = 0,
    Month = 1,
    Year = 2,
}
impl SubscriptionPeriod {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SubscriptionPeriod::Unspecified => "SUBSCRIPTION_PERIOD_UNSPECIFIED",
            SubscriptionPeriod::Month => "MONTH",
            SubscriptionPeriod::Year => "YEAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUBSCRIPTION_PERIOD_UNSPECIFIED" => Some(Self::Unspecified),
            "MONTH" => Some(Self::Month),
            "YEAR" => Some(Self::Year),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Product {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(
        enumeration = "super::super::super::r#type::channel::ChannelEnum",
        tag = "2"
    )]
    pub channel: i32,
    #[prost(string, tag = "3")]
    pub offer_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub content_language: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub feed_label: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub data_source: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "7")]
    pub version_number: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "8")]
    pub attributes: ::core::option::Option<Attributes>,
    #[prost(message, repeated, tag = "9")]
    pub custom_attributes: ::prost::alloc::vec::Vec<
        super::super::super::r#type::CustomAttribute,
    >,
    #[prost(message, optional, tag = "10")]
    pub product_status: ::core::option::Option<ProductStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProductRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListProductsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListProductsResponse {
    #[prost(message, repeated, tag = "1")]
    pub products: ::prost::alloc::vec::Vec<Product>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod products_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service to use Product resource.
    /// This service works for products with online channel only.
    #[derive(Debug, Clone)]
    pub struct ProductsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ProductsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ProductsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ProductsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Retrieves the processed product from your Merchant Center account.
        ///
        /// After inserting, updating, or deleting a product input, it may take several
        /// minutes before the updated final product can be retrieved.
        pub async fn get_product(
            &mut self,
            request: impl tonic::IntoRequest<super::GetProductRequest>,
        ) -> std::result::Result<tonic::Response<super::Product>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.shopping.merchant.products.v1beta.ProductsService/GetProduct",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.shopping.merchant.products.v1beta.ProductsService",
                        "GetProduct",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists the processed products in your Merchant Center account. The response
        /// might contain fewer items than specified by pageSize. Rely on pageToken to
        /// determine if there are more items to be requested.
        ///
        /// After inserting, updating, or deleting a product input, it may take several
        /// minutes before the updated processed product can be retrieved.
        pub async fn list_products(
            &mut self,
            request: impl tonic::IntoRequest<super::ListProductsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListProductsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.shopping.merchant.products.v1beta.ProductsService/ListProducts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.shopping.merchant.products.v1beta.ProductsService",
                        "ListProducts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductInput {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub product: ::prost::alloc::string::String,
    #[prost(
        enumeration = "super::super::super::r#type::channel::ChannelEnum",
        tag = "3"
    )]
    pub channel: i32,
    #[prost(string, tag = "4")]
    pub offer_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub content_language: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub feed_label: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "7")]
    pub version_number: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "8")]
    pub attributes: ::core::option::Option<Attributes>,
    #[prost(message, repeated, tag = "9")]
    pub custom_attributes: ::prost::alloc::vec::Vec<
        super::super::super::r#type::CustomAttribute,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertProductInputRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub product_input: ::core::option::Option<ProductInput>,
    #[prost(string, tag = "3")]
    pub data_source: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteProductInputRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub data_source: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod product_inputs_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service to use ProductInput resource.
    /// This service works for products with online channel only.
    #[derive(Debug, Clone)]
    pub struct ProductInputsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ProductInputsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ProductInputsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ProductInputsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Uploads a product input to your Merchant Center account. If an input
        /// with the same contentLanguage, offerId, and dataSource already exists,
        /// this method replaces that entry.
        ///
        /// After inserting, updating, or deleting a product input, it may take several
        /// minutes before the processed product can be retrieved.
        pub async fn insert_product_input(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertProductInputRequest>,
        ) -> std::result::Result<tonic::Response<super::ProductInput>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.shopping.merchant.products.v1beta.ProductInputsService/InsertProductInput",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.shopping.merchant.products.v1beta.ProductInputsService",
                        "InsertProductInput",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a product input from your Merchant Center account.
        ///
        /// After inserting, updating, or deleting a product input, it may take several
        /// minutes before the processed product can be retrieved.
        pub async fn delete_product_input(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteProductInputRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.shopping.merchant.products.v1beta.ProductInputsService/DeleteProductInput",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.shopping.merchant.products.v1beta.ProductInputsService",
                        "DeleteProductInput",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
