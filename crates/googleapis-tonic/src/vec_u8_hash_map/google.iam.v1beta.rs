// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPool {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(enumeration = "workload_identity_pool::State", tag = "4")]
    pub state: i32,
    #[prost(bool, tag = "5")]
    pub disabled: bool,
}
/// Nested message and enum types in `WorkloadIdentityPool`.
pub mod workload_identity_pool {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Active = 1,
        Deleted = 2,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Active => "ACTIVE",
                State::Deleted => "DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPoolProvider {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(enumeration = "workload_identity_pool_provider::State", tag = "4")]
    pub state: i32,
    #[prost(bool, tag = "5")]
    pub disabled: bool,
    #[prost(map = "string, string", tag = "6")]
    pub attribute_mapping: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "7")]
    pub attribute_condition: ::prost::alloc::string::String,
    #[prost(oneof = "workload_identity_pool_provider::ProviderConfig", tags = "8, 9")]
    pub provider_config: ::core::option::Option<
        workload_identity_pool_provider::ProviderConfig,
    >,
}
/// Nested message and enum types in `WorkloadIdentityPoolProvider`.
pub mod workload_identity_pool_provider {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Aws {
        #[prost(string, tag = "1")]
        pub account_id: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Oidc {
        #[prost(string, tag = "1")]
        pub issuer_uri: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "2")]
        pub allowed_audiences: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Active = 1,
        Deleted = 2,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Active => "ACTIVE",
                State::Deleted => "DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ProviderConfig {
        #[prost(message, tag = "8")]
        Aws(Aws),
        #[prost(message, tag = "9")]
        Oidc(Oidc),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub show_deleted: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolsResponse {
    #[prost(message, repeated, tag = "1")]
    pub workload_identity_pools: ::prost::alloc::vec::Vec<WorkloadIdentityPool>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkloadIdentityPoolRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkloadIdentityPoolRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub workload_identity_pool: ::core::option::Option<WorkloadIdentityPool>,
    #[prost(string, tag = "3")]
    pub workload_identity_pool_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWorkloadIdentityPoolRequest {
    #[prost(message, optional, tag = "1")]
    pub workload_identity_pool: ::core::option::Option<WorkloadIdentityPool>,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteWorkloadIdentityPoolRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UndeleteWorkloadIdentityPoolRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolProvidersRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub show_deleted: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolProvidersResponse {
    #[prost(message, repeated, tag = "1")]
    pub workload_identity_pool_providers: ::prost::alloc::vec::Vec<
        WorkloadIdentityPoolProvider,
    >,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkloadIdentityPoolProviderRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkloadIdentityPoolProviderRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub workload_identity_pool_provider: ::core::option::Option<
        WorkloadIdentityPoolProvider,
    >,
    #[prost(string, tag = "3")]
    pub workload_identity_pool_provider_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWorkloadIdentityPoolProviderRequest {
    #[prost(message, optional, tag = "1")]
    pub workload_identity_pool_provider: ::core::option::Option<
        WorkloadIdentityPoolProvider,
    >,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteWorkloadIdentityPoolProviderRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UndeleteWorkloadIdentityPoolProviderRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPoolOperationMetadata {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPoolProviderOperationMetadata {}
/// Generated client implementations.
pub mod workload_identity_pools_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Manages WorkloadIdentityPools.
    #[derive(Debug, Clone)]
    pub struct WorkloadIdentityPoolsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> WorkloadIdentityPoolsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> WorkloadIdentityPoolsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            WorkloadIdentityPoolsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists all non-deleted
        /// \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\]s in a
        /// project. If `show_deleted` is set to `true`, then deleted pools are also
        /// listed.
        pub async fn list_workload_identity_pools(
            &mut self,
            request: impl tonic::IntoRequest<super::ListWorkloadIdentityPoolsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkloadIdentityPoolsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPools",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "ListWorkloadIdentityPools",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets an individual
        /// \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\].
        pub async fn get_workload_identity_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::GetWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WorkloadIdentityPool>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "GetWorkloadIdentityPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new
        /// \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\].
        ///
        /// You cannot reuse the name of a deleted pool until 30 days after deletion.
        pub async fn create_workload_identity_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "CreateWorkloadIdentityPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates an existing
        /// \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\].
        pub async fn update_workload_identity_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "UpdateWorkloadIdentityPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a
        /// \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\].
        ///
        /// You cannot use a deleted pool to exchange external
        /// credentials for Google Cloud credentials. However, deletion does
        /// not revoke credentials that have already been issued.
        /// Credentials issued for a deleted pool do not grant access to resources.
        /// If the pool is undeleted, and the credentials are not expired, they
        /// grant access again.
        /// You can undelete a pool for 30 days. After 30 days, deletion is
        /// permanent.
        /// You cannot update deleted pools. However, you can view and list them.
        pub async fn delete_workload_identity_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "DeleteWorkloadIdentityPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Undeletes a \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\],
        /// as long as it was deleted fewer than 30 days ago.
        pub async fn undelete_workload_identity_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::UndeleteWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "UndeleteWorkloadIdentityPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists all non-deleted
        /// \[WorkloadIdentityPoolProvider\]\[google.iam.v1beta.WorkloadIdentityPoolProvider\]s
        /// in a \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\].
        /// If `show_deleted` is set to `true`, then deleted providers are also listed.
        pub async fn list_workload_identity_pool_providers(
            &mut self,
            request: impl tonic::IntoRequest<
                super::ListWorkloadIdentityPoolProvidersRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkloadIdentityPoolProvidersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPoolProviders",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "ListWorkloadIdentityPoolProviders",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets an individual
        /// \[WorkloadIdentityPoolProvider\]\[google.iam.v1beta.WorkloadIdentityPoolProvider\].
        pub async fn get_workload_identity_pool_provider(
            &mut self,
            request: impl tonic::IntoRequest<
                super::GetWorkloadIdentityPoolProviderRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::WorkloadIdentityPoolProvider>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPoolProvider",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "GetWorkloadIdentityPoolProvider",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new
        /// \[WorkloadIdentityPoolProvider\]\[google.iam.v1beta.WorkloadIdentityProvider\]
        /// in a \[WorkloadIdentityPool\]\[google.iam.v1beta.WorkloadIdentityPool\].
        ///
        /// You cannot reuse the name of a deleted provider until 30 days after
        /// deletion.
        pub async fn create_workload_identity_pool_provider(
            &mut self,
            request: impl tonic::IntoRequest<
                super::CreateWorkloadIdentityPoolProviderRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPoolProvider",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "CreateWorkloadIdentityPoolProvider",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates an existing
        /// \[WorkloadIdentityPoolProvider\]\[google.iam.v1beta.WorkloadIdentityProvider\].
        pub async fn update_workload_identity_pool_provider(
            &mut self,
            request: impl tonic::IntoRequest<
                super::UpdateWorkloadIdentityPoolProviderRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPoolProvider",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "UpdateWorkloadIdentityPoolProvider",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a
        /// \[WorkloadIdentityPoolProvider\]\[google.iam.v1beta.WorkloadIdentityProvider\].
        /// Deleting a provider does not revoke credentials that have already been
        /// issued; they continue to grant access.
        /// You can undelete a provider for 30 days. After 30 days, deletion is
        /// permanent.
        /// You cannot update deleted providers. However, you can view and list them.
        pub async fn delete_workload_identity_pool_provider(
            &mut self,
            request: impl tonic::IntoRequest<
                super::DeleteWorkloadIdentityPoolProviderRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPoolProvider",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "DeleteWorkloadIdentityPoolProvider",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Undeletes a
        /// \[WorkloadIdentityPoolProvider\]\[google.iam.v1beta.WorkloadIdentityProvider\],
        /// as long as it was deleted fewer than 30 days ago.
        pub async fn undelete_workload_identity_pool_provider(
            &mut self,
            request: impl tonic::IntoRequest<
                super::UndeleteWorkloadIdentityPoolProviderRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPoolProvider",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.iam.v1beta.WorkloadIdentityPools",
                        "UndeleteWorkloadIdentityPoolProvider",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
