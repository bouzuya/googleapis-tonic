// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReconciliationLog {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<reconciliation_log::Inputs>,
    #[prost(message, optional, tag = "2")]
    pub outputs: ::core::option::Option<reconciliation_log::Outputs>,
}
/// Nested message and enum types in `ReconciliationLog`.
pub mod reconciliation_log {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Inputs {
        #[prost(message, optional, tag = "1")]
        pub idle_duration: ::core::option::Option<::prost_types::Duration>,
        #[prost(message, optional, tag = "2")]
        pub idle_ttl: ::core::option::Option<::prost_types::Duration>,
        #[prost(message, optional, tag = "3")]
        pub session_lifetime: ::core::option::Option<::prost_types::Duration>,
        #[prost(message, optional, tag = "4")]
        pub ttl: ::core::option::Option<::prost_types::Duration>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Outputs {
        #[prost(enumeration = "super::ReconciliationDecisionType", tag = "1")]
        pub decision: i32,
        #[prost(string, tag = "2")]
        pub decision_details: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReconciliationClusterHealLog {
    #[prost(message, optional, tag = "1")]
    pub outputs: ::core::option::Option<reconciliation_cluster_heal_log::Outputs>,
}
/// Nested message and enum types in `ReconciliationClusterHealLog`.
pub mod reconciliation_cluster_heal_log {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Outputs {
        #[prost(string, tag = "1")]
        pub repair_operation_id: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub decision_details: ::prost::alloc::string::String,
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReconciliationDecisionType {
    Unspecified = 0,
    ReconciliationTerminateSession = 1,
}
impl ReconciliationDecisionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ReconciliationDecisionType::Unspecified => {
                "RECONCILIATION_DECISION_TYPE_UNSPECIFIED"
            }
            ReconciliationDecisionType::ReconciliationTerminateSession => {
                "RECONCILIATION_TERMINATE_SESSION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RECONCILIATION_DECISION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "RECONCILIATION_TERMINATE_SESSION" => {
                Some(Self::ReconciliationTerminateSession)
            }
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClusterSize {
    #[prost(int32, tag = "1")]
    pub primary_worker_count: i32,
    #[prost(int32, tag = "2")]
    pub secondary_worker_count: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoscalerLog {
    #[prost(message, optional, tag = "1")]
    pub status: ::core::option::Option<AutoscalerStatus>,
    #[prost(message, optional, tag = "2")]
    pub recommendation: ::core::option::Option<AutoscalerRecommendation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoscalerStatus {
    #[prost(enumeration = "AutoscalerState", tag = "1")]
    pub state: i32,
    #[prost(string, tag = "2")]
    pub details: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub update_cluster_operation_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub error: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoscalerRecommendation {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<autoscaler_recommendation::Inputs>,
    #[prost(message, optional, tag = "2")]
    pub outputs: ::core::option::Option<autoscaler_recommendation::Outputs>,
}
/// Nested message and enum types in `AutoscalerRecommendation`.
pub mod autoscaler_recommendation {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Inputs {
        #[prost(map = "string, string", tag = "1")]
        pub cluster_metrics: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
        #[prost(message, optional, tag = "2")]
        pub current_cluster_size: ::core::option::Option<super::ClusterSize>,
        #[prost(message, optional, tag = "3")]
        pub min_worker_counts: ::core::option::Option<super::ClusterSize>,
        #[prost(message, optional, tag = "4")]
        pub max_worker_counts: ::core::option::Option<super::ClusterSize>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Outputs {
        #[prost(enumeration = "super::ScalingDecisionType", tag = "1")]
        pub decision: i32,
        #[prost(message, optional, tag = "2")]
        pub recommended_cluster_size: ::core::option::Option<super::ClusterSize>,
        #[prost(message, optional, tag = "3")]
        pub graceful_decommission_timeout: ::core::option::Option<
            ::prost_types::Duration,
        >,
        #[prost(enumeration = "super::ConstrainingFactor", repeated, tag = "4")]
        pub constraints_reached: ::prost::alloc::vec::Vec<i32>,
        #[prost(string, repeated, tag = "5")]
        pub additional_recommendation_details: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
        #[prost(string, tag = "6")]
        pub recommendation_id: ::prost::alloc::string::String,
        #[prost(enumeration = "super::MetricType", tag = "7")]
        pub decision_metric: i32,
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AutoscalerState {
    Unspecified = 0,
    Cooldown = 1,
    Recommending = 6,
    Scaling = 2,
    Stopped = 3,
    Failed = 4,
    Initializing = 5,
}
impl AutoscalerState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AutoscalerState::Unspecified => "AUTOSCALER_STATE_UNSPECIFIED",
            AutoscalerState::Cooldown => "COOLDOWN",
            AutoscalerState::Recommending => "RECOMMENDING",
            AutoscalerState::Scaling => "SCALING",
            AutoscalerState::Stopped => "STOPPED",
            AutoscalerState::Failed => "FAILED",
            AutoscalerState::Initializing => "INITIALIZING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTOSCALER_STATE_UNSPECIFIED" => Some(Self::Unspecified),
            "COOLDOWN" => Some(Self::Cooldown),
            "RECOMMENDING" => Some(Self::Recommending),
            "SCALING" => Some(Self::Scaling),
            "STOPPED" => Some(Self::Stopped),
            "FAILED" => Some(Self::Failed),
            "INITIALIZING" => Some(Self::Initializing),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ScalingDecisionType {
    Unspecified = 0,
    ScaleUp = 1,
    ScaleDown = 2,
    NoScale = 3,
    Mixed = 4,
    Cancel = 5,
    DoNotCancel = 6,
}
impl ScalingDecisionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ScalingDecisionType::Unspecified => "SCALING_DECISION_TYPE_UNSPECIFIED",
            ScalingDecisionType::ScaleUp => "SCALE_UP",
            ScalingDecisionType::ScaleDown => "SCALE_DOWN",
            ScalingDecisionType::NoScale => "NO_SCALE",
            ScalingDecisionType::Mixed => "MIXED",
            ScalingDecisionType::Cancel => "CANCEL",
            ScalingDecisionType::DoNotCancel => "DO_NOT_CANCEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCALING_DECISION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SCALE_UP" => Some(Self::ScaleUp),
            "SCALE_DOWN" => Some(Self::ScaleDown),
            "NO_SCALE" => Some(Self::NoScale),
            "MIXED" => Some(Self::Mixed),
            "CANCEL" => Some(Self::Cancel),
            "DO_NOT_CANCEL" => Some(Self::DoNotCancel),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConstrainingFactor {
    Unspecified = 0,
    ScalingCappedDueToLackOfQuota = 1,
    ReachedMaximumClusterSize = 2,
    ReachedMinimumClusterSize = 3,
    SecondaryScaledownSingleRequestLimitReached = 4,
}
impl ConstrainingFactor {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ConstrainingFactor::Unspecified => "CONSTRAINING_FACTOR_UNSPECIFIED",
            ConstrainingFactor::ScalingCappedDueToLackOfQuota => {
                "SCALING_CAPPED_DUE_TO_LACK_OF_QUOTA"
            }
            ConstrainingFactor::ReachedMaximumClusterSize => {
                "REACHED_MAXIMUM_CLUSTER_SIZE"
            }
            ConstrainingFactor::ReachedMinimumClusterSize => {
                "REACHED_MINIMUM_CLUSTER_SIZE"
            }
            ConstrainingFactor::SecondaryScaledownSingleRequestLimitReached => {
                "SECONDARY_SCALEDOWN_SINGLE_REQUEST_LIMIT_REACHED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONSTRAINING_FACTOR_UNSPECIFIED" => Some(Self::Unspecified),
            "SCALING_CAPPED_DUE_TO_LACK_OF_QUOTA" => {
                Some(Self::ScalingCappedDueToLackOfQuota)
            }
            "REACHED_MAXIMUM_CLUSTER_SIZE" => Some(Self::ReachedMaximumClusterSize),
            "REACHED_MINIMUM_CLUSTER_SIZE" => Some(Self::ReachedMinimumClusterSize),
            "SECONDARY_SCALEDOWN_SINGLE_REQUEST_LIMIT_REACHED" => {
                Some(Self::SecondaryScaledownSingleRequestLimitReached)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MetricType {
    Unspecified = 0,
    YarnMemory = 1,
    YarnCores = 2,
    SparkExecutors = 3,
}
impl MetricType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MetricType::Unspecified => "METRIC_TYPE_UNSPECIFIED",
            MetricType::YarnMemory => "YARN_MEMORY",
            MetricType::YarnCores => "YARN_CORES",
            MetricType::SparkExecutors => "SPARK_EXECUTORS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "METRIC_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "YARN_MEMORY" => Some(Self::YarnMemory),
            "YARN_CORES" => Some(Self::YarnCores),
            "SPARK_EXECUTORS" => Some(Self::SparkExecutors),
            _ => None,
        }
    }
}
