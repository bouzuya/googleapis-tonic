// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Video {
    #[prost(map = "string, message", tag = "1")]
    pub uris: ::std::collections::HashMap<::prost::alloc::string::String, Uris>,
    #[prost(enumeration = "video::State", tag = "2")]
    pub state: i32,
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<VideoMetadata>,
}
/// Nested message and enum types in `Video`.
pub mod video {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Processing = 1,
        Active = 2,
        Failed = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Processing => "PROCESSING",
                State::Active => "ACTIVE",
                State::Failed => "FAILED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "PROCESSING" => Some(Self::Processing),
                "ACTIVE" => Some(Self::Active),
                "FAILED" => Some(Self::Failed),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uris {
    #[prost(string, tag = "1")]
    pub landscape_uri: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub portrait_uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoMetadata {
    #[prost(string, tag = "1")]
    pub video_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub capture_date: ::core::option::Option<super::super::super::r#type::Date>,
    #[prost(message, optional, tag = "3")]
    pub duration: ::core::option::Option<::prost_types::Duration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenderVideoRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenderVideoResponse {
    #[prost(enumeration = "video::State", tag = "1")]
    pub state: i32,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<VideoMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupVideoRequest {
    #[prost(oneof = "lookup_video_request::Key", tags = "1, 2")]
    pub key: ::core::option::Option<lookup_video_request::Key>,
}
/// Nested message and enum types in `LookupVideoRequest`.
pub mod lookup_video_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Key {
        #[prost(string, tag = "1")]
        VideoId(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        Address(::prost::alloc::string::String),
    }
}
/// Generated client implementations.
pub mod aerial_view_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service definition for the Aerial View API.
    #[derive(Debug, Clone)]
    pub struct AerialViewClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> AerialViewClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AerialViewClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            AerialViewClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Adds an address to the renderer's queue if a video hasn't already been
        /// rendered. Otherwise, returns metadata about the video.
        pub async fn render_video(
            &mut self,
            request: impl tonic::IntoRequest<super::RenderVideoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RenderVideoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.maps.aerialview.v1.AerialView/RenderVideo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.maps.aerialview.v1.AerialView",
                        "RenderVideo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetches a video given its address or videoId. The response will either be
        /// a video with a set of playback URIs for ACTIVE videos, a PROCESSING state
        /// for pending videos, or a 404 error if the video does not exist. Receiving a
        /// video is a billable event, so callers of this method should be ready to use
        /// the returned URIs at the time of request.
        pub async fn lookup_video(
            &mut self,
            request: impl tonic::IntoRequest<super::LookupVideoRequest>,
        ) -> std::result::Result<tonic::Response<super::Video>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.maps.aerialview.v1.AerialView/LookupVideo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.maps.aerialview.v1.AerialView",
                        "LookupVideo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
