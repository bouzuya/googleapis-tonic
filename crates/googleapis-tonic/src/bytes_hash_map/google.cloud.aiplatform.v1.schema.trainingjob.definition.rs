// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlImageObjectDetection {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlImageObjectDetectionInputs>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<AutoMlImageObjectDetectionMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlImageObjectDetectionInputs {
    #[prost(enumeration = "auto_ml_image_object_detection_inputs::ModelType", tag = "1")]
    pub model_type: i32,
    #[prost(int64, tag = "2")]
    pub budget_milli_node_hours: i64,
    #[prost(bool, tag = "3")]
    pub disable_early_stopping: bool,
}
/// Nested message and enum types in `AutoMlImageObjectDetectionInputs`.
pub mod auto_ml_image_object_detection_inputs {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ModelType {
        Unspecified = 0,
        CloudHighAccuracy1 = 1,
        CloudLowLatency1 = 2,
        MobileTfLowLatency1 = 3,
        MobileTfVersatile1 = 4,
        MobileTfHighAccuracy1 = 5,
    }
    impl ModelType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ModelType::Unspecified => "MODEL_TYPE_UNSPECIFIED",
                ModelType::CloudHighAccuracy1 => "CLOUD_HIGH_ACCURACY_1",
                ModelType::CloudLowLatency1 => "CLOUD_LOW_LATENCY_1",
                ModelType::MobileTfLowLatency1 => "MOBILE_TF_LOW_LATENCY_1",
                ModelType::MobileTfVersatile1 => "MOBILE_TF_VERSATILE_1",
                ModelType::MobileTfHighAccuracy1 => "MOBILE_TF_HIGH_ACCURACY_1",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CLOUD_HIGH_ACCURACY_1" => Some(Self::CloudHighAccuracy1),
                "CLOUD_LOW_LATENCY_1" => Some(Self::CloudLowLatency1),
                "MOBILE_TF_LOW_LATENCY_1" => Some(Self::MobileTfLowLatency1),
                "MOBILE_TF_VERSATILE_1" => Some(Self::MobileTfVersatile1),
                "MOBILE_TF_HIGH_ACCURACY_1" => Some(Self::MobileTfHighAccuracy1),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlImageObjectDetectionMetadata {
    #[prost(int64, tag = "1")]
    pub cost_milli_node_hours: i64,
    #[prost(
        enumeration = "auto_ml_image_object_detection_metadata::SuccessfulStopReason",
        tag = "2"
    )]
    pub successful_stop_reason: i32,
}
/// Nested message and enum types in `AutoMlImageObjectDetectionMetadata`.
pub mod auto_ml_image_object_detection_metadata {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SuccessfulStopReason {
        Unspecified = 0,
        BudgetReached = 1,
        ModelConverged = 2,
    }
    impl SuccessfulStopReason {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                SuccessfulStopReason::Unspecified => "SUCCESSFUL_STOP_REASON_UNSPECIFIED",
                SuccessfulStopReason::BudgetReached => "BUDGET_REACHED",
                SuccessfulStopReason::ModelConverged => "MODEL_CONVERGED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SUCCESSFUL_STOP_REASON_UNSPECIFIED" => Some(Self::Unspecified),
                "BUDGET_REACHED" => Some(Self::BudgetReached),
                "MODEL_CONVERGED" => Some(Self::ModelConverged),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlTextExtraction {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlTextExtractionInputs>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlTextExtractionInputs {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlTextClassification {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlTextClassificationInputs>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlTextClassificationInputs {
    #[prost(bool, tag = "1")]
    pub multi_label: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlTextSentiment {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlTextSentimentInputs>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlTextSentimentInputs {
    #[prost(int32, tag = "1")]
    pub sentiment_max: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportEvaluatedDataItemsConfig {
    #[prost(string, tag = "1")]
    pub destination_bigquery_uri: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub override_existing_table: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoMlTables {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlTablesInputs>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<AutoMlTablesMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoMlTablesInputs {
    #[prost(string, tag = "1")]
    pub prediction_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub target_column: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub transformations: ::prost::alloc::vec::Vec<auto_ml_tables_inputs::Transformation>,
    #[prost(string, tag = "4")]
    pub optimization_objective: ::prost::alloc::string::String,
    #[prost(int64, tag = "7")]
    pub train_budget_milli_node_hours: i64,
    #[prost(bool, tag = "8")]
    pub disable_early_stopping: bool,
    #[prost(string, tag = "9")]
    pub weight_column_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub export_evaluated_data_items_config: ::core::option::Option<
        ExportEvaluatedDataItemsConfig,
    >,
    #[prost(string, repeated, tag = "11")]
    pub additional_experiments: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(
        oneof = "auto_ml_tables_inputs::AdditionalOptimizationObjectiveConfig",
        tags = "5, 6"
    )]
    pub additional_optimization_objective_config: ::core::option::Option<
        auto_ml_tables_inputs::AdditionalOptimizationObjectiveConfig,
    >,
}
/// Nested message and enum types in `AutoMlTablesInputs`.
pub mod auto_ml_tables_inputs {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Transformation {
        #[prost(
            oneof = "transformation::TransformationDetail",
            tags = "1, 2, 3, 4, 5, 6, 7, 8"
        )]
        pub transformation_detail: ::core::option::Option<
            transformation::TransformationDetail,
        >,
    }
    /// Nested message and enum types in `Transformation`.
    pub mod transformation {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct AutoTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct NumericTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
            #[prost(bool, tag = "2")]
            pub invalid_values_allowed: bool,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct CategoricalTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TimestampTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
            #[prost(string, tag = "2")]
            pub time_format: ::prost::alloc::string::String,
            #[prost(bool, tag = "3")]
            pub invalid_values_allowed: bool,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TextTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct NumericArrayTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
            #[prost(bool, tag = "2")]
            pub invalid_values_allowed: bool,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct CategoricalArrayTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TextArrayTransformation {
            #[prost(string, tag = "1")]
            pub column_name: ::prost::alloc::string::String,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum TransformationDetail {
            #[prost(message, tag = "1")]
            Auto(AutoTransformation),
            #[prost(message, tag = "2")]
            Numeric(NumericTransformation),
            #[prost(message, tag = "3")]
            Categorical(CategoricalTransformation),
            #[prost(message, tag = "4")]
            Timestamp(TimestampTransformation),
            #[prost(message, tag = "5")]
            Text(TextTransformation),
            #[prost(message, tag = "6")]
            RepeatedNumeric(NumericArrayTransformation),
            #[prost(message, tag = "7")]
            RepeatedCategorical(CategoricalArrayTransformation),
            #[prost(message, tag = "8")]
            RepeatedText(TextArrayTransformation),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum AdditionalOptimizationObjectiveConfig {
        #[prost(float, tag = "5")]
        OptimizationObjectiveRecallValue(f32),
        #[prost(float, tag = "6")]
        OptimizationObjectivePrecisionValue(f32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlTablesMetadata {
    #[prost(int64, tag = "1")]
    pub train_cost_milli_node_hours: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlVideoObjectTracking {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlVideoObjectTrackingInputs>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlVideoObjectTrackingInputs {
    #[prost(enumeration = "auto_ml_video_object_tracking_inputs::ModelType", tag = "1")]
    pub model_type: i32,
}
/// Nested message and enum types in `AutoMlVideoObjectTrackingInputs`.
pub mod auto_ml_video_object_tracking_inputs {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ModelType {
        Unspecified = 0,
        Cloud = 1,
        MobileVersatile1 = 2,
        MobileCoralVersatile1 = 3,
        MobileCoralLowLatency1 = 4,
        MobileJetsonVersatile1 = 5,
        MobileJetsonLowLatency1 = 6,
    }
    impl ModelType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ModelType::Unspecified => "MODEL_TYPE_UNSPECIFIED",
                ModelType::Cloud => "CLOUD",
                ModelType::MobileVersatile1 => "MOBILE_VERSATILE_1",
                ModelType::MobileCoralVersatile1 => "MOBILE_CORAL_VERSATILE_1",
                ModelType::MobileCoralLowLatency1 => "MOBILE_CORAL_LOW_LATENCY_1",
                ModelType::MobileJetsonVersatile1 => "MOBILE_JETSON_VERSATILE_1",
                ModelType::MobileJetsonLowLatency1 => "MOBILE_JETSON_LOW_LATENCY_1",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CLOUD" => Some(Self::Cloud),
                "MOBILE_VERSATILE_1" => Some(Self::MobileVersatile1),
                "MOBILE_CORAL_VERSATILE_1" => Some(Self::MobileCoralVersatile1),
                "MOBILE_CORAL_LOW_LATENCY_1" => Some(Self::MobileCoralLowLatency1),
                "MOBILE_JETSON_VERSATILE_1" => Some(Self::MobileJetsonVersatile1),
                "MOBILE_JETSON_LOW_LATENCY_1" => Some(Self::MobileJetsonLowLatency1),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlVideoClassification {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlVideoClassificationInputs>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlVideoClassificationInputs {
    #[prost(enumeration = "auto_ml_video_classification_inputs::ModelType", tag = "1")]
    pub model_type: i32,
}
/// Nested message and enum types in `AutoMlVideoClassificationInputs`.
pub mod auto_ml_video_classification_inputs {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ModelType {
        Unspecified = 0,
        Cloud = 1,
        MobileVersatile1 = 2,
        MobileJetsonVersatile1 = 3,
    }
    impl ModelType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ModelType::Unspecified => "MODEL_TYPE_UNSPECIFIED",
                ModelType::Cloud => "CLOUD",
                ModelType::MobileVersatile1 => "MOBILE_VERSATILE_1",
                ModelType::MobileJetsonVersatile1 => "MOBILE_JETSON_VERSATILE_1",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CLOUD" => Some(Self::Cloud),
                "MOBILE_VERSATILE_1" => Some(Self::MobileVersatile1),
                "MOBILE_JETSON_VERSATILE_1" => Some(Self::MobileJetsonVersatile1),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoMlImageSegmentation {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlImageSegmentationInputs>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<AutoMlImageSegmentationMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoMlImageSegmentationInputs {
    #[prost(enumeration = "auto_ml_image_segmentation_inputs::ModelType", tag = "1")]
    pub model_type: i32,
    #[prost(int64, tag = "2")]
    pub budget_milli_node_hours: i64,
    #[prost(string, tag = "3")]
    pub base_model_id: ::prost::alloc::string::String,
}
/// Nested message and enum types in `AutoMlImageSegmentationInputs`.
pub mod auto_ml_image_segmentation_inputs {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ModelType {
        Unspecified = 0,
        CloudHighAccuracy1 = 1,
        CloudLowAccuracy1 = 2,
        MobileTfLowLatency1 = 3,
    }
    impl ModelType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ModelType::Unspecified => "MODEL_TYPE_UNSPECIFIED",
                ModelType::CloudHighAccuracy1 => "CLOUD_HIGH_ACCURACY_1",
                ModelType::CloudLowAccuracy1 => "CLOUD_LOW_ACCURACY_1",
                ModelType::MobileTfLowLatency1 => "MOBILE_TF_LOW_LATENCY_1",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CLOUD_HIGH_ACCURACY_1" => Some(Self::CloudHighAccuracy1),
                "CLOUD_LOW_ACCURACY_1" => Some(Self::CloudLowAccuracy1),
                "MOBILE_TF_LOW_LATENCY_1" => Some(Self::MobileTfLowLatency1),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlImageSegmentationMetadata {
    #[prost(int64, tag = "1")]
    pub cost_milli_node_hours: i64,
    #[prost(
        enumeration = "auto_ml_image_segmentation_metadata::SuccessfulStopReason",
        tag = "2"
    )]
    pub successful_stop_reason: i32,
}
/// Nested message and enum types in `AutoMlImageSegmentationMetadata`.
pub mod auto_ml_image_segmentation_metadata {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SuccessfulStopReason {
        Unspecified = 0,
        BudgetReached = 1,
        ModelConverged = 2,
    }
    impl SuccessfulStopReason {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                SuccessfulStopReason::Unspecified => "SUCCESSFUL_STOP_REASON_UNSPECIFIED",
                SuccessfulStopReason::BudgetReached => "BUDGET_REACHED",
                SuccessfulStopReason::ModelConverged => "MODEL_CONVERGED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SUCCESSFUL_STOP_REASON_UNSPECIFIED" => Some(Self::Unspecified),
                "BUDGET_REACHED" => Some(Self::BudgetReached),
                "MODEL_CONVERGED" => Some(Self::ModelConverged),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoMlImageClassification {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlImageClassificationInputs>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<AutoMlImageClassificationMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoMlImageClassificationInputs {
    #[prost(enumeration = "auto_ml_image_classification_inputs::ModelType", tag = "1")]
    pub model_type: i32,
    #[prost(string, tag = "2")]
    pub base_model_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub budget_milli_node_hours: i64,
    #[prost(bool, tag = "4")]
    pub disable_early_stopping: bool,
    #[prost(bool, tag = "5")]
    pub multi_label: bool,
}
/// Nested message and enum types in `AutoMlImageClassificationInputs`.
pub mod auto_ml_image_classification_inputs {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ModelType {
        Unspecified = 0,
        Cloud = 1,
        MobileTfLowLatency1 = 2,
        MobileTfVersatile1 = 3,
        MobileTfHighAccuracy1 = 4,
    }
    impl ModelType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ModelType::Unspecified => "MODEL_TYPE_UNSPECIFIED",
                ModelType::Cloud => "CLOUD",
                ModelType::MobileTfLowLatency1 => "MOBILE_TF_LOW_LATENCY_1",
                ModelType::MobileTfVersatile1 => "MOBILE_TF_VERSATILE_1",
                ModelType::MobileTfHighAccuracy1 => "MOBILE_TF_HIGH_ACCURACY_1",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CLOUD" => Some(Self::Cloud),
                "MOBILE_TF_LOW_LATENCY_1" => Some(Self::MobileTfLowLatency1),
                "MOBILE_TF_VERSATILE_1" => Some(Self::MobileTfVersatile1),
                "MOBILE_TF_HIGH_ACCURACY_1" => Some(Self::MobileTfHighAccuracy1),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlImageClassificationMetadata {
    #[prost(int64, tag = "1")]
    pub cost_milli_node_hours: i64,
    #[prost(
        enumeration = "auto_ml_image_classification_metadata::SuccessfulStopReason",
        tag = "2"
    )]
    pub successful_stop_reason: i32,
}
/// Nested message and enum types in `AutoMlImageClassificationMetadata`.
pub mod auto_ml_image_classification_metadata {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SuccessfulStopReason {
        Unspecified = 0,
        BudgetReached = 1,
        ModelConverged = 2,
    }
    impl SuccessfulStopReason {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                SuccessfulStopReason::Unspecified => "SUCCESSFUL_STOP_REASON_UNSPECIFIED",
                SuccessfulStopReason::BudgetReached => "BUDGET_REACHED",
                SuccessfulStopReason::ModelConverged => "MODEL_CONVERGED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SUCCESSFUL_STOP_REASON_UNSPECIFIED" => Some(Self::Unspecified),
                "BUDGET_REACHED" => Some(Self::BudgetReached),
                "MODEL_CONVERGED" => Some(Self::ModelConverged),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlVideoActionRecognition {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<AutoMlVideoActionRecognitionInputs>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoMlVideoActionRecognitionInputs {
    #[prost(
        enumeration = "auto_ml_video_action_recognition_inputs::ModelType",
        tag = "1"
    )]
    pub model_type: i32,
}
/// Nested message and enum types in `AutoMlVideoActionRecognitionInputs`.
pub mod auto_ml_video_action_recognition_inputs {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ModelType {
        Unspecified = 0,
        Cloud = 1,
        MobileVersatile1 = 2,
        MobileJetsonVersatile1 = 3,
        MobileCoralVersatile1 = 4,
    }
    impl ModelType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ModelType::Unspecified => "MODEL_TYPE_UNSPECIFIED",
                ModelType::Cloud => "CLOUD",
                ModelType::MobileVersatile1 => "MOBILE_VERSATILE_1",
                ModelType::MobileJetsonVersatile1 => "MOBILE_JETSON_VERSATILE_1",
                ModelType::MobileCoralVersatile1 => "MOBILE_CORAL_VERSATILE_1",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CLOUD" => Some(Self::Cloud),
                "MOBILE_VERSATILE_1" => Some(Self::MobileVersatile1),
                "MOBILE_JETSON_VERSATILE_1" => Some(Self::MobileJetsonVersatile1),
                "MOBILE_CORAL_VERSATILE_1" => Some(Self::MobileCoralVersatile1),
                _ => None,
            }
        }
    }
}
