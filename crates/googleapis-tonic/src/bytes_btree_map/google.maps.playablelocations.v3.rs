// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerReport {
    #[prost(string, tag = "1")]
    pub location_name: ::prost::alloc::string::String,
    #[prost(
        enumeration = "player_report::BadLocationReason",
        repeated,
        packed = "false",
        tag = "2"
    )]
    pub reasons: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, tag = "3")]
    pub reason_details: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub language_code: ::prost::alloc::string::String,
}
/// Nested message and enum types in `PlayerReport`.
pub mod player_report {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum BadLocationReason {
        Unspecified = 0,
        Other = 1,
        NotPedestrianAccessible = 2,
        NotOpenToPublic = 4,
        PermanentlyClosed = 5,
        TemporarilyInaccessible = 6,
    }
    impl BadLocationReason {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                BadLocationReason::Unspecified => "BAD_LOCATION_REASON_UNSPECIFIED",
                BadLocationReason::Other => "OTHER",
                BadLocationReason::NotPedestrianAccessible => "NOT_PEDESTRIAN_ACCESSIBLE",
                BadLocationReason::NotOpenToPublic => "NOT_OPEN_TO_PUBLIC",
                BadLocationReason::PermanentlyClosed => "PERMANENTLY_CLOSED",
                BadLocationReason::TemporarilyInaccessible => "TEMPORARILY_INACCESSIBLE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "BAD_LOCATION_REASON_UNSPECIFIED" => Some(Self::Unspecified),
                "OTHER" => Some(Self::Other),
                "NOT_PEDESTRIAN_ACCESSIBLE" => Some(Self::NotPedestrianAccessible),
                "NOT_OPEN_TO_PUBLIC" => Some(Self::NotOpenToPublic),
                "PERMANENTLY_CLOSED" => Some(Self::PermanentlyClosed),
                "TEMPORARILY_INACCESSIBLE" => Some(Self::TemporarilyInaccessible),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Impression {
    #[prost(string, tag = "1")]
    pub location_name: ::prost::alloc::string::String,
    #[prost(enumeration = "impression::ImpressionType", tag = "2")]
    pub impression_type: i32,
    #[prost(int32, tag = "4")]
    pub game_object_type: i32,
}
/// Nested message and enum types in `Impression`.
pub mod impression {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum ImpressionType {
        Unspecified = 0,
        Presented = 1,
        Interacted = 2,
    }
    impl ImpressionType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ImpressionType::Unspecified => "IMPRESSION_TYPE_UNSPECIFIED",
                ImpressionType::Presented => "PRESENTED",
                ImpressionType::Interacted => "INTERACTED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "IMPRESSION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "PRESENTED" => Some(Self::Presented),
                "INTERACTED" => Some(Self::Interacted),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SamplePlayableLocationsRequest {
    #[prost(message, optional, tag = "1")]
    pub area_filter: ::core::option::Option<sample::AreaFilter>,
    #[prost(message, repeated, tag = "2")]
    pub criteria: ::prost::alloc::vec::Vec<sample::Criterion>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SamplePlayableLocationsResponse {
    #[prost(btree_map = "int32, message", tag = "1")]
    pub locations_per_game_object_type:
        ::prost::alloc::collections::BTreeMap<i32, sample::PlayableLocationList>,
    #[prost(message, optional, tag = "9")]
    pub ttl: ::core::option::Option<::prost_types::Duration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogPlayerReportsRequest {
    #[prost(message, repeated, tag = "1")]
    pub player_reports: ::prost::alloc::vec::Vec<PlayerReport>,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub client_info: ::core::option::Option<super::super::unity::ClientInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogPlayerReportsResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogImpressionsRequest {
    #[prost(message, repeated, tag = "1")]
    pub impressions: ::prost::alloc::vec::Vec<Impression>,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub client_info: ::core::option::Option<super::super::unity::ClientInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogImpressionsResponse {}
/// Generated client implementations.
pub mod playable_locations_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// The Playable Locations API for v3.
    #[derive(Debug, Clone)]
    pub struct PlayableLocationsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> PlayableLocationsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PlayableLocationsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            PlayableLocationsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns a set of playable locations that lie within a specified area,
        /// that satisfy optional filter criteria.
        ///
        /// Note: Identical `SamplePlayableLocations` requests can return different
        /// results as the state of the world changes over time.
        pub async fn sample_playable_locations(
            &mut self,
            request: impl tonic::IntoRequest<super::SamplePlayableLocationsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SamplePlayableLocationsResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.maps.playablelocations.v3.PlayableLocations/SamplePlayableLocations",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.maps.playablelocations.v3.PlayableLocations",
                "SamplePlayableLocations",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Logs bad playable location reports submitted by players.
        ///
        /// Reports are not partially saved; either all reports are saved and this
        /// request succeeds, or no reports are saved, and this request fails.
        pub async fn log_player_reports(
            &mut self,
            request: impl tonic::IntoRequest<super::LogPlayerReportsRequest>,
        ) -> std::result::Result<tonic::Response<super::LogPlayerReportsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.maps.playablelocations.v3.PlayableLocations/LogPlayerReports",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.maps.playablelocations.v3.PlayableLocations",
                "LogPlayerReports",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Logs new events when playable locations are displayed, and when they are
        /// interacted with.
        ///
        /// Impressions are not partially saved; either all impressions are saved and
        /// this request succeeds, or no impressions are saved, and this request fails.
        pub async fn log_impressions(
            &mut self,
            request: impl tonic::IntoRequest<super::LogImpressionsRequest>,
        ) -> std::result::Result<tonic::Response<super::LogImpressionsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.maps.playablelocations.v3.PlayableLocations/LogImpressions",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.maps.playablelocations.v3.PlayableLocations",
                "LogImpressions",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
