// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportConfigsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportConfigsResponse {
#[prost(message, repeated, tag = "1")]
pub report_configs: ::prost::alloc::vec::Vec<ReportConfig>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReportConfigRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReportConfigRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub report_config: ::core::option::Option<ReportConfig>,
#[prost(string, tag = "4")]
pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateReportConfigRequest {
#[prost(message, optional, tag = "1")]
pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
#[prost(message, optional, tag = "2")]
pub report_config: ::core::option::Option<ReportConfig>,
#[prost(string, tag = "3")]
pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteReportConfigRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(bool, tag = "2")]
pub force: bool,
#[prost(string, tag = "3")]
pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportDetail {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub snapshot_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "8")]
pub report_path_prefix: ::prost::alloc::string::String,
#[prost(int64, tag = "9")]
pub shards_count: i64,
#[prost(message, optional, tag = "4")]
pub status: ::core::option::Option<super::super::super::rpc::Status>,
#[prost(btree_map = "string, string", tag = "5")]
pub labels: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(message, optional, tag = "6")]
pub target_datetime: ::core::option::Option<super::super::super::r#type::DateTime>,
#[prost(message, optional, tag = "7")]
pub report_metrics: ::core::option::Option<report_detail::Metrics>,
}
/// Nested message and enum types in `ReportDetail`.
pub mod report_detail {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Metrics {
#[prost(int64, tag = "1")]
pub processed_records_count: i64,
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportDetailsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportDetailsResponse {
#[prost(message, repeated, tag = "1")]
pub report_details: ::prost::alloc::vec::Vec<ReportDetail>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReportDetailRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
#[prost(message, optional, tag = "1")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "2")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "3")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub status_message: ::prost::alloc::string::String,
#[prost(bool, tag = "6")]
pub requested_cancellation: bool,
#[prost(string, tag = "7")]
pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FrequencyOptions {
#[prost(enumeration = "frequency_options::Frequency", tag = "1")]
pub frequency: i32,
#[prost(message, optional, tag = "2")]
pub start_date: ::core::option::Option<super::super::super::r#type::Date>,
#[prost(message, optional, tag = "3")]
pub end_date: ::core::option::Option<super::super::super::r#type::Date>,
}
/// Nested message and enum types in `FrequencyOptions`.
pub mod frequency_options {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Frequency {
Unspecified = 0,
Daily = 1,
Weekly = 2,
}
impl Frequency {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Frequency::Unspecified => "FREQUENCY_UNSPECIFIED",
Frequency::Daily => "DAILY",
Frequency::Weekly => "WEEKLY",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"FREQUENCY_UNSPECIFIED" => Some(Self::Unspecified),
"DAILY" => Some(Self::Daily),
"WEEKLY" => Some(Self::Weekly),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CsvOptions {
#[prost(string, tag = "1")]
pub record_separator: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub delimiter: ::prost::alloc::string::String,
#[prost(bool, tag = "3")]
pub header_required: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ParquetOptions {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudStorageFilters {
#[prost(string, tag = "1")]
pub bucket: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudStorageDestinationOptions {
#[prost(string, tag = "1")]
pub bucket: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub destination_path: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectMetadataReportOptions {
#[prost(string, repeated, tag = "1")]
pub metadata_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(oneof = "object_metadata_report_options::Filter", tags = "2")]
pub filter: ::core::option::Option<object_metadata_report_options::Filter>,
#[prost(oneof = "object_metadata_report_options::DestinationOptions", tags = "3")]
pub destination_options: ::core::option::Option<object_metadata_report_options::DestinationOptions>,
}
/// Nested message and enum types in `ObjectMetadataReportOptions`.
pub mod object_metadata_report_options {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Filter {
#[prost(message, tag = "2")]
StorageFilters(super::CloudStorageFilters),
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum DestinationOptions {
#[prost(message, tag = "3")]
StorageDestinationOptions(super::CloudStorageDestinationOptions),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportConfig {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "5")]
pub frequency_options: ::core::option::Option<FrequencyOptions>,
#[prost(btree_map = "string, string", tag = "10")]
pub labels: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(string, tag = "11")]
pub display_name: ::prost::alloc::string::String,
#[prost(oneof = "report_config::ReportFormat", tags = "6, 7")]
pub report_format: ::core::option::Option<report_config::ReportFormat>,
#[prost(oneof = "report_config::ReportKind", tags = "8")]
pub report_kind: ::core::option::Option<report_config::ReportKind>,
}
/// Nested message and enum types in `ReportConfig`.
pub mod report_config {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum ReportFormat {
#[prost(message, tag = "6")]
CsvOptions(super::CsvOptions),
#[prost(message, tag = "7")]
ParquetOptions(super::ParquetOptions),
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum ReportKind {
#[prost(message, tag = "8")]
ObjectMetadataReportOptions(super::ObjectMetadataReportOptions),
}
}
/// Generated client implementations.
pub mod storage_insights_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// Service describing handlers for resources
#[derive(Debug, Clone)]
pub struct StorageInsightsClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> StorageInsightsClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> StorageInsightsClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
StorageInsightsClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Lists ReportConfigs in a given project and location.
pub async fn list_report_configs(&mut self, request: impl tonic::IntoRequest<super::ListReportConfigsRequest>) -> std::result::Result<tonic::Response<super::ListReportConfigsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.storageinsights.v1.StorageInsights/ListReportConfigs");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.storageinsights.v1.StorageInsights", "ListReportConfigs"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single ReportConfig.
pub async fn get_report_config(&mut self, request: impl tonic::IntoRequest<super::GetReportConfigRequest>) -> std::result::Result<tonic::Response<super::ReportConfig>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.storageinsights.v1.StorageInsights/GetReportConfig");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.storageinsights.v1.StorageInsights", "GetReportConfig"));
self.inner.unary(req, path, codec).await
}
/// Creates a new ReportConfig in a given project and location.
pub async fn create_report_config(&mut self, request: impl tonic::IntoRequest<super::CreateReportConfigRequest>) -> std::result::Result<tonic::Response<super::ReportConfig>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.storageinsights.v1.StorageInsights/CreateReportConfig");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.storageinsights.v1.StorageInsights", "CreateReportConfig"));
self.inner.unary(req, path, codec).await
}
/// Updates the parameters of a single ReportConfig.
pub async fn update_report_config(&mut self, request: impl tonic::IntoRequest<super::UpdateReportConfigRequest>) -> std::result::Result<tonic::Response<super::ReportConfig>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.storageinsights.v1.StorageInsights/UpdateReportConfig");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.storageinsights.v1.StorageInsights", "UpdateReportConfig"));
self.inner.unary(req, path, codec).await
}
/// Deletes a single ReportConfig.
pub async fn delete_report_config(&mut self, request: impl tonic::IntoRequest<super::DeleteReportConfigRequest>) -> std::result::Result<tonic::Response<()>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.storageinsights.v1.StorageInsights/DeleteReportConfig");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.storageinsights.v1.StorageInsights", "DeleteReportConfig"));
self.inner.unary(req, path, codec).await
}
/// Lists ReportDetails in a given project and location.
pub async fn list_report_details(&mut self, request: impl tonic::IntoRequest<super::ListReportDetailsRequest>) -> std::result::Result<tonic::Response<super::ListReportDetailsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.storageinsights.v1.StorageInsights/ListReportDetails");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.storageinsights.v1.StorageInsights", "ListReportDetails"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single ReportDetail.
pub async fn get_report_detail(&mut self, request: impl tonic::IntoRequest<super::GetReportDetailRequest>) -> std::result::Result<tonic::Response<super::ReportDetail>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.storageinsights.v1.StorageInsights/GetReportDetail");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.storageinsights.v1.StorageInsights", "GetReportDetail"));
self.inner.unary(req, path, codec).await
}
}
}
