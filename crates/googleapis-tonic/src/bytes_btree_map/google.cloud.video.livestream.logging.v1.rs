// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChannelActivity {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(oneof = "channel_activity::ActivityType", tags = "2, 3, 4, 5, 6, 7, 8")]
    pub activity_type: ::core::option::Option<channel_activity::ActivityType>,
}
/// Nested message and enum types in `ChannelActivity`.
pub mod channel_activity {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ActivityType {
        #[prost(message, tag = "2")]
        StreamingStateChange(super::StreamingStateChange),
        #[prost(message, tag = "3")]
        StreamingError(super::StreamingError),
        #[prost(message, tag = "4")]
        InputAccept(super::InputAccept),
        #[prost(message, tag = "5")]
        InputError(super::InputError),
        #[prost(message, tag = "6")]
        InputDisconnect(super::InputDisconnect),
        #[prost(message, tag = "7")]
        EventStateChange(super::EventStateChange),
        #[prost(message, tag = "8")]
        Scte35CommandReceived(super::Scte35Command),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StreamingStateChange {
    #[prost(enumeration = "super::super::v1::channel::StreamingState", tag = "1")]
    pub new_state: i32,
    #[prost(enumeration = "super::super::v1::channel::StreamingState", tag = "2")]
    pub previous_state: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamingError {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<super::super::super::super::super::rpc::Status>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputAccept {
    #[prost(string, tag = "1")]
    pub stream_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub input_attachment: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub input_stream_property: ::core::option::Option<InputStreamProperty>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputError {
    #[prost(string, tag = "1")]
    pub stream_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub input_attachment: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub input_stream_property: ::core::option::Option<InputStreamProperty>,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::super::super::super::rpc::Status>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputStreamProperty {
    #[prost(message, repeated, tag = "1")]
    pub video_streams: ::prost::alloc::vec::Vec<VideoStream>,
    #[prost(message, repeated, tag = "2")]
    pub audio_streams: ::prost::alloc::vec::Vec<AudioStream>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoStream {
    #[prost(int32, tag = "1")]
    pub index: i32,
    #[prost(message, optional, tag = "2")]
    pub video_format: ::core::option::Option<VideoFormat>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoFormat {
    #[prost(string, tag = "1")]
    pub codec: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub width_pixels: i32,
    #[prost(int32, tag = "3")]
    pub height_pixels: i32,
    #[prost(double, tag = "4")]
    pub frame_rate: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AudioStream {
    #[prost(int32, tag = "1")]
    pub index: i32,
    #[prost(message, optional, tag = "2")]
    pub audio_format: ::core::option::Option<AudioFormat>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AudioFormat {
    #[prost(string, tag = "1")]
    pub codec: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub channel_count: i32,
    #[prost(string, repeated, tag = "3")]
    pub channel_layout: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputDisconnect {
    #[prost(string, tag = "1")]
    pub stream_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub input_attachment: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventStateChange {
    #[prost(string, tag = "1")]
    pub event_id: ::prost::alloc::string::String,
    #[prost(enumeration = "super::super::v1::event::State", tag = "2")]
    pub new_state: i32,
    #[prost(enumeration = "super::super::v1::event::State", tag = "3")]
    pub previous_state: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Scte35Command {
    #[prost(message, optional, tag = "1")]
    pub splice_info_section: ::core::option::Option<scte35_command::SpliceInfoSection>,
}
/// Nested message and enum types in `Scte35Command`.
pub mod scte35_command {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct SpliceTime {
        #[prost(bool, tag = "1")]
        pub time_specified_flag: bool,
        #[prost(int64, tag = "2")]
        pub pts_time: i64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct BreakDuration {
        #[prost(bool, tag = "1")]
        pub auto_return: bool,
        #[prost(int64, tag = "2")]
        pub duration: i64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Component {
        #[prost(int32, tag = "1")]
        pub component_tag: i32,
        #[prost(message, optional, tag = "2")]
        pub splice_time: ::core::option::Option<SpliceTime>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SpliceInsert {
        #[prost(int32, tag = "1")]
        pub splice_event_id: i32,
        #[prost(bool, tag = "2")]
        pub splice_event_cancel_indicator: bool,
        #[prost(bool, tag = "3")]
        pub out_of_network_indicator: bool,
        #[prost(bool, tag = "4")]
        pub program_splice_flag: bool,
        #[prost(bool, tag = "5")]
        pub duration_flag: bool,
        #[prost(bool, tag = "6")]
        pub splice_immediate_flag: bool,
        #[prost(message, optional, tag = "7")]
        pub splice_time: ::core::option::Option<SpliceTime>,
        #[prost(message, optional, tag = "8")]
        pub break_duration: ::core::option::Option<BreakDuration>,
        #[prost(int32, tag = "9")]
        pub unique_program_id: i32,
        #[prost(int32, tag = "10")]
        pub avail_num: i32,
        #[prost(int32, tag = "11")]
        pub avails_expected: i32,
        #[prost(int32, tag = "12")]
        pub component_count: i32,
        #[prost(message, repeated, tag = "13")]
        pub components: ::prost::alloc::vec::Vec<Component>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SpliceInfoSection {
        #[prost(int64, tag = "1")]
        pub pts_adjustment: i64,
        #[prost(message, optional, tag = "2")]
        pub splice_insert: ::core::option::Option<SpliceInsert>,
    }
}
