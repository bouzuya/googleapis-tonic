// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConnectorService {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "4")]
pub display_name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "6")]
pub ingress: ::core::option::Option<client_connector_service::Ingress>,
#[prost(message, optional, tag = "7")]
pub egress: ::core::option::Option<client_connector_service::Egress>,
#[prost(enumeration = "client_connector_service::State", tag = "8")]
pub state: i32,
}
/// Nested message and enum types in `ClientConnectorService`.
pub mod client_connector_service {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ingress {
#[prost(oneof = "ingress::IngressConfig", tags = "1")]
pub ingress_config: ::core::option::Option<ingress::IngressConfig>,
}
/// Nested message and enum types in `Ingress`.
pub mod ingress {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Config {
#[prost(enumeration = "config::TransportProtocol", tag = "1")]
pub transport_protocol: i32,
#[prost(message, repeated, tag = "2")]
pub destination_routes: ::prost::alloc::vec::Vec<config::DestinationRoute>,
}
/// Nested message and enum types in `Config`.
pub mod config {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestinationRoute {
#[prost(string, tag = "1")]
pub address: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub netmask: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransportProtocol {
Unspecified = 0,
Tcp = 1,
}
impl TransportProtocol {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
TransportProtocol::Unspecified => "TRANSPORT_PROTOCOL_UNSPECIFIED",
TransportProtocol::Tcp => "TCP",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"TRANSPORT_PROTOCOL_UNSPECIFIED" => Some(Self::Unspecified),
"TCP" => Some(Self::Tcp),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum IngressConfig {
#[prost(message, tag = "1")]
Config(Config),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egress {
#[prost(oneof = "egress::DestinationType", tags = "1")]
pub destination_type: ::core::option::Option<egress::DestinationType>,
}
/// Nested message and enum types in `Egress`.
pub mod egress {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PeeredVpc {
#[prost(string, tag = "1")]
pub network_vpc: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum DestinationType {
#[prost(message, tag = "1")]
PeeredVpc(PeeredVpc),
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum State {
Unspecified = 0,
Creating = 1,
Updating = 2,
Deleting = 3,
Running = 4,
Down = 5,
Error = 6,
}
impl State {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
State::Unspecified => "STATE_UNSPECIFIED",
State::Creating => "CREATING",
State::Updating => "UPDATING",
State::Deleting => "DELETING",
State::Running => "RUNNING",
State::Down => "DOWN",
State::Error => "ERROR",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STATE_UNSPECIFIED" => Some(Self::Unspecified),
"CREATING" => Some(Self::Creating),
"UPDATING" => Some(Self::Updating),
"DELETING" => Some(Self::Deleting),
"RUNNING" => Some(Self::Running),
"DOWN" => Some(Self::Down),
"ERROR" => Some(Self::Error),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClientConnectorServicesRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClientConnectorServicesResponse {
#[prost(message, repeated, tag = "1")]
pub client_connector_services: ::prost::alloc::vec::Vec<ClientConnectorService>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClientConnectorServiceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateClientConnectorServiceRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub client_connector_service_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub client_connector_service: ::core::option::Option<ClientConnectorService>,
#[prost(string, tag = "4")]
pub request_id: ::prost::alloc::string::String,
#[prost(bool, tag = "5")]
pub validate_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClientConnectorServiceRequest {
#[prost(message, optional, tag = "1")]
pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
#[prost(message, optional, tag = "2")]
pub client_connector_service: ::core::option::Option<ClientConnectorService>,
#[prost(string, tag = "3")]
pub request_id: ::prost::alloc::string::String,
#[prost(bool, tag = "4")]
pub validate_only: bool,
#[prost(bool, tag = "5")]
pub allow_missing: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteClientConnectorServiceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub request_id: ::prost::alloc::string::String,
#[prost(bool, tag = "3")]
pub validate_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConnectorServiceOperationMetadata {
#[prost(message, optional, tag = "1")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "2")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "3")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub status_message: ::prost::alloc::string::String,
#[prost(bool, tag = "6")]
pub requested_cancellation: bool,
#[prost(string, tag = "7")]
pub api_version: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod client_connector_services_service_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// API Overview:
///
/// The `beyondcorp.googleapis.com` service implements the Google Cloud
/// BeyondCorp API.
///
/// Data Model:
///
/// The ClientConnectorServicesService exposes the following resources:
///
/// * Client Connector Services, named as follows:
///   `projects/{project_id}/locations/{location_id}/client_connector_services/{client_connector_service_id}`.
#[derive(Debug, Clone)]
pub struct ClientConnectorServicesServiceClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> ClientConnectorServicesServiceClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> ClientConnectorServicesServiceClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
ClientConnectorServicesServiceClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Lists ClientConnectorServices in a given project and location.
pub async fn list_client_connector_services(&mut self, request: impl tonic::IntoRequest<super::ListClientConnectorServicesRequest>) -> std::result::Result<tonic::Response<super::ListClientConnectorServicesResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService/ListClientConnectorServices");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService", "ListClientConnectorServices"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single ClientConnectorService.
pub async fn get_client_connector_service(&mut self, request: impl tonic::IntoRequest<super::GetClientConnectorServiceRequest>) -> std::result::Result<tonic::Response<super::ClientConnectorService>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService/GetClientConnectorService");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService", "GetClientConnectorService"));
self.inner.unary(req, path, codec).await
}
/// Creates a new ClientConnectorService in a given project and location.
pub async fn create_client_connector_service(&mut self, request: impl tonic::IntoRequest<super::CreateClientConnectorServiceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService/CreateClientConnectorService");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService", "CreateClientConnectorService"));
self.inner.unary(req, path, codec).await
}
/// Updates the parameters of a single ClientConnectorService.
pub async fn update_client_connector_service(&mut self, request: impl tonic::IntoRequest<super::UpdateClientConnectorServiceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService/UpdateClientConnectorService");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService", "UpdateClientConnectorService"));
self.inner.unary(req, path, codec).await
}
/// Deletes a single ClientConnectorService.
pub async fn delete_client_connector_service(&mut self, request: impl tonic::IntoRequest<super::DeleteClientConnectorServiceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService/DeleteClientConnectorService");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService", "DeleteClientConnectorService"));
self.inner.unary(req, path, codec).await
}
}
}
