// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Actor {
#[prost(string, tag = "1")]
pub display_name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub email: ::prost::alloc::string::String,
#[prost(bool, tag = "4")]
pub google_support: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Case {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub display_name: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub description: ::prost::alloc::string::String,
#[prost(message, optional, tag = "4")]
pub classification: ::core::option::Option<CaseClassification>,
#[prost(string, tag = "8")]
pub time_zone: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "9")]
pub subscriber_email_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(enumeration = "case::State", tag = "12")]
pub state: i32,
#[prost(message, optional, tag = "13")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "14")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "15")]
pub creator: ::core::option::Option<Actor>,
#[prost(string, tag = "35")]
pub contact_email: ::prost::alloc::string::String,
#[prost(bool, tag = "17")]
pub escalated: bool,
#[prost(bool, tag = "19")]
pub test_case: bool,
#[prost(string, tag = "23")]
pub language_code: ::prost::alloc::string::String,
#[prost(enumeration = "case::Priority", tag = "32")]
pub priority: i32,
}
/// Nested message and enum types in `Case`.
pub mod case {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum State {
Unspecified = 0,
New = 1,
InProgressGoogleSupport = 2,
ActionRequired = 3,
SolutionProvided = 4,
Closed = 5,
}
impl State {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
State::Unspecified => "STATE_UNSPECIFIED",
State::New => "NEW",
State::InProgressGoogleSupport => "IN_PROGRESS_GOOGLE_SUPPORT",
State::ActionRequired => "ACTION_REQUIRED",
State::SolutionProvided => "SOLUTION_PROVIDED",
State::Closed => "CLOSED",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STATE_UNSPECIFIED" => Some(Self::Unspecified),
"NEW" => Some(Self::New),
"IN_PROGRESS_GOOGLE_SUPPORT" => Some(Self::InProgressGoogleSupport),
"ACTION_REQUIRED" => Some(Self::ActionRequired),
"SOLUTION_PROVIDED" => Some(Self::SolutionProvided),
"CLOSED" => Some(Self::Closed),
_ => None,
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Priority {
Unspecified = 0,
P0 = 1,
P1 = 2,
P2 = 3,
P3 = 4,
P4 = 5,
}
impl Priority {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Priority::Unspecified => "PRIORITY_UNSPECIFIED",
Priority::P0 => "P0",
Priority::P1 => "P1",
Priority::P2 => "P2",
Priority::P3 => "P3",
Priority::P4 => "P4",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"PRIORITY_UNSPECIFIED" => Some(Self::Unspecified),
"P0" => Some(Self::P0),
"P1" => Some(Self::P1),
"P2" => Some(Self::P2),
"P3" => Some(Self::P3),
"P4" => Some(Self::P4),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CaseClassification {
#[prost(string, tag = "3")]
pub id: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub display_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Escalation {
#[prost(enumeration = "escalation::Reason", tag = "4")]
pub reason: i32,
#[prost(string, tag = "5")]
pub justification: ::prost::alloc::string::String,
}
/// Nested message and enum types in `Escalation`.
pub mod escalation {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Reason {
Unspecified = 0,
ResolutionTime = 1,
TechnicalExpertise = 2,
BusinessImpact = 3,
}
impl Reason {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Reason::Unspecified => "REASON_UNSPECIFIED",
Reason::ResolutionTime => "RESOLUTION_TIME",
Reason::TechnicalExpertise => "TECHNICAL_EXPERTISE",
Reason::BusinessImpact => "BUSINESS_IMPACT",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"REASON_UNSPECIFIED" => Some(Self::Unspecified),
"RESOLUTION_TIME" => Some(Self::ResolutionTime),
"TECHNICAL_EXPERTISE" => Some(Self::TechnicalExpertise),
"BUSINESS_IMPACT" => Some(Self::BusinessImpact),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCaseRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCaseRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub case: ::core::option::Option<Case>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCasesRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub filter: ::prost::alloc::string::String,
#[prost(int32, tag = "4")]
pub page_size: i32,
#[prost(string, tag = "5")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCasesResponse {
#[prost(message, repeated, tag = "1")]
pub cases: ::prost::alloc::vec::Vec<Case>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCasesRequest {
#[prost(string, tag = "4")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "1")]
pub query: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCasesResponse {
#[prost(message, repeated, tag = "1")]
pub cases: ::prost::alloc::vec::Vec<Case>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EscalateCaseRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub escalation: ::core::option::Option<Escalation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateCaseRequest {
#[prost(message, optional, tag = "1")]
pub case: ::core::option::Option<Case>,
#[prost(message, optional, tag = "2")]
pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloseCaseRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCaseClassificationsRequest {
#[prost(string, tag = "1")]
pub query: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCaseClassificationsResponse {
#[prost(message, repeated, tag = "1")]
pub case_classifications: ::prost::alloc::vec::Vec<CaseClassification>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod case_service_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// A service to manage Google Cloud support cases.
#[derive(Debug, Clone)]
pub struct CaseServiceClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> CaseServiceClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> CaseServiceClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
CaseServiceClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Retrieve the specified case.
pub async fn get_case(&mut self, request: impl tonic::IntoRequest<super::GetCaseRequest>) -> std::result::Result<tonic::Response<super::Case>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/GetCase");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "GetCase"));
self.inner.unary(req, path, codec).await
}
/// Retrieve all cases under the specified parent.
///
/// Note: Listing cases under an Organization returns only the cases directly
/// parented by that organization. To retrieve all cases under an organization,
/// including cases parented by projects under that organization, use
/// `cases.search`.
pub async fn list_cases(&mut self, request: impl tonic::IntoRequest<super::ListCasesRequest>) -> std::result::Result<tonic::Response<super::ListCasesResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/ListCases");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "ListCases"));
self.inner.unary(req, path, codec).await
}
/// Search cases using the specified query.
pub async fn search_cases(&mut self, request: impl tonic::IntoRequest<super::SearchCasesRequest>) -> std::result::Result<tonic::Response<super::SearchCasesResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/SearchCases");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "SearchCases"));
self.inner.unary(req, path, codec).await
}
/// Create a new case and associate it with the given Google Cloud Resource.
/// The case object must have the following fields set: `display_name`,
/// `description`, `classification`, and `priority`.
pub async fn create_case(&mut self, request: impl tonic::IntoRequest<super::CreateCaseRequest>) -> std::result::Result<tonic::Response<super::Case>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/CreateCase");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "CreateCase"));
self.inner.unary(req, path, codec).await
}
/// Update the specified case. Only a subset of fields can be updated.
pub async fn update_case(&mut self, request: impl tonic::IntoRequest<super::UpdateCaseRequest>) -> std::result::Result<tonic::Response<super::Case>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/UpdateCase");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "UpdateCase"));
self.inner.unary(req, path, codec).await
}
/// Escalate a case. Escalating a case will initiate the Google Cloud Support
/// escalation management process.
///
/// This operation is only available to certain Customer Care tiers. Go to
/// https://cloud.google.com/support and look for 'Technical support
/// escalations' in the feature list to find out which tiers are able to
/// perform escalations.
pub async fn escalate_case(&mut self, request: impl tonic::IntoRequest<super::EscalateCaseRequest>) -> std::result::Result<tonic::Response<super::Case>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/EscalateCase");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "EscalateCase"));
self.inner.unary(req, path, codec).await
}
/// Close the specified case.
pub async fn close_case(&mut self, request: impl tonic::IntoRequest<super::CloseCaseRequest>) -> std::result::Result<tonic::Response<super::Case>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/CloseCase");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "CloseCase"));
self.inner.unary(req, path, codec).await
}
/// Retrieve valid classifications to be used when creating a support case.
/// The classications are hierarchical, with each classification containing
/// all levels of the hierarchy, separated by " > ". For example "Technical
/// Issue > Compute > Compute Engine".
pub async fn search_case_classifications(&mut self, request: impl tonic::IntoRequest<super::SearchCaseClassificationsRequest>) -> std::result::Result<tonic::Response<super::SearchCaseClassificationsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseService/SearchCaseClassifications");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseService", "SearchCaseClassifications"));
self.inner.unary(req, path, codec).await
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Attachment {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub creator: ::core::option::Option<Actor>,
#[prost(string, tag = "4")]
pub filename: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub mime_type: ::prost::alloc::string::String,
#[prost(int64, tag = "6")]
pub size_bytes: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAttachmentsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAttachmentsResponse {
#[prost(message, repeated, tag = "1")]
pub attachments: ::prost::alloc::vec::Vec<Attachment>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod case_attachment_service_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// A service to manage file attachment for Google Cloud support cases.
#[derive(Debug, Clone)]
pub struct CaseAttachmentServiceClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> CaseAttachmentServiceClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> CaseAttachmentServiceClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
CaseAttachmentServiceClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Retrieve all attachments associated with a support case.
pub async fn list_attachments(&mut self, request: impl tonic::IntoRequest<super::ListAttachmentsRequest>) -> std::result::Result<tonic::Response<super::ListAttachmentsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CaseAttachmentService/ListAttachments");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CaseAttachmentService", "ListAttachments"));
self.inner.unary(req, path, codec).await
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Comment {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub creator: ::core::option::Option<Actor>,
#[prost(string, tag = "4")]
pub body: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub plain_text_body: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCommentsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "4")]
pub page_size: i32,
#[prost(string, tag = "5")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCommentsResponse {
#[prost(message, repeated, tag = "1")]
pub comments: ::prost::alloc::vec::Vec<Comment>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCommentRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub comment: ::core::option::Option<Comment>,
}
/// Generated client implementations.
pub mod comment_service_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// A service to manage comments on cases.
#[derive(Debug, Clone)]
pub struct CommentServiceClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> CommentServiceClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> CommentServiceClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
CommentServiceClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Retrieve all Comments associated with the Case object.
pub async fn list_comments(&mut self, request: impl tonic::IntoRequest<super::ListCommentsRequest>) -> std::result::Result<tonic::Response<super::ListCommentsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CommentService/ListComments");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CommentService", "ListComments"));
self.inner.unary(req, path, codec).await
}
/// Add a new comment to the specified Case.
/// The comment object must have the following fields set: body.
pub async fn create_comment(&mut self, request: impl tonic::IntoRequest<super::CreateCommentRequest>) -> std::result::Result<tonic::Response<super::Comment>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.support.v2.CommentService/CreateComment");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.support.v2.CommentService", "CreateComment"));
self.inner.unary(req, path, codec).await
}
}
}
