// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrafficDirectorLogEntry {
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub node_ip: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    #[prost(enumeration = "traffic_director_log_entry::ClientType", tag = "5")]
    pub client_type: i32,
    #[prost(string, tag = "6")]
    pub client_version: ::prost::alloc::string::String,
    #[prost(
        enumeration = "traffic_director_log_entry::TransportApiVersion",
        tag = "7"
    )]
    pub transport_api_version: i32,
}
/// Nested message and enum types in `TrafficDirectorLogEntry`.
pub mod traffic_director_log_entry {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum ClientType {
        Unspecified = 0,
        Envoy = 1,
        GrpcJava = 2,
        GrpcCpp = 3,
        GrpcPython = 4,
        GrpcGo = 5,
        GrpcRuby = 6,
        GrpcPhp = 7,
        GrpcNode = 8,
        GrpcCsharp = 9,
        Unknown = 10,
    }
    impl ClientType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ClientType::Unspecified => "CLIENT_TYPE_UNSPECIFIED",
                ClientType::Envoy => "ENVOY",
                ClientType::GrpcJava => "GRPC_JAVA",
                ClientType::GrpcCpp => "GRPC_CPP",
                ClientType::GrpcPython => "GRPC_PYTHON",
                ClientType::GrpcGo => "GRPC_GO",
                ClientType::GrpcRuby => "GRPC_RUBY",
                ClientType::GrpcPhp => "GRPC_PHP",
                ClientType::GrpcNode => "GRPC_NODE",
                ClientType::GrpcCsharp => "GRPC_CSHARP",
                ClientType::Unknown => "UNKNOWN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CLIENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "ENVOY" => Some(Self::Envoy),
                "GRPC_JAVA" => Some(Self::GrpcJava),
                "GRPC_CPP" => Some(Self::GrpcCpp),
                "GRPC_PYTHON" => Some(Self::GrpcPython),
                "GRPC_GO" => Some(Self::GrpcGo),
                "GRPC_RUBY" => Some(Self::GrpcRuby),
                "GRPC_PHP" => Some(Self::GrpcPhp),
                "GRPC_NODE" => Some(Self::GrpcNode),
                "GRPC_CSHARP" => Some(Self::GrpcCsharp),
                "UNKNOWN" => Some(Self::Unknown),
                _ => None,
            }
        }
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum TransportApiVersion {
        Unspecified = 0,
        V2 = 1,
        V3 = 2,
    }
    impl TransportApiVersion {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                TransportApiVersion::Unspecified => "TRANSPORT_API_VERSION_UNSPECIFIED",
                TransportApiVersion::V2 => "V2",
                TransportApiVersion::V3 => "V3",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TRANSPORT_API_VERSION_UNSPECIFIED" => Some(Self::Unspecified),
                "V2" => Some(Self::V2),
                "V3" => Some(Self::V3),
                _ => None,
            }
        }
    }
}
