// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkConfig {
#[prost(string, tag = "1")]
pub network: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub ip_allocation: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Version {
#[prost(string, tag = "1")]
pub version_number: ::prost::alloc::string::String,
#[prost(bool, tag = "2")]
pub default_version: bool,
#[prost(string, repeated, tag = "3")]
pub available_features: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(enumeration = "version::Type", tag = "4")]
pub r#type: i32,
}
/// Nested message and enum types in `Version`.
pub mod version {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
Unspecified = 0,
Preview = 1,
GeneralAvailability = 2,
}
impl Type {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Type::Unspecified => "TYPE_UNSPECIFIED",
Type::Preview => "TYPE_PREVIEW",
Type::GeneralAvailability => "TYPE_GENERAL_AVAILABILITY",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"TYPE_PREVIEW" => Some(Self::Preview),
"TYPE_GENERAL_AVAILABILITY" => Some(Self::GeneralAvailability),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Accelerator {
#[prost(enumeration = "accelerator::AcceleratorType", tag = "1")]
pub accelerator_type: i32,
}
/// Nested message and enum types in `Accelerator`.
pub mod accelerator {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AcceleratorType {
Unspecified = 0,
Cdc = 1,
Healthcare = 2,
}
impl AcceleratorType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
AcceleratorType::Unspecified => "ACCELERATOR_TYPE_UNSPECIFIED",
AcceleratorType::Cdc => "CDC",
AcceleratorType::Healthcare => "HEALTHCARE",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"ACCELERATOR_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"CDC" => Some(Self::Cdc),
"HEALTHCARE" => Some(Self::Healthcare),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CryptoKeyConfig {
#[prost(string, tag = "1")]
pub key_reference: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub description: ::prost::alloc::string::String,
#[prost(enumeration = "instance::Type", tag = "3")]
pub r#type: i32,
#[prost(bool, tag = "4")]
pub enable_stackdriver_logging: bool,
#[prost(bool, tag = "5")]
pub enable_stackdriver_monitoring: bool,
#[prost(bool, tag = "6")]
pub private_instance: bool,
#[prost(message, optional, tag = "7")]
pub network_config: ::core::option::Option<NetworkConfig>,
#[prost(btree_map = "string, string", tag = "8")]
pub labels: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(btree_map = "string, string", tag = "9")]
pub options: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(message, optional, tag = "10")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "11")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(enumeration = "instance::State", tag = "12")]
pub state: i32,
#[prost(string, tag = "13")]
pub state_message: ::prost::alloc::string::String,
#[prost(string, tag = "14")]
pub service_endpoint: ::prost::alloc::string::String,
#[prost(string, tag = "15")]
pub zone: ::prost::alloc::string::String,
#[prost(string, tag = "16")]
pub version: ::prost::alloc::string::String,
#[deprecated]
#[prost(string, tag = "17")]
pub service_account: ::prost::alloc::string::String,
#[prost(string, tag = "18")]
pub display_name: ::prost::alloc::string::String,
#[prost(message, repeated, tag = "19")]
pub available_version: ::prost::alloc::vec::Vec<Version>,
#[prost(string, tag = "20")]
pub api_endpoint: ::prost::alloc::string::String,
#[prost(string, tag = "21")]
pub gcs_bucket: ::prost::alloc::string::String,
#[prost(message, repeated, tag = "22")]
pub accelerators: ::prost::alloc::vec::Vec<Accelerator>,
#[prost(string, tag = "23")]
pub p4_service_account: ::prost::alloc::string::String,
#[prost(string, tag = "24")]
pub tenant_project_id: ::prost::alloc::string::String,
#[prost(string, tag = "25")]
pub dataproc_service_account: ::prost::alloc::string::String,
#[prost(bool, tag = "26")]
pub enable_rbac: bool,
#[prost(message, optional, tag = "27")]
pub crypto_key_config: ::core::option::Option<CryptoKeyConfig>,
#[prost(enumeration = "instance::DisabledReason", repeated, packed = "false", tag = "28")]
pub disabled_reason: ::prost::alloc::vec::Vec<i32>,
}
/// Nested message and enum types in `Instance`.
pub mod instance {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
Unspecified = 0,
Basic = 1,
Enterprise = 2,
Developer = 3,
}
impl Type {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Type::Unspecified => "TYPE_UNSPECIFIED",
Type::Basic => "BASIC",
Type::Enterprise => "ENTERPRISE",
Type::Developer => "DEVELOPER",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"BASIC" => Some(Self::Basic),
"ENTERPRISE" => Some(Self::Enterprise),
"DEVELOPER" => Some(Self::Developer),
_ => None,
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum State {
Unspecified = 0,
Creating = 1,
Running = 2,
Failed = 3,
Deleting = 4,
Upgrading = 5,
Restarting = 6,
Updating = 7,
AutoUpdating = 8,
AutoUpgrading = 9,
Disabled = 10,
}
impl State {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
State::Unspecified => "STATE_UNSPECIFIED",
State::Creating => "CREATING",
State::Running => "RUNNING",
State::Failed => "FAILED",
State::Deleting => "DELETING",
State::Upgrading => "UPGRADING",
State::Restarting => "RESTARTING",
State::Updating => "UPDATING",
State::AutoUpdating => "AUTO_UPDATING",
State::AutoUpgrading => "AUTO_UPGRADING",
State::Disabled => "DISABLED",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STATE_UNSPECIFIED" => Some(Self::Unspecified),
"CREATING" => Some(Self::Creating),
"RUNNING" => Some(Self::Running),
"FAILED" => Some(Self::Failed),
"DELETING" => Some(Self::Deleting),
"UPGRADING" => Some(Self::Upgrading),
"RESTARTING" => Some(Self::Restarting),
"UPDATING" => Some(Self::Updating),
"AUTO_UPDATING" => Some(Self::AutoUpdating),
"AUTO_UPGRADING" => Some(Self::AutoUpgrading),
"DISABLED" => Some(Self::Disabled),
_ => None,
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DisabledReason {
Unspecified = 0,
KmsKeyIssue = 1,
}
impl DisabledReason {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
DisabledReason::Unspecified => "DISABLED_REASON_UNSPECIFIED",
DisabledReason::KmsKeyIssue => "KMS_KEY_ISSUE",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"DISABLED_REASON_UNSPECIFIED" => Some(Self::Unspecified),
"KMS_KEY_ISSUE" => Some(Self::KmsKeyIssue),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesResponse {
#[prost(message, repeated, tag = "1")]
pub instances: ::prost::alloc::vec::Vec<Instance>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAvailableVersionsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(bool, tag = "4")]
pub latest_patch_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAvailableVersionsResponse {
#[prost(message, repeated, tag = "1")]
pub available_versions: ::prost::alloc::vec::Vec<Version>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstanceRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub instance_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub instance: ::core::option::Option<Instance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateInstanceRequest {
#[prost(message, optional, tag = "1")]
pub instance: ::core::option::Option<Instance>,
#[prost(message, optional, tag = "2")]
pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestartInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpgradeInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
#[prost(message, optional, tag = "1")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "2")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "3")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub status_detail: ::prost::alloc::string::String,
#[prost(bool, tag = "6")]
pub requested_cancellation: bool,
#[prost(string, tag = "7")]
pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveIamPolicyRequest {
#[prost(string, tag = "1")]
pub resource: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveIamPolicyResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNamespacesRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(enumeration = "NamespaceView", tag = "4")]
pub view: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IamPolicy {
#[prost(message, optional, tag = "1")]
pub policy: ::core::option::Option<super::super::super::iam::v1::Policy>,
#[prost(message, optional, tag = "2")]
pub status: ::core::option::Option<super::super::super::rpc::Status>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Namespace {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub iam_policy: ::core::option::Option<IamPolicy>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNamespacesResponse {
#[prost(message, repeated, tag = "1")]
pub namespaces: ::prost::alloc::vec::Vec<Namespace>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DnsPeering {
#[prost(string, tag = "1")]
pub zone: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub domain: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub description: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub target_project: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub target_network: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddDnsPeeringRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub dns_peering: ::core::option::Option<DnsPeering>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddDnsPeeringResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveDnsPeeringRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub zone: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveDnsPeeringResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDnsPeeringsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDnsPeeringsResponse {
#[prost(message, repeated, tag = "1")]
pub dns_peerings: ::prost::alloc::vec::Vec<DnsPeering>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NamespaceView {
Unspecified = 0,
Basic = 1,
Full = 2,
}
impl NamespaceView {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
NamespaceView::Unspecified => "NAMESPACE_VIEW_UNSPECIFIED",
NamespaceView::Basic => "NAMESPACE_VIEW_BASIC",
NamespaceView::Full => "NAMESPACE_VIEW_FULL",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"NAMESPACE_VIEW_UNSPECIFIED" => Some(Self::Unspecified),
"NAMESPACE_VIEW_BASIC" => Some(Self::Basic),
"NAMESPACE_VIEW_FULL" => Some(Self::Full),
_ => None,
}
}
}
/// Generated client implementations.
pub mod data_fusion_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// Service for creating and managing Data Fusion instances.
/// Data Fusion enables ETL developers to build code-free, data integration
/// pipelines via a point-and-click UI.
#[derive(Debug, Clone)]
pub struct DataFusionClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> DataFusionClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> DataFusionClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
DataFusionClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Lists possible versions for Data Fusion instances in the specified project
/// and location.
pub async fn list_available_versions(&mut self, request: impl tonic::IntoRequest<super::ListAvailableVersionsRequest>) -> std::result::Result<tonic::Response<super::ListAvailableVersionsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/ListAvailableVersions");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "ListAvailableVersions"));
self.inner.unary(req, path, codec).await
}
/// Lists Data Fusion instances in the specified project and location.
pub async fn list_instances(&mut self, request: impl tonic::IntoRequest<super::ListInstancesRequest>) -> std::result::Result<tonic::Response<super::ListInstancesResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/ListInstances");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "ListInstances"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single Data Fusion instance.
pub async fn get_instance(&mut self, request: impl tonic::IntoRequest<super::GetInstanceRequest>) -> std::result::Result<tonic::Response<super::Instance>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/GetInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "GetInstance"));
self.inner.unary(req, path, codec).await
}
/// Creates a new Data Fusion instance in the specified project and location.
pub async fn create_instance(&mut self, request: impl tonic::IntoRequest<super::CreateInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/CreateInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "CreateInstance"));
self.inner.unary(req, path, codec).await
}
/// Deletes a single Data Fusion instance.
pub async fn delete_instance(&mut self, request: impl tonic::IntoRequest<super::DeleteInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/DeleteInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "DeleteInstance"));
self.inner.unary(req, path, codec).await
}
/// Updates a single Data Fusion instance.
pub async fn update_instance(&mut self, request: impl tonic::IntoRequest<super::UpdateInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/UpdateInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "UpdateInstance"));
self.inner.unary(req, path, codec).await
}
/// Restart a single Data Fusion instance.
/// At the end of an operation instance is fully restarted.
pub async fn restart_instance(&mut self, request: impl tonic::IntoRequest<super::RestartInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/RestartInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "RestartInstance"));
self.inner.unary(req, path, codec).await
}
/// Upgrade a single Data Fusion instance.
/// At the end of an operation instance is fully upgraded.
pub async fn upgrade_instance(&mut self, request: impl tonic::IntoRequest<super::UpgradeInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/UpgradeInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "UpgradeInstance"));
self.inner.unary(req, path, codec).await
}
/// Remove IAM policy that is currently set on the given resource.
pub async fn remove_iam_policy(&mut self, request: impl tonic::IntoRequest<super::RemoveIamPolicyRequest>) -> std::result::Result<tonic::Response<super::RemoveIamPolicyResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/RemoveIamPolicy");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "RemoveIamPolicy"));
self.inner.unary(req, path, codec).await
}
/// List namespaces in a given instance
pub async fn list_namespaces(&mut self, request: impl tonic::IntoRequest<super::ListNamespacesRequest>) -> std::result::Result<tonic::Response<super::ListNamespacesResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/ListNamespaces");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "ListNamespaces"));
self.inner.unary(req, path, codec).await
}
/// Add DNS peering on the given resource.
pub async fn add_dns_peering(&mut self, request: impl tonic::IntoRequest<super::AddDnsPeeringRequest>) -> std::result::Result<tonic::Response<super::AddDnsPeeringResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/AddDnsPeering");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "AddDnsPeering"));
self.inner.unary(req, path, codec).await
}
/// Remove DNS peering on the given resource.
pub async fn remove_dns_peering(&mut self, request: impl tonic::IntoRequest<super::RemoveDnsPeeringRequest>) -> std::result::Result<tonic::Response<super::RemoveDnsPeeringResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/RemoveDnsPeering");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "RemoveDnsPeering"));
self.inner.unary(req, path, codec).await
}
/// List DNS peering for a given resource.
pub async fn list_dns_peerings(&mut self, request: impl tonic::IntoRequest<super::ListDnsPeeringsRequest>) -> std::result::Result<tonic::Response<super::ListDnsPeeringsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.datafusion.v1beta1.DataFusion/ListDnsPeerings");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.datafusion.v1beta1.DataFusion", "ListDnsPeerings"));
self.inner.unary(req, path, codec).await
}
}
}
