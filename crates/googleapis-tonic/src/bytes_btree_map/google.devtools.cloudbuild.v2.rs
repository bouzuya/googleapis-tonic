// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunWorkflowCustomOperationMetadata {
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "3")]
    pub verb: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub requested_cancellation: bool,
    #[prost(string, tag = "5")]
    pub api_version: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub target: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub pipeline_run_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connection {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "4")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "12")]
    pub installation_state: ::core::option::Option<InstallationState>,
    #[prost(bool, tag = "13")]
    pub disabled: bool,
    #[prost(bool, tag = "14")]
    pub reconciling: bool,
    #[prost(btree_map = "string, string", tag = "15")]
    pub annotations: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "16")]
    pub etag: ::prost::alloc::string::String,
    #[prost(oneof = "connection::ConnectionConfig", tags = "5, 6, 7, 8, 9")]
    pub connection_config: ::core::option::Option<connection::ConnectionConfig>,
}
/// Nested message and enum types in `Connection`.
pub mod connection {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConnectionConfig {
        #[prost(message, tag = "5")]
        GithubConfig(super::GitHubConfig),
        #[prost(message, tag = "6")]
        GithubEnterpriseConfig(super::GitHubEnterpriseConfig),
        #[prost(message, tag = "7")]
        GitlabConfig(super::GitLabConfig),
        #[prost(message, tag = "8")]
        BitbucketDataCenterConfig(super::BitbucketDataCenterConfig),
        #[prost(message, tag = "9")]
        BitbucketCloudConfig(super::BitbucketCloudConfig),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallationState {
    #[prost(enumeration = "installation_state::Stage", tag = "1")]
    pub stage: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub action_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `InstallationState`.
pub mod installation_state {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Stage {
        Unspecified = 0,
        PendingCreateApp = 1,
        PendingUserOauth = 2,
        PendingInstallApp = 3,
        Complete = 10,
    }
    impl Stage {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Stage::Unspecified => "STAGE_UNSPECIFIED",
                Stage::PendingCreateApp => "PENDING_CREATE_APP",
                Stage::PendingUserOauth => "PENDING_USER_OAUTH",
                Stage::PendingInstallApp => "PENDING_INSTALL_APP",
                Stage::Complete => "COMPLETE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STAGE_UNSPECIFIED" => Some(Self::Unspecified),
                "PENDING_CREATE_APP" => Some(Self::PendingCreateApp),
                "PENDING_USER_OAUTH" => Some(Self::PendingUserOauth),
                "PENDING_INSTALL_APP" => Some(Self::PendingInstallApp),
                "COMPLETE" => Some(Self::Complete),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchLinkableRepositoriesRequest {
    #[prost(string, tag = "1")]
    pub connection: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchLinkableRepositoriesResponse {
    #[prost(message, repeated, tag = "1")]
    pub repositories: ::prost::alloc::vec::Vec<Repository>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitHubConfig {
    #[prost(message, optional, tag = "1")]
    pub authorizer_credential: ::core::option::Option<OAuthCredential>,
    #[prost(int64, tag = "2")]
    pub app_installation_id: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitHubEnterpriseConfig {
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub api_key: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub app_id: i64,
    #[prost(string, tag = "13")]
    pub app_slug: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub private_key_secret_version: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    #[prost(int64, tag = "9")]
    pub app_installation_id: i64,
    #[prost(message, optional, tag = "10")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    #[prost(string, tag = "11")]
    pub ssl_ca: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub server_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitLabConfig {
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
    #[prost(message, optional, tag = "5")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    #[prost(string, tag = "6")]
    pub ssl_ca: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub server_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BitbucketDataCenterConfig {
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
    #[prost(message, optional, tag = "5")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    #[prost(string, tag = "6")]
    pub ssl_ca: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub server_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BitbucketCloudConfig {
    #[prost(string, tag = "1")]
    pub workspace: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceDirectoryConfig {
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Repository {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub remote_uri: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(btree_map = "string, string", tag = "6")]
    pub annotations: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "7")]
    pub etag: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub webhook_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OAuthCredential {
    #[prost(string, tag = "1")]
    pub oauth_token_secret_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserCredential {
    #[prost(string, tag = "1")]
    pub user_token_secret_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConnectionRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub connection: ::core::option::Option<Connection>,
    #[prost(string, tag = "3")]
    pub connection_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConnectionRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub connections: ::prost::alloc::vec::Vec<Connection>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConnectionRequest {
    #[prost(message, optional, tag = "1")]
    pub connection: ::core::option::Option<Connection>,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(bool, tag = "3")]
    pub allow_missing: bool,
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteConnectionRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub etag: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRepositoryRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub repository: ::core::option::Option<Repository>,
    #[prost(string, tag = "3")]
    pub repository_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateRepositoriesRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<CreateRepositoryRequest>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateRepositoriesResponse {
    #[prost(message, repeated, tag = "1")]
    pub repositories: ::prost::alloc::vec::Vec<Repository>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRepositoryRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRepositoriesRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRepositoriesResponse {
    #[prost(message, repeated, tag = "1")]
    pub repositories: ::prost::alloc::vec::Vec<Repository>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRepositoryRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub etag: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadWriteTokenRequest {
    #[prost(string, tag = "1")]
    pub repository: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadTokenRequest {
    #[prost(string, tag = "1")]
    pub repository: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadTokenResponse {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadWriteTokenResponse {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessWebhookRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub body: ::core::option::Option<super::super::super::api::HttpBody>,
    #[prost(string, tag = "3")]
    pub webhook_key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitRefsRequest {
    #[prost(string, tag = "1")]
    pub repository: ::prost::alloc::string::String,
    #[prost(enumeration = "fetch_git_refs_request::RefType", tag = "2")]
    pub ref_type: i32,
}
/// Nested message and enum types in `FetchGitRefsRequest`.
pub mod fetch_git_refs_request {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum RefType {
        Unspecified = 0,
        Tag = 1,
        Branch = 2,
    }
    impl RefType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                RefType::Unspecified => "REF_TYPE_UNSPECIFIED",
                RefType::Tag => "TAG",
                RefType::Branch => "BRANCH",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REF_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "TAG" => Some(Self::Tag),
                "BRANCH" => Some(Self::Branch),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitRefsResponse {
    #[prost(string, repeated, tag = "1")]
    pub ref_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Generated client implementations.
pub mod repository_manager_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Manages connections to source code repositories.
    #[derive(Debug, Clone)]
    pub struct RepositoryManagerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> RepositoryManagerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RepositoryManagerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            RepositoryManagerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Creates a Connection.
        pub async fn create_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/CreateConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "CreateConnection",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single connection.
        pub async fn get_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConnectionRequest>,
        ) -> std::result::Result<tonic::Response<super::Connection>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/GetConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "GetConnection",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Lists Connections in a given project and location.
        pub async fn list_connections(
            &mut self,
            request: impl tonic::IntoRequest<super::ListConnectionsRequest>,
        ) -> std::result::Result<tonic::Response<super::ListConnectionsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/ListConnections",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "ListConnections",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Updates a single connection.
        pub async fn update_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/UpdateConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "UpdateConnection",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single connection.
        pub async fn delete_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/DeleteConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "DeleteConnection",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a Repository.
        pub async fn create_repository(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateRepositoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/CreateRepository",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "CreateRepository",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates multiple repositories inside a connection.
        pub async fn batch_create_repositories(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchCreateRepositoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/BatchCreateRepositories",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "BatchCreateRepositories",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single repository.
        pub async fn get_repository(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRepositoryRequest>,
        ) -> std::result::Result<tonic::Response<super::Repository>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/GetRepository",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "GetRepository",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Lists Repositories in a given connection.
        pub async fn list_repositories(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRepositoriesRequest>,
        ) -> std::result::Result<tonic::Response<super::ListRepositoriesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/ListRepositories",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "ListRepositories",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single repository.
        pub async fn delete_repository(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteRepositoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/DeleteRepository",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "DeleteRepository",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Fetches read/write token of a given repository.
        pub async fn fetch_read_write_token(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchReadWriteTokenRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchReadWriteTokenResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchReadWriteToken",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "FetchReadWriteToken",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Fetches read token of a given repository.
        pub async fn fetch_read_token(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchReadTokenRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchReadTokenResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchReadToken",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "FetchReadToken",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// FetchLinkableRepositories get repositories from SCM that are
        /// accessible and could be added to the connection.
        pub async fn fetch_linkable_repositories(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchLinkableRepositoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchLinkableRepositoriesResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchLinkableRepositories",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "FetchLinkableRepositories",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Fetch the list of branches or tags for a given repository.
        pub async fn fetch_git_refs(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchGitRefsRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchGitRefsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchGitRefs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.devtools.cloudbuild.v2.RepositoryManager",
                "FetchGitRefs",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
