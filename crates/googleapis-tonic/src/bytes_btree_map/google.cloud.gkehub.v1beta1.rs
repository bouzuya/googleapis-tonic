// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Membership {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(btree_map = "string, string", tag = "2")]
    pub labels: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub state: ::core::option::Option<MembershipState>,
    #[prost(message, optional, tag = "9")]
    pub authority: ::core::option::Option<Authority>,
    #[prost(message, optional, tag = "6")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub delete_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "10")]
    pub external_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "11")]
    pub last_connection_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "12")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(enumeration = "membership::InfrastructureType", tag = "13")]
    pub infrastructure_type: i32,
    #[prost(message, optional, tag = "14")]
    pub monitoring_config: ::core::option::Option<MonitoringConfig>,
    #[prost(oneof = "membership::Type", tags = "4")]
    pub r#type: ::core::option::Option<membership::Type>,
}
/// Nested message and enum types in `Membership`.
pub mod membership {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum InfrastructureType {
        Unspecified = 0,
        OnPrem = 1,
        MultiCloud = 2,
    }
    impl InfrastructureType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                InfrastructureType::Unspecified => "INFRASTRUCTURE_TYPE_UNSPECIFIED",
                InfrastructureType::OnPrem => "ON_PREM",
                InfrastructureType::MultiCloud => "MULTI_CLOUD",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INFRASTRUCTURE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "ON_PREM" => Some(Self::OnPrem),
                "MULTI_CLOUD" => Some(Self::MultiCloud),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag = "4")]
        Endpoint(super::MembershipEndpoint),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipEndpoint {
    #[prost(message, optional, tag = "5")]
    pub kubernetes_metadata: ::core::option::Option<KubernetesMetadata>,
    #[prost(message, optional, tag = "6")]
    pub kubernetes_resource: ::core::option::Option<KubernetesResource>,
    #[prost(oneof = "membership_endpoint::Type", tags = "4, 7, 8, 9, 10")]
    pub r#type: ::core::option::Option<membership_endpoint::Type>,
}
/// Nested message and enum types in `MembershipEndpoint`.
pub mod membership_endpoint {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag = "4")]
        GkeCluster(super::GkeCluster),
        #[prost(message, tag = "7")]
        OnPremCluster(super::OnPremCluster),
        #[prost(message, tag = "8")]
        MultiCloudCluster(super::MultiCloudCluster),
        #[prost(message, tag = "9")]
        EdgeCluster(super::EdgeCluster),
        #[prost(message, tag = "10")]
        ApplianceCluster(super::ApplianceCluster),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KubernetesResource {
    #[prost(string, tag = "1")]
    pub membership_cr_manifest: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub membership_resources: ::prost::alloc::vec::Vec<ResourceManifest>,
    #[prost(message, repeated, tag = "3")]
    pub connect_resources: ::prost::alloc::vec::Vec<ResourceManifest>,
    #[prost(message, optional, tag = "4")]
    pub resource_options: ::core::option::Option<ResourceOptions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceOptions {
    #[prost(string, tag = "1")]
    pub connect_version: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub v1beta1_crd: bool,
    #[prost(string, tag = "3")]
    pub k8s_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceManifest {
    #[prost(string, tag = "1")]
    pub manifest: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub cluster_scoped: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GkeCluster {
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub cluster_missing: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OnPremCluster {
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub cluster_missing: bool,
    #[prost(bool, tag = "3")]
    pub admin_cluster: bool,
    #[prost(enumeration = "on_prem_cluster::ClusterType", tag = "4")]
    pub cluster_type: i32,
}
/// Nested message and enum types in `OnPremCluster`.
pub mod on_prem_cluster {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum ClusterType {
        ClustertypeUnspecified = 0,
        Bootstrap = 1,
        Hybrid = 2,
        Standalone = 3,
        User = 4,
    }
    impl ClusterType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ClusterType::ClustertypeUnspecified => "CLUSTERTYPE_UNSPECIFIED",
                ClusterType::Bootstrap => "BOOTSTRAP",
                ClusterType::Hybrid => "HYBRID",
                ClusterType::Standalone => "STANDALONE",
                ClusterType::User => "USER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CLUSTERTYPE_UNSPECIFIED" => Some(Self::ClustertypeUnspecified),
                "BOOTSTRAP" => Some(Self::Bootstrap),
                "HYBRID" => Some(Self::Hybrid),
                "STANDALONE" => Some(Self::Standalone),
                "USER" => Some(Self::User),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiCloudCluster {
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub cluster_missing: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EdgeCluster {
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplianceCluster {
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KubernetesMetadata {
    #[prost(string, tag = "1")]
    pub kubernetes_api_server_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub node_provider_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub node_count: i32,
    #[prost(int32, tag = "4")]
    pub vcpu_count: i32,
    #[prost(int32, tag = "5")]
    pub memory_mb: i32,
    #[prost(message, optional, tag = "100")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Authority {
    #[prost(string, tag = "1")]
    pub issuer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub workload_identity_pool: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub identity_provider: ::prost::alloc::string::String,
    #[prost(bytes = "bytes", tag = "4")]
    pub oidc_jwks: ::prost::bytes::Bytes,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonitoringConfig {
    #[prost(string, tag = "1")]
    pub project_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub location: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub cluster: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub kubernetes_metrics_prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub cluster_hash: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipState {
    #[prost(enumeration = "membership_state::Code", tag = "1")]
    pub code: i32,
    #[deprecated]
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[deprecated]
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `MembershipState`.
pub mod membership_state {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Code {
        Unspecified = 0,
        Creating = 1,
        Ready = 2,
        Deleting = 3,
        Updating = 4,
        ServiceUpdating = 5,
    }
    impl Code {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Code::Unspecified => "CODE_UNSPECIFIED",
                Code::Creating => "CREATING",
                Code::Ready => "READY",
                Code::Deleting => "DELETING",
                Code::Updating => "UPDATING",
                Code::ServiceUpdating => "SERVICE_UPDATING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CODE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "READY" => Some(Self::Ready),
                "DELETING" => Some(Self::Deleting),
                "UPDATING" => Some(Self::Updating),
                "SERVICE_UPDATING" => Some(Self::ServiceUpdating),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMembershipsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMembershipsResponse {
    #[prost(message, repeated, tag = "1")]
    pub resources: ::prost::alloc::vec::Vec<Membership>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMembershipRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateMembershipRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub membership_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub resource: ::core::option::Option<Membership>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMembershipRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub force: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMembershipRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "3")]
    pub resource: ::core::option::Option<Membership>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateConnectManifestRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub connect_agent: ::core::option::Option<ConnectAgent>,
    #[prost(string, tag = "3")]
    pub version: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub is_upgrade: bool,
    #[prost(string, tag = "5")]
    pub registry: ::prost::alloc::string::String,
    #[prost(bytes = "bytes", tag = "6")]
    pub image_pull_secret_content: ::prost::bytes::Bytes,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateConnectManifestResponse {
    #[prost(message, repeated, tag = "1")]
    pub manifest: ::prost::alloc::vec::Vec<ConnectAgentResource>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectAgentResource {
    #[prost(message, optional, tag = "1")]
    pub r#type: ::core::option::Option<TypeMeta>,
    #[prost(string, tag = "2")]
    pub manifest: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypeMeta {
    #[prost(string, tag = "1")]
    pub kind: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectAgent {
    #[deprecated]
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(bytes = "bytes", tag = "2")]
    pub proxy: ::prost::bytes::Bytes,
    #[prost(string, tag = "3")]
    pub namespace: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateExclusivityRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub cr_manifest: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub intended_membership: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateExclusivityResponse {
    #[prost(message, optional, tag = "1")]
    pub status: ::core::option::Option<super::super::super::rpc::Status>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateExclusivityManifestRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub crd_manifest: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub cr_manifest: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateExclusivityManifestResponse {
    #[prost(string, tag = "1")]
    pub crd_manifest: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub cr_manifest: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub status_detail: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub cancel_requested: bool,
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod gke_hub_membership_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// The GKE Hub MembershipService handles the registration of many Kubernetes
    /// clusters to Google Cloud, represented with the
    /// [Membership][google.cloud.gkehub.v1beta1.Membership] resource.
    ///
    /// GKE Hub is currently available in the global region and all regions in
    /// https://cloud.google.com/compute/docs/regions-zones.
    ///
    /// **Membership management may be non-trivial:** it is recommended to use one
    /// of the Google-provided client libraries or tools where possible when working
    /// with Membership resources.
    #[derive(Debug, Clone)]
    pub struct GkeHubMembershipServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> GkeHubMembershipServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GkeHubMembershipServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            GkeHubMembershipServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists Memberships in a given project and location.
        pub async fn list_memberships(
            &mut self,
            request: impl tonic::IntoRequest<super::ListMembershipsRequest>,
        ) -> std::result::Result<tonic::Response<super::ListMembershipsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/ListMemberships",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "ListMemberships",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets the details of a Membership.
        pub async fn get_membership(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMembershipRequest>,
        ) -> std::result::Result<tonic::Response<super::Membership>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/GetMembership",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "GetMembership",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new Membership.
        ///
        /// **This is currently only supported for GKE clusters on Google Cloud**.
        /// To register other clusters, follow the instructions at
        /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
        pub async fn create_membership(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateMembershipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/CreateMembership",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "CreateMembership",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Removes a Membership.
        ///
        /// **This is currently only supported for GKE clusters on Google Cloud**.
        /// To unregister other clusters, follow the instructions at
        /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
        pub async fn delete_membership(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteMembershipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/DeleteMembership",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "DeleteMembership",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Updates an existing Membership.
        pub async fn update_membership(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateMembershipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/UpdateMembership",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "UpdateMembership",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Generates the manifest for deployment of the GKE connect agent.
        ///
        /// **This method is used internally by Google-provided libraries.**
        /// Most clients should not need to call this method directly.
        pub async fn generate_connect_manifest(
            &mut self,
            request: impl tonic::IntoRequest<super::GenerateConnectManifestRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GenerateConnectManifestResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/GenerateConnectManifest",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "GenerateConnectManifest",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// ValidateExclusivity validates the state of exclusivity in the cluster.
        /// The validation does not depend on an existing Hub membership resource.
        pub async fn validate_exclusivity(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateExclusivityRequest>,
        ) -> std::result::Result<tonic::Response<super::ValidateExclusivityResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/ValidateExclusivity",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "ValidateExclusivity",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// GenerateExclusivityManifest generates the manifests to update the
        /// exclusivity artifacts in the cluster if needed.
        ///
        /// Exclusivity artifacts include the Membership custom resource definition
        /// (CRD) and the singleton Membership custom resource (CR). Combined with
        /// ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes
        /// cluster is only registered to a single GKE Hub.
        ///
        /// The Membership CRD is versioned, and may require conversion when the GKE
        /// Hub API server begins serving a newer version of the CRD and
        /// corresponding CR. The response will be the converted CRD and CR if there
        /// are any differences between the versions.
        pub async fn generate_exclusivity_manifest(
            &mut self,
            request: impl tonic::IntoRequest<super::GenerateExclusivityManifestRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GenerateExclusivityManifestResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.gkehub.v1beta1.GkeHubMembershipService/GenerateExclusivityManifest",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.gkehub.v1beta1.GkeHubMembershipService",
                "GenerateExclusivityManifest",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
