// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Violation {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub description: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub begin_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "4")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "5")]
pub resolve_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "6")]
pub category: ::prost::alloc::string::String,
#[prost(enumeration = "violation::State", tag = "7")]
pub state: i32,
#[prost(string, tag = "8")]
pub non_compliant_org_policy: ::prost::alloc::string::String,
#[prost(int64, tag = "9")]
pub folder_id: i64,
#[prost(message, optional, tag = "13")]
pub remediation: ::core::option::Option<violation::Remediation>,
}
/// Nested message and enum types in `Violation`.
pub mod violation {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Remediation {
#[prost(message, optional, tag = "1")]
pub instructions: ::core::option::Option<remediation::Instructions>,
#[prost(string, repeated, tag = "2")]
pub compliant_values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(enumeration = "remediation::RemediationType", tag = "3")]
pub remediation_type: i32,
}
/// Nested message and enum types in `Remediation`.
pub mod remediation {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instructions {
#[prost(message, optional, tag = "1")]
pub gcloud_instructions: ::core::option::Option<instructions::Gcloud>,
#[prost(message, optional, tag = "2")]
pub console_instructions: ::core::option::Option<instructions::Console>,
}
/// Nested message and enum types in `Instructions`.
pub mod instructions {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcloud {
#[prost(string, repeated, tag = "1")]
pub gcloud_commands: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, repeated, tag = "2")]
pub steps: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, repeated, tag = "3")]
pub additional_links: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Console {
#[prost(string, repeated, tag = "1")]
pub console_uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, repeated, tag = "2")]
pub steps: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, repeated, tag = "3")]
pub additional_links: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RemediationType {
Unspecified = 0,
RemediationBooleanOrgPolicyViolation = 1,
RemediationListAllowedValuesOrgPolicyViolation = 2,
RemediationListDeniedValuesOrgPolicyViolation = 3,
RemediationRestrictCmekCryptoKeyProjectsOrgPolicyViolation = 4,
RemediationResourceViolation = 5,
}
impl RemediationType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
RemediationType::Unspecified => "REMEDIATION_TYPE_UNSPECIFIED",
RemediationType::RemediationBooleanOrgPolicyViolation => "REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION",
RemediationType::RemediationListAllowedValuesOrgPolicyViolation => "REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION",
RemediationType::RemediationListDeniedValuesOrgPolicyViolation => "REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION",
RemediationType::RemediationRestrictCmekCryptoKeyProjectsOrgPolicyViolation => "REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION",
RemediationType::RemediationResourceViolation => "REMEDIATION_RESOURCE_VIOLATION",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"REMEDIATION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION" => Some(Self::RemediationBooleanOrgPolicyViolation),
"REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION" => Some(Self::RemediationListAllowedValuesOrgPolicyViolation),
"REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION" => Some(Self::RemediationListDeniedValuesOrgPolicyViolation),
"REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION" => Some(Self::RemediationRestrictCmekCryptoKeyProjectsOrgPolicyViolation),
"REMEDIATION_RESOURCE_VIOLATION" => Some(Self::RemediationResourceViolation),
_ => None,
}
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum State {
Unspecified = 0,
Resolved = 1,
Unresolved = 2,
Exception = 3,
}
impl State {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
State::Unspecified => "STATE_UNSPECIFIED",
State::Resolved => "RESOLVED",
State::Unresolved => "UNRESOLVED",
State::Exception => "EXCEPTION",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STATE_UNSPECIFIED" => Some(Self::Unspecified),
"RESOLVED" => Some(Self::Resolved),
"UNRESOLVED" => Some(Self::Unresolved),
"EXCEPTION" => Some(Self::Exception),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListViolationsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
#[prost(message, optional, tag = "6")]
pub interval: ::core::option::Option<super::super::super::r#type::Interval>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListViolationsResponse {
#[prost(message, repeated, tag = "1")]
pub violations: ::prost::alloc::vec::Vec<Violation>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetViolationRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod cloud_controls_partner_monitoring_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// Service describing handlers for resources
#[derive(Debug, Clone)]
pub struct CloudControlsPartnerMonitoringClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> CloudControlsPartnerMonitoringClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> CloudControlsPartnerMonitoringClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
CloudControlsPartnerMonitoringClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Lists Violations for a workload
/// Callers may also choose to read across multiple Customers or for a single
/// customer as per
/// [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
/// character) as a wildcard character instead of {customer} & {workload}.
/// Format:
/// `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
pub async fn list_violations(&mut self, request: impl tonic::IntoRequest<super::ListViolationsRequest>) -> std::result::Result<tonic::Response<super::ListViolationsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring/ListViolations");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring", "ListViolations"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single Violation.
pub async fn get_violation(&mut self, request: impl tonic::IntoRequest<super::GetViolationRequest>) -> std::result::Result<tonic::Response<super::Violation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring/GetViolation");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring", "GetViolation"));
self.inner.unary(req, path, codec).await
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessApprovalRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub request_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub requested_reason: ::core::option::Option<AccessReason>,
#[prost(message, optional, tag = "4")]
pub requested_expiration_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAccessApprovalRequestsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAccessApprovalRequestsResponse {
#[prost(message, repeated, tag = "1")]
pub access_approval_requests: ::prost::alloc::vec::Vec<AccessApprovalRequest>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessReason {
#[prost(enumeration = "access_reason::Type", tag = "1")]
pub r#type: i32,
#[prost(string, tag = "2")]
pub detail: ::prost::alloc::string::String,
}
/// Nested message and enum types in `AccessReason`.
pub mod access_reason {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
Unspecified = 0,
CustomerInitiatedSupport = 1,
GoogleInitiatedService = 2,
GoogleInitiatedReview = 3,
ThirdPartyDataRequest = 4,
GoogleResponseToProductionAlert = 5,
CloudInitiatedAccess = 6,
}
impl Type {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Type::Unspecified => "TYPE_UNSPECIFIED",
Type::CustomerInitiatedSupport => "CUSTOMER_INITIATED_SUPPORT",
Type::GoogleInitiatedService => "GOOGLE_INITIATED_SERVICE",
Type::GoogleInitiatedReview => "GOOGLE_INITIATED_REVIEW",
Type::ThirdPartyDataRequest => "THIRD_PARTY_DATA_REQUEST",
Type::GoogleResponseToProductionAlert => "GOOGLE_RESPONSE_TO_PRODUCTION_ALERT",
Type::CloudInitiatedAccess => "CLOUD_INITIATED_ACCESS",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"CUSTOMER_INITIATED_SUPPORT" => Some(Self::CustomerInitiatedSupport),
"GOOGLE_INITIATED_SERVICE" => Some(Self::GoogleInitiatedService),
"GOOGLE_INITIATED_REVIEW" => Some(Self::GoogleInitiatedReview),
"THIRD_PARTY_DATA_REQUEST" => Some(Self::ThirdPartyDataRequest),
"GOOGLE_RESPONSE_TO_PRODUCTION_ALERT" => Some(Self::GoogleResponseToProductionAlert),
"CLOUD_INITIATED_ACCESS" => Some(Self::CloudInitiatedAccess),
_ => None,
}
}
}
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CompletionState {
Unspecified = 0,
Pending = 1,
Succeeded = 2,
Failed = 3,
NotApplicable = 4,
}
impl CompletionState {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
CompletionState::Unspecified => "COMPLETION_STATE_UNSPECIFIED",
CompletionState::Pending => "PENDING",
CompletionState::Succeeded => "SUCCEEDED",
CompletionState::Failed => "FAILED",
CompletionState::NotApplicable => "NOT_APPLICABLE",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"COMPLETION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
"PENDING" => Some(Self::Pending),
"SUCCEEDED" => Some(Self::Succeeded),
"FAILED" => Some(Self::Failed),
"NOT_APPLICABLE" => Some(Self::NotApplicable),
_ => None,
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Workload {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(int64, tag = "2")]
pub folder_id: i64,
#[prost(message, optional, tag = "3")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "4")]
pub folder: ::prost::alloc::string::String,
#[prost(message, optional, tag = "5")]
pub workload_onboarding_state: ::core::option::Option<WorkloadOnboardingState>,
#[prost(bool, tag = "6")]
pub is_onboarded: bool,
#[prost(string, tag = "7")]
pub key_management_project_id: ::prost::alloc::string::String,
#[prost(string, tag = "8")]
pub location: ::prost::alloc::string::String,
#[prost(enumeration = "workload::Partner", tag = "9")]
pub partner: i32,
}
/// Nested message and enum types in `Workload`.
pub mod workload {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Partner {
Unspecified = 0,
LocalControlsByS3ns = 1,
SovereignControlsByTSystems = 2,
SovereignControlsBySiaMinsait = 3,
SovereignControlsByPsn = 4,
SovereignControlsByCntxt = 6,
SovereignControlsByCntxtNoEkm = 7,
}
impl Partner {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Partner::Unspecified => "PARTNER_UNSPECIFIED",
Partner::LocalControlsByS3ns => "PARTNER_LOCAL_CONTROLS_BY_S3NS",
Partner::SovereignControlsByTSystems => "PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS",
Partner::SovereignControlsBySiaMinsait => "PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT",
Partner::SovereignControlsByPsn => "PARTNER_SOVEREIGN_CONTROLS_BY_PSN",
Partner::SovereignControlsByCntxt => "PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT",
Partner::SovereignControlsByCntxtNoEkm => "PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"PARTNER_UNSPECIFIED" => Some(Self::Unspecified),
"PARTNER_LOCAL_CONTROLS_BY_S3NS" => Some(Self::LocalControlsByS3ns),
"PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS" => Some(Self::SovereignControlsByTSystems),
"PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT" => Some(Self::SovereignControlsBySiaMinsait),
"PARTNER_SOVEREIGN_CONTROLS_BY_PSN" => Some(Self::SovereignControlsByPsn),
"PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT" => Some(Self::SovereignControlsByCntxt),
"PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM" => Some(Self::SovereignControlsByCntxtNoEkm),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadsRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadsResponse {
#[prost(message, repeated, tag = "1")]
pub workloads: ::prost::alloc::vec::Vec<Workload>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkloadRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkloadOnboardingState {
#[prost(message, repeated, tag = "1")]
pub onboarding_steps: ::prost::alloc::vec::Vec<WorkloadOnboardingStep>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorkloadOnboardingStep {
#[prost(enumeration = "workload_onboarding_step::Step", tag = "1")]
pub step: i32,
#[prost(message, optional, tag = "2")]
pub start_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub completion_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(enumeration = "CompletionState", tag = "4")]
pub completion_state: i32,
}
/// Nested message and enum types in `WorkloadOnboardingStep`.
pub mod workload_onboarding_step {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Step {
Unspecified = 0,
EkmProvisioned = 1,
SignedAccessApprovalConfigured = 2,
}
impl Step {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Step::Unspecified => "STEP_UNSPECIFIED",
Step::EkmProvisioned => "EKM_PROVISIONED",
Step::SignedAccessApprovalConfigured => "SIGNED_ACCESS_APPROVAL_CONFIGURED",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STEP_UNSPECIFIED" => Some(Self::Unspecified),
"EKM_PROVISIONED" => Some(Self::EkmProvisioned),
"SIGNED_ACCESS_APPROVAL_CONFIGURED" => Some(Self::SignedAccessApprovalConfigured),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Customer {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub display_name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub customer_onboarding_state: ::core::option::Option<CustomerOnboardingState>,
#[prost(bool, tag = "4")]
pub is_onboarded: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomersRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomersResponse {
#[prost(message, repeated, tag = "1")]
pub customers: ::prost::alloc::vec::Vec<Customer>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCustomerRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomerOnboardingState {
#[prost(message, repeated, tag = "1")]
pub onboarding_steps: ::prost::alloc::vec::Vec<CustomerOnboardingStep>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomerOnboardingStep {
#[prost(enumeration = "customer_onboarding_step::Step", tag = "1")]
pub step: i32,
#[prost(message, optional, tag = "2")]
pub start_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub completion_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(enumeration = "CompletionState", tag = "4")]
pub completion_state: i32,
}
/// Nested message and enum types in `CustomerOnboardingStep`.
pub mod customer_onboarding_step {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Step {
Unspecified = 0,
KajEnrollment = 1,
CustomerEnvironment = 2,
}
impl Step {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Step::Unspecified => "STEP_UNSPECIFIED",
Step::KajEnrollment => "KAJ_ENROLLMENT",
Step::CustomerEnvironment => "CUSTOMER_ENVIRONMENT",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STEP_UNSPECIFIED" => Some(Self::Unspecified),
"KAJ_ENROLLMENT" => Some(Self::KajEnrollment),
"CUSTOMER_ENVIRONMENT" => Some(Self::CustomerEnvironment),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EkmConnections {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, repeated, tag = "2")]
pub ekm_connections: ::prost::alloc::vec::Vec<EkmConnection>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEkmConnectionsRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EkmConnection {
#[prost(string, tag = "1")]
pub connection_name: ::prost::alloc::string::String,
#[prost(enumeration = "ekm_connection::ConnectionState", tag = "2")]
pub connection_state: i32,
#[prost(message, optional, tag = "3")]
pub connection_error: ::core::option::Option<ekm_connection::ConnectionError>,
}
/// Nested message and enum types in `EkmConnection`.
pub mod ekm_connection {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionError {
#[prost(string, tag = "1")]
pub error_domain: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConnectionState {
Unspecified = 0,
Available = 1,
NotAvailable = 2,
Error = 3,
PermissionDenied = 4,
}
impl ConnectionState {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
ConnectionState::Unspecified => "CONNECTION_STATE_UNSPECIFIED",
ConnectionState::Available => "AVAILABLE",
ConnectionState::NotAvailable => "NOT_AVAILABLE",
ConnectionState::Error => "ERROR",
ConnectionState::PermissionDenied => "PERMISSION_DENIED",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"CONNECTION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
"AVAILABLE" => Some(Self::Available),
"NOT_AVAILABLE" => Some(Self::NotAvailable),
"ERROR" => Some(Self::Error),
"PERMISSION_DENIED" => Some(Self::PermissionDenied),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartnerPermissions {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(enumeration = "partner_permissions::Permission", repeated, tag = "2")]
pub partner_permissions: ::prost::alloc::vec::Vec<i32>,
}
/// Nested message and enum types in `PartnerPermissions`.
pub mod partner_permissions {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Permission {
Unspecified = 0,
AccessTransparencyAndEmergencyAccessLogs = 1,
AssuredWorkloadsMonitoring = 2,
AccessApprovalRequests = 3,
AssuredWorkloadsEkmConnectionStatus = 4,
}
impl Permission {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
Permission::Unspecified => "PERMISSION_UNSPECIFIED",
Permission::AccessTransparencyAndEmergencyAccessLogs => "ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS",
Permission::AssuredWorkloadsMonitoring => "ASSURED_WORKLOADS_MONITORING",
Permission::AccessApprovalRequests => "ACCESS_APPROVAL_REQUESTS",
Permission::AssuredWorkloadsEkmConnectionStatus => "ASSURED_WORKLOADS_EKM_CONNECTION_STATUS",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"PERMISSION_UNSPECIFIED" => Some(Self::Unspecified),
"ACCESS_TRANSPARENCY_AND_EMERGENCY_ACCESS_LOGS" => Some(Self::AccessTransparencyAndEmergencyAccessLogs),
"ASSURED_WORKLOADS_MONITORING" => Some(Self::AssuredWorkloadsMonitoring),
"ACCESS_APPROVAL_REQUESTS" => Some(Self::AccessApprovalRequests),
"ASSURED_WORKLOADS_EKM_CONNECTION_STATUS" => Some(Self::AssuredWorkloadsEkmConnectionStatus),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPartnerPermissionsRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Partner {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(message, repeated, tag = "3")]
pub skus: ::prost::alloc::vec::Vec<Sku>,
#[prost(message, repeated, tag = "4")]
pub ekm_solutions: ::prost::alloc::vec::Vec<EkmMetadata>,
#[prost(string, repeated, tag = "5")]
pub operated_cloud_regions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, tag = "7")]
pub partner_project_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "9")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "10")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPartnerRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sku {
#[prost(string, tag = "1")]
pub id: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub display_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EkmMetadata {
#[prost(enumeration = "ekm_metadata::EkmSolution", tag = "1")]
pub ekm_solution: i32,
#[prost(string, tag = "2")]
pub ekm_endpoint_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `EkmMetadata`.
pub mod ekm_metadata {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EkmSolution {
Unspecified = 0,
Fortanix = 1,
Futurex = 2,
Thales = 3,
Virtru = 4,
}
impl EkmSolution {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
EkmSolution::Unspecified => "EKM_SOLUTION_UNSPECIFIED",
EkmSolution::Fortanix => "FORTANIX",
EkmSolution::Futurex => "FUTUREX",
EkmSolution::Thales => "THALES",
EkmSolution::Virtru => "VIRTRU",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"EKM_SOLUTION_UNSPECIFIED" => Some(Self::Unspecified),
"FORTANIX" => Some(Self::Fortanix),
"FUTUREX" => Some(Self::Futurex),
"THALES" => Some(Self::Thales),
"VIRTRU" => Some(Self::Virtru),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
#[prost(message, optional, tag = "1")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "2")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "3")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub status_message: ::prost::alloc::string::String,
#[prost(bool, tag = "6")]
pub requested_cancellation: bool,
#[prost(string, tag = "7")]
pub api_version: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod cloud_controls_partner_core_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// Service describing handlers for resources
#[derive(Debug, Clone)]
pub struct CloudControlsPartnerCoreClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> CloudControlsPartnerCoreClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> CloudControlsPartnerCoreClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
CloudControlsPartnerCoreClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Gets details of a single workload
pub async fn get_workload(&mut self, request: impl tonic::IntoRequest<super::GetWorkloadRequest>) -> std::result::Result<tonic::Response<super::Workload>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/GetWorkload");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "GetWorkload"));
self.inner.unary(req, path, codec).await
}
/// Lists customer workloads for a given customer org id
pub async fn list_workloads(&mut self, request: impl tonic::IntoRequest<super::ListWorkloadsRequest>) -> std::result::Result<tonic::Response<super::ListWorkloadsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/ListWorkloads");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "ListWorkloads"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single customer
pub async fn get_customer(&mut self, request: impl tonic::IntoRequest<super::GetCustomerRequest>) -> std::result::Result<tonic::Response<super::Customer>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/GetCustomer");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "GetCustomer"));
self.inner.unary(req, path, codec).await
}
/// Lists customers of a partner identified by its Google Cloud organization ID
pub async fn list_customers(&mut self, request: impl tonic::IntoRequest<super::ListCustomersRequest>) -> std::result::Result<tonic::Response<super::ListCustomersResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/ListCustomers");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "ListCustomers"));
self.inner.unary(req, path, codec).await
}
/// Gets the EKM connections associated with a workload
pub async fn get_ekm_connections(&mut self, request: impl tonic::IntoRequest<super::GetEkmConnectionsRequest>) -> std::result::Result<tonic::Response<super::EkmConnections>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/GetEkmConnections");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "GetEkmConnections"));
self.inner.unary(req, path, codec).await
}
/// Gets the partner permissions granted for a workload
pub async fn get_partner_permissions(&mut self, request: impl tonic::IntoRequest<super::GetPartnerPermissionsRequest>) -> std::result::Result<tonic::Response<super::PartnerPermissions>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/GetPartnerPermissions");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "GetPartnerPermissions"));
self.inner.unary(req, path, codec).await
}
/// Deprecated: Only returns access approval requests directly associated with
/// an assured workload folder.
pub async fn list_access_approval_requests(&mut self, request: impl tonic::IntoRequest<super::ListAccessApprovalRequestsRequest>) -> std::result::Result<tonic::Response<super::ListAccessApprovalRequestsResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/ListAccessApprovalRequests");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "ListAccessApprovalRequests"));
self.inner.unary(req, path, codec).await
}
/// Get details of a Partner.
pub async fn get_partner(&mut self, request: impl tonic::IntoRequest<super::GetPartnerRequest>) -> std::result::Result<tonic::Response<super::Partner>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore/GetPartner");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerCore", "GetPartner"));
self.inner.unary(req, path, codec).await
}
}
}
