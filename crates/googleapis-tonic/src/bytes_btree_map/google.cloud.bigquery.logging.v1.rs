// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuditData {
#[prost(message, optional, tag = "17")]
pub job_completed_event: ::core::option::Option<JobCompletedEvent>,
#[prost(message, repeated, tag = "19")]
pub table_data_read_events: ::prost::alloc::vec::Vec<TableDataReadEvent>,
#[prost(oneof = "audit_data::Request", tags = "1, 16, 2, 3, 4, 5, 6, 7, 8, 20")]
pub request: ::core::option::Option<audit_data::Request>,
#[prost(oneof = "audit_data::Response", tags = "9, 10, 11, 12, 18, 13, 14, 15, 21")]
pub response: ::core::option::Option<audit_data::Response>,
}
/// Nested message and enum types in `AuditData`.
pub mod audit_data {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Request {
#[prost(message, tag = "1")]
TableInsertRequest(super::TableInsertRequest),
#[prost(message, tag = "16")]
TableUpdateRequest(super::TableUpdateRequest),
#[prost(message, tag = "2")]
DatasetListRequest(super::DatasetListRequest),
#[prost(message, tag = "3")]
DatasetInsertRequest(super::DatasetInsertRequest),
#[prost(message, tag = "4")]
DatasetUpdateRequest(super::DatasetUpdateRequest),
#[prost(message, tag = "5")]
JobInsertRequest(super::JobInsertRequest),
#[prost(message, tag = "6")]
JobQueryRequest(super::JobQueryRequest),
#[prost(message, tag = "7")]
JobGetQueryResultsRequest(super::JobGetQueryResultsRequest),
#[prost(message, tag = "8")]
TableDataListRequest(super::TableDataListRequest),
#[prost(message, tag = "20")]
SetIamPolicyRequest(super::super::super::super::super::iam::v1::SetIamPolicyRequest),
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Response {
#[prost(message, tag = "9")]
TableInsertResponse(super::TableInsertResponse),
#[prost(message, tag = "10")]
TableUpdateResponse(super::TableUpdateResponse),
#[prost(message, tag = "11")]
DatasetInsertResponse(super::DatasetInsertResponse),
#[prost(message, tag = "12")]
DatasetUpdateResponse(super::DatasetUpdateResponse),
#[prost(message, tag = "18")]
JobInsertResponse(super::JobInsertResponse),
#[prost(message, tag = "13")]
JobQueryResponse(super::JobQueryResponse),
#[prost(message, tag = "14")]
JobGetQueryResultsResponse(super::JobGetQueryResultsResponse),
#[prost(message, tag = "15")]
JobQueryDoneResponse(super::JobQueryDoneResponse),
#[prost(message, tag = "21")]
PolicyResponse(super::super::super::super::super::iam::v1::Policy),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableInsertRequest {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Table>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableUpdateRequest {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Table>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableInsertResponse {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Table>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableUpdateResponse {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Table>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DatasetListRequest {
#[prost(bool, tag = "1")]
pub list_all: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetInsertRequest {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Dataset>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetInsertResponse {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Dataset>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetUpdateRequest {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Dataset>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetUpdateResponse {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Dataset>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobInsertRequest {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Job>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobInsertResponse {
#[prost(message, optional, tag = "1")]
pub resource: ::core::option::Option<Job>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobQueryRequest {
#[prost(string, tag = "1")]
pub query: ::prost::alloc::string::String,
#[prost(uint32, tag = "2")]
pub max_results: u32,
#[prost(message, optional, tag = "3")]
pub default_dataset: ::core::option::Option<DatasetName>,
#[prost(string, tag = "4")]
pub project_id: ::prost::alloc::string::String,
#[prost(bool, tag = "5")]
pub dry_run: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobQueryResponse {
#[prost(uint64, tag = "1")]
pub total_results: u64,
#[prost(message, optional, tag = "2")]
pub job: ::core::option::Option<Job>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JobGetQueryResultsRequest {
#[prost(uint32, tag = "1")]
pub max_results: u32,
#[prost(uint64, tag = "2")]
pub start_row: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobGetQueryResultsResponse {
#[prost(uint64, tag = "1")]
pub total_results: u64,
#[prost(message, optional, tag = "2")]
pub job: ::core::option::Option<Job>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobQueryDoneResponse {
#[prost(message, optional, tag = "1")]
pub job: ::core::option::Option<Job>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobCompletedEvent {
#[prost(string, tag = "1")]
pub event_name: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub job: ::core::option::Option<Job>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableDataReadEvent {
#[prost(message, optional, tag = "1")]
pub table_name: ::core::option::Option<TableName>,
#[prost(string, repeated, tag = "2")]
pub referenced_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TableDataListRequest {
#[prost(uint64, tag = "1")]
pub start_row: u64,
#[prost(uint32, tag = "2")]
pub max_results: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Table {
#[prost(message, optional, tag = "1")]
pub table_name: ::core::option::Option<TableName>,
#[prost(message, optional, tag = "2")]
pub info: ::core::option::Option<TableInfo>,
#[prost(string, tag = "8")]
pub schema_json: ::prost::alloc::string::String,
#[prost(message, optional, tag = "4")]
pub view: ::core::option::Option<TableViewDefinition>,
#[prost(message, optional, tag = "5")]
pub expire_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "6")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "7")]
pub truncate_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "9")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "10")]
pub encryption: ::core::option::Option<EncryptionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableInfo {
#[prost(string, tag = "1")]
pub friendly_name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub description: ::prost::alloc::string::String,
#[prost(btree_map = "string, string", tag = "3")]
pub labels: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableViewDefinition {
#[prost(string, tag = "1")]
pub query: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dataset {
#[prost(message, optional, tag = "1")]
pub dataset_name: ::core::option::Option<DatasetName>,
#[prost(message, optional, tag = "2")]
pub info: ::core::option::Option<DatasetInfo>,
#[prost(message, optional, tag = "4")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "5")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "6")]
pub acl: ::core::option::Option<BigQueryAcl>,
#[prost(message, optional, tag = "8")]
pub default_table_expire_duration: ::core::option::Option<::prost_types::Duration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetInfo {
#[prost(string, tag = "1")]
pub friendly_name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub description: ::prost::alloc::string::String,
#[prost(btree_map = "string, string", tag = "3")]
pub labels: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BigQueryAcl {
#[prost(message, repeated, tag = "1")]
pub entries: ::prost::alloc::vec::Vec<big_query_acl::Entry>,
}
/// Nested message and enum types in `BigQueryAcl`.
pub mod big_query_acl {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entry {
#[prost(string, tag = "1")]
pub role: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub group_email: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub user_email: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub domain: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub special_group: ::prost::alloc::string::String,
#[prost(message, optional, tag = "6")]
pub view_name: ::core::option::Option<super::TableName>,
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Job {
#[prost(message, optional, tag = "1")]
pub job_name: ::core::option::Option<JobName>,
#[prost(message, optional, tag = "2")]
pub job_configuration: ::core::option::Option<JobConfiguration>,
#[prost(message, optional, tag = "3")]
pub job_status: ::core::option::Option<JobStatus>,
#[prost(message, optional, tag = "4")]
pub job_statistics: ::core::option::Option<JobStatistics>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobConfiguration {
#[prost(bool, tag = "9")]
pub dry_run: bool,
#[prost(btree_map = "string, string", tag = "3")]
pub labels: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(oneof = "job_configuration::Configuration", tags = "5, 6, 7, 8")]
pub configuration: ::core::option::Option<job_configuration::Configuration>,
}
/// Nested message and enum types in `JobConfiguration`.
pub mod job_configuration {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
#[prost(string, tag = "1")]
pub query: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub destination_table: ::core::option::Option<super::TableName>,
#[prost(string, tag = "3")]
pub create_disposition: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub write_disposition: ::prost::alloc::string::String,
#[prost(message, optional, tag = "5")]
pub default_dataset: ::core::option::Option<super::DatasetName>,
#[prost(message, repeated, tag = "6")]
pub table_definitions: ::prost::alloc::vec::Vec<super::TableDefinition>,
#[prost(string, tag = "7")]
pub query_priority: ::prost::alloc::string::String,
#[prost(message, optional, tag = "8")]
pub destination_table_encryption: ::core::option::Option<super::EncryptionInfo>,
#[prost(string, tag = "9")]
pub statement_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Load {
#[prost(string, repeated, tag = "1")]
pub source_uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, tag = "6")]
pub schema_json: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub destination_table: ::core::option::Option<super::TableName>,
#[prost(string, tag = "4")]
pub create_disposition: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub write_disposition: ::prost::alloc::string::String,
#[prost(message, optional, tag = "7")]
pub destination_table_encryption: ::core::option::Option<super::EncryptionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Extract {
#[prost(string, repeated, tag = "1")]
pub destination_uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(message, optional, tag = "2")]
pub source_table: ::core::option::Option<super::TableName>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableCopy {
#[prost(message, repeated, tag = "1")]
pub source_tables: ::prost::alloc::vec::Vec<super::TableName>,
#[prost(message, optional, tag = "2")]
pub destination_table: ::core::option::Option<super::TableName>,
#[prost(string, tag = "3")]
pub create_disposition: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub write_disposition: ::prost::alloc::string::String,
#[prost(message, optional, tag = "5")]
pub destination_table_encryption: ::core::option::Option<super::EncryptionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Configuration {
#[prost(message, tag = "5")]
Query(Query),
#[prost(message, tag = "6")]
Load(Load),
#[prost(message, tag = "7")]
Extract(Extract),
#[prost(message, tag = "8")]
TableCopy(TableCopy),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableDefinition {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "2")]
pub source_uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobStatus {
#[prost(string, tag = "1")]
pub state: ::prost::alloc::string::String,
#[prost(message, optional, tag = "2")]
pub error: ::core::option::Option<super::super::super::super::rpc::Status>,
#[prost(message, repeated, tag = "3")]
pub additional_errors: ::prost::alloc::vec::Vec<super::super::super::super::rpc::Status>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobStatistics {
#[prost(message, optional, tag = "1")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "2")]
pub start_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(int64, tag = "4")]
pub total_processed_bytes: i64,
#[prost(int64, tag = "5")]
pub total_billed_bytes: i64,
#[prost(int32, tag = "7")]
pub billing_tier: i32,
#[prost(int64, tag = "8")]
pub total_slot_ms: i64,
#[deprecated]
#[prost(message, repeated, tag = "14")]
pub reservation_usage: ::prost::alloc::vec::Vec<job_statistics::ReservationResourceUsage>,
#[prost(string, tag = "16")]
pub reservation: ::prost::alloc::string::String,
#[prost(message, repeated, tag = "9")]
pub referenced_tables: ::prost::alloc::vec::Vec<TableName>,
#[prost(int32, tag = "10")]
pub total_tables_processed: i32,
#[prost(message, repeated, tag = "11")]
pub referenced_views: ::prost::alloc::vec::Vec<TableName>,
#[prost(int32, tag = "12")]
pub total_views_processed: i32,
#[prost(int64, tag = "15")]
pub query_output_row_count: i64,
#[prost(int64, tag = "13")]
pub total_load_output_bytes: i64,
}
/// Nested message and enum types in `JobStatistics`.
pub mod job_statistics {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReservationResourceUsage {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(int64, tag = "2")]
pub slot_ms: i64,
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetName {
#[prost(string, tag = "1")]
pub project_id: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub dataset_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableName {
#[prost(string, tag = "1")]
pub project_id: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub dataset_id: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub table_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobName {
#[prost(string, tag = "1")]
pub project_id: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub job_id: ::prost::alloc::string::String,
#[prost(string, tag = "3")]
pub location: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptionInfo {
#[prost(string, tag = "1")]
pub kms_key_name: ::prost::alloc::string::String,
}
