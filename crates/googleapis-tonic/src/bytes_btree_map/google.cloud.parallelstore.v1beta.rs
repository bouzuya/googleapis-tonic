// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub description: ::prost::alloc::string::String,
#[prost(enumeration = "instance::State", tag = "3")]
pub state: i32,
#[prost(message, optional, tag = "4")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "5")]
pub update_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(btree_map = "string, string", tag = "6")]
pub labels: ::prost::alloc::collections::BTreeMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
#[prost(int64, tag = "8")]
pub capacity_gib: i64,
#[prost(string, tag = "9")]
pub daos_version: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "10")]
pub access_points: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
#[prost(string, tag = "11")]
pub network: ::prost::alloc::string::String,
#[prost(string, tag = "12")]
pub reserved_ip_range: ::prost::alloc::string::String,
#[prost(string, tag = "14")]
pub effective_reserved_ip_range: ::prost::alloc::string::String,
}
/// Nested message and enum types in `Instance`.
pub mod instance {
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum State {
Unspecified = 0,
Creating = 1,
Active = 2,
Deleting = 3,
Failed = 4,
}
impl State {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
State::Unspecified => "STATE_UNSPECIFIED",
State::Creating => "CREATING",
State::Active => "ACTIVE",
State::Deleting => "DELETING",
State::Failed => "FAILED",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"STATE_UNSPECIFIED" => Some(Self::Unspecified),
"CREATING" => Some(Self::Creating),
"ACTIVE" => Some(Self::Active),
"DELETING" => Some(Self::Deleting),
"FAILED" => Some(Self::Failed),
_ => None,
}
}
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(int32, tag = "2")]
pub page_size: i32,
#[prost(string, tag = "3")]
pub page_token: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub filter: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesResponse {
#[prost(message, repeated, tag = "1")]
pub instances: ::prost::alloc::vec::Vec<Instance>,
#[prost(string, tag = "2")]
pub next_page_token: ::prost::alloc::string::String,
#[prost(string, repeated, tag = "3")]
pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstanceRequest {
#[prost(string, tag = "1")]
pub parent: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub instance_id: ::prost::alloc::string::String,
#[prost(message, optional, tag = "3")]
pub instance: ::core::option::Option<Instance>,
#[prost(string, tag = "4")]
pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateInstanceRequest {
#[prost(message, optional, tag = "1")]
pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
#[prost(message, optional, tag = "2")]
pub instance: ::core::option::Option<Instance>,
#[prost(string, tag = "3")]
pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInstanceRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "2")]
pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
#[prost(message, optional, tag = "1")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "2")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "3")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub status_message: ::prost::alloc::string::String,
#[prost(bool, tag = "6")]
pub requested_cancellation: bool,
#[prost(string, tag = "7")]
pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SourceGcsBucket {
#[prost(string, tag = "1")]
pub uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestinationGcsBucket {
#[prost(string, tag = "1")]
pub uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SourceParallelstore {
#[prost(string, tag = "1")]
pub path: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestinationParallelstore {
#[prost(string, tag = "1")]
pub path: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportDataRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub request_id: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub service_account: ::prost::alloc::string::String,
#[prost(oneof = "import_data_request::Source", tags = "2")]
pub source: ::core::option::Option<import_data_request::Source>,
#[prost(oneof = "import_data_request::Destination", tags = "3")]
pub destination: ::core::option::Option<import_data_request::Destination>,
}
/// Nested message and enum types in `ImportDataRequest`.
pub mod import_data_request {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Source {
#[prost(message, tag = "2")]
SourceGcsBucket(super::SourceGcsBucket),
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Destination {
#[prost(message, tag = "3")]
DestinationParallelstore(super::DestinationParallelstore),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataRequest {
#[prost(string, tag = "1")]
pub name: ::prost::alloc::string::String,
#[prost(string, tag = "4")]
pub request_id: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub service_account: ::prost::alloc::string::String,
#[prost(oneof = "export_data_request::Source", tags = "2")]
pub source: ::core::option::Option<export_data_request::Source>,
#[prost(oneof = "export_data_request::Destination", tags = "3")]
pub destination: ::core::option::Option<export_data_request::Destination>,
}
/// Nested message and enum types in `ExportDataRequest`.
pub mod export_data_request {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Source {
#[prost(message, tag = "2")]
SourceParallelstore(super::SourceParallelstore),
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Destination {
#[prost(message, tag = "3")]
DestinationGcsBucket(super::DestinationGcsBucket),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ImportDataResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportDataMetadata {
#[prost(message, optional, tag = "1")]
pub operation_metadata: ::core::option::Option<TransferOperationMetadata>,
#[prost(message, optional, tag = "2")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "4")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "6")]
pub status_message: ::prost::alloc::string::String,
#[prost(bool, tag = "7")]
pub requested_cancellation: bool,
#[prost(string, tag = "8")]
pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExportDataResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataMetadata {
#[prost(message, optional, tag = "1")]
pub operation_metadata: ::core::option::Option<TransferOperationMetadata>,
#[prost(message, optional, tag = "2")]
pub create_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(message, optional, tag = "3")]
pub end_time: ::core::option::Option<::prost_types::Timestamp>,
#[prost(string, tag = "4")]
pub target: ::prost::alloc::string::String,
#[prost(string, tag = "5")]
pub verb: ::prost::alloc::string::String,
#[prost(string, tag = "6")]
pub status_message: ::prost::alloc::string::String,
#[prost(bool, tag = "7")]
pub requested_cancellation: bool,
#[prost(string, tag = "8")]
pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferOperationMetadata {
#[prost(message, optional, tag = "3")]
pub counters: ::core::option::Option<TransferCounters>,
#[prost(enumeration = "TransferType", tag = "6")]
pub transfer_type: i32,
#[prost(oneof = "transfer_operation_metadata::Source", tags = "7, 8")]
pub source: ::core::option::Option<transfer_operation_metadata::Source>,
#[prost(oneof = "transfer_operation_metadata::Destination", tags = "9, 10")]
pub destination: ::core::option::Option<transfer_operation_metadata::Destination>,
}
/// Nested message and enum types in `TransferOperationMetadata`.
pub mod transfer_operation_metadata {
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Source {
#[prost(message, tag = "7")]
SourceParallelstore(super::SourceParallelstore),
#[prost(message, tag = "8")]
SourceGcsBucket(super::SourceGcsBucket),
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Destination {
#[prost(message, tag = "9")]
DestinationGcsBucket(super::DestinationGcsBucket),
#[prost(message, tag = "10")]
DestinationParallelstore(super::DestinationParallelstore),
}
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransferCounters {
#[prost(int64, tag = "1")]
pub objects_found: i64,
#[prost(int64, tag = "2")]
pub bytes_found: i64,
#[prost(int64, tag = "3")]
pub objects_skipped: i64,
#[prost(int64, tag = "4")]
pub bytes_skipped: i64,
#[prost(int64, tag = "5")]
pub objects_copied: i64,
#[prost(int64, tag = "6")]
pub bytes_copied: i64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransferType {
Unspecified = 0,
Import = 1,
Export = 2,
}
impl TransferType {
/// String value of the enum field names used in the ProtoBuf definition.
///
/// The values are not transformed in any way and thus are considered stable
/// (if the ProtoBuf definition does not change) and safe for programmatic use.
pub fn as_str_name(&self) -> &'static str {
match self {
TransferType::Unspecified => "TRANSFER_TYPE_UNSPECIFIED",
TransferType::Import => "IMPORT",
TransferType::Export => "EXPORT",
}
}
/// Creates an enum from field names used in the ProtoBuf definition.
pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
match value {
"TRANSFER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
"IMPORT" => Some(Self::Import),
"EXPORT" => Some(Self::Export),
_ => None,
}
}
}
/// Generated client implementations.
pub mod parallelstore_client {
#![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
use tonic::codegen::http::Uri;
use tonic::codegen::*;
/// Service describing handlers for resources
/// Configures and manages parallelstore resources.
///
/// Parallelstore service.
///
/// The `parallelstore.googleapis.com` service implements the parallelstore API
/// and defines the following resource model for managing instances:
/// * The service works with a collection of cloud projects, named: `/projects/*`
/// * Each project has a collection of available locations, named: `/locations/*`
/// * Each location has a collection of instances named `/instances/*`.
/// * Parallelstore instances are resources of the form:
///   `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
///
/// Note that location_id must be a Google Cloud `zone`; for example:
/// * `projects/12345/locations/us-central1-c/instances/my-parallelstore-share`
#[derive(Debug, Clone)]
pub struct ParallelstoreClient<T> {
inner: tonic::client::Grpc<T>,
}
impl<T> ParallelstoreClient<T>
where
T: tonic::client::GrpcService<tonic::body::BoxBody>,
T::Error: Into<StdError>,
T::ResponseBody: Body<Data = Bytes> + Send + 'static,
<T::ResponseBody as Body>::Error: Into<StdError> + Send,
{
pub fn new(inner: T) -> Self {
let inner = tonic::client::Grpc::new(inner);
Self { inner }
}
pub fn with_origin(inner: T, origin: Uri) -> Self {
let inner = tonic::client::Grpc::with_origin(inner, origin);
Self { inner }
}
pub fn with_interceptor<F>(inner: T, interceptor: F) -> ParallelstoreClient<InterceptedService<T, F>>
where
F: tonic::service::Interceptor,
T::ResponseBody: Default,
T: tonic::codegen::Service<http::Request<tonic::body::BoxBody>, Response = http::Response<<T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody>>,
<T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error: Into<StdError> + Send + Sync,
{
ParallelstoreClient::new(InterceptedService::new(inner, interceptor))
}
/// Compress requests with the given encoding.
///
/// This requires the server to support it otherwise it might respond with an
/// error.
#[must_use]
pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.send_compressed(encoding);
self
}
/// Enable decompressing responses.
#[must_use]
pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
self.inner = self.inner.accept_compressed(encoding);
self
}
/// Limits the maximum size of a decoded message.
///
/// Default: `4MB`
#[must_use]
pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_decoding_message_size(limit);
self
}
/// Limits the maximum size of an encoded message.
///
/// Default: `usize::MAX`
#[must_use]
pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
self.inner = self.inner.max_encoding_message_size(limit);
self
}
/// Lists Instances in a given project and location.
pub async fn list_instances(&mut self, request: impl tonic::IntoRequest<super::ListInstancesRequest>) -> std::result::Result<tonic::Response<super::ListInstancesResponse>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.parallelstore.v1beta.Parallelstore/ListInstances");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.parallelstore.v1beta.Parallelstore", "ListInstances"));
self.inner.unary(req, path, codec).await
}
/// Gets details of a single Instance.
pub async fn get_instance(&mut self, request: impl tonic::IntoRequest<super::GetInstanceRequest>) -> std::result::Result<tonic::Response<super::Instance>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.parallelstore.v1beta.Parallelstore/GetInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.parallelstore.v1beta.Parallelstore", "GetInstance"));
self.inner.unary(req, path, codec).await
}
/// Creates a Parallelstore instance in a given project and location.
pub async fn create_instance(&mut self, request: impl tonic::IntoRequest<super::CreateInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.parallelstore.v1beta.Parallelstore/CreateInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.parallelstore.v1beta.Parallelstore", "CreateInstance"));
self.inner.unary(req, path, codec).await
}
/// Updates the parameters of a single Instance.
pub async fn update_instance(&mut self, request: impl tonic::IntoRequest<super::UpdateInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.parallelstore.v1beta.Parallelstore/UpdateInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.parallelstore.v1beta.Parallelstore", "UpdateInstance"));
self.inner.unary(req, path, codec).await
}
/// Deletes a single Instance.
pub async fn delete_instance(&mut self, request: impl tonic::IntoRequest<super::DeleteInstanceRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.parallelstore.v1beta.Parallelstore/DeleteInstance");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.parallelstore.v1beta.Parallelstore", "DeleteInstance"));
self.inner.unary(req, path, codec).await
}
/// ImportData copies data from Cloud Storage to Parallelstore.
pub async fn import_data(&mut self, request: impl tonic::IntoRequest<super::ImportDataRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.parallelstore.v1beta.Parallelstore/ImportData");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.parallelstore.v1beta.Parallelstore", "ImportData"));
self.inner.unary(req, path, codec).await
}
/// ExportData copies data from Parallelstore to Cloud Storage
pub async fn export_data(&mut self, request: impl tonic::IntoRequest<super::ExportDataRequest>) -> std::result::Result<tonic::Response<super::super::super::super::longrunning::Operation>, tonic::Status> {
self.inner.ready().await.map_err(|e| tonic::Status::new(tonic::Code::Unknown, format!("Service was not ready: {}", e.into())))?;
let codec = tonic::codec::ProstCodec::default();
let path = http::uri::PathAndQuery::from_static("/google.cloud.parallelstore.v1beta.Parallelstore/ExportData");
let mut req = request.into_request();
req.extensions_mut().insert(GrpcMethod::new("google.cloud.parallelstore.v1beta.Parallelstore", "ExportData"));
self.inner.unary(req, path, codec).await
}
}
}
