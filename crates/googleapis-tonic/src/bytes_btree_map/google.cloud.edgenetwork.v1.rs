// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Zone {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(btree_map = "string, string", tag = "4")]
    pub labels: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[deprecated]
    #[prost(string, tag = "5")]
    pub layout_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Network {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(btree_map = "string, string", tag = "4")]
    pub labels: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub mtu: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Subnet {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(btree_map = "string, string", tag = "4")]
    pub labels: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub network: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "7")]
    pub ipv4_cidr: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "8")]
    pub ipv6_cidr: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "9")]
    pub vlan_id: i32,
    #[prost(enumeration = "subnet::BondingType", tag = "11")]
    pub bonding_type: i32,
    #[prost(enumeration = "ResourceState", tag = "10")]
    pub state: i32,
}
/// Nested message and enum types in `Subnet`.
pub mod subnet {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum BondingType {
        Unspecified = 0,
        Bonded = 1,
        NonBonded = 2,
    }
    impl BondingType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                BondingType::Unspecified => "BONDING_TYPE_UNSPECIFIED",
                BondingType::Bonded => "BONDED",
                BondingType::NonBonded => "NON_BONDED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "BONDING_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "BONDED" => Some(Self::Bonded),
                "NON_BONDED" => Some(Self::NonBonded),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Interconnect {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(btree_map = "string, string", tag = "4")]
    pub labels: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    #[prost(enumeration = "interconnect::InterconnectType", tag = "6")]
    pub interconnect_type: i32,
    #[prost(string, tag = "7")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub device_cloud_resource_name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "9")]
    pub physical_ports: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Nested message and enum types in `Interconnect`.
pub mod interconnect {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum InterconnectType {
        Unspecified = 0,
        Dedicated = 1,
    }
    impl InterconnectType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                InterconnectType::Unspecified => "INTERCONNECT_TYPE_UNSPECIFIED",
                InterconnectType::Dedicated => "DEDICATED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INTERCONNECT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "DEDICATED" => Some(Self::Dedicated),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InterconnectAttachment {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(btree_map = "string, string", tag = "4")]
    pub labels: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub interconnect: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub network: ::prost::alloc::string::String,
    #[prost(int32, tag = "8")]
    pub vlan_id: i32,
    #[prost(int32, tag = "9")]
    pub mtu: i32,
    #[prost(enumeration = "ResourceState", tag = "10")]
    pub state: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Router {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(btree_map = "string, string", tag = "4")]
    pub labels: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub network: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "7")]
    pub interface: ::prost::alloc::vec::Vec<router::Interface>,
    #[prost(message, repeated, tag = "8")]
    pub bgp_peer: ::prost::alloc::vec::Vec<router::BgpPeer>,
    #[prost(message, optional, tag = "9")]
    pub bgp: ::core::option::Option<router::Bgp>,
    #[prost(enumeration = "ResourceState", tag = "10")]
    pub state: i32,
    #[prost(string, repeated, tag = "11")]
    pub route_advertisements: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Nested message and enum types in `Router`.
pub mod router {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Interface {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub ipv4_cidr: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub ipv6_cidr: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub linked_interconnect_attachment: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub subnetwork: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "5")]
        pub loopback_ip_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct BgpPeer {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub interface: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub interface_ipv4_cidr: ::prost::alloc::string::String,
        #[prost(string, tag = "7")]
        pub interface_ipv6_cidr: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub peer_ipv4_cidr: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub peer_ipv6_cidr: ::prost::alloc::string::String,
        #[prost(uint32, tag = "5")]
        pub peer_asn: u32,
        #[prost(uint32, tag = "8")]
        pub local_asn: u32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Bgp {
        #[prost(uint32, tag = "1")]
        pub asn: u32,
        #[prost(uint32, tag = "2")]
        pub keepalive_interval_in_seconds: u32,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LinkLayerAddress {
    #[prost(string, tag = "1")]
    pub mac_address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ip_address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubnetStatus {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub mac_address: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub link_layer_addresses: ::prost::alloc::vec::Vec<LinkLayerAddress>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InterconnectDiagnostics {
    #[prost(string, tag = "1")]
    pub mac_address: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub link_layer_addresses: ::prost::alloc::vec::Vec<LinkLayerAddress>,
    #[prost(message, repeated, tag = "3")]
    pub links: ::prost::alloc::vec::Vec<interconnect_diagnostics::LinkStatus>,
}
/// Nested message and enum types in `InterconnectDiagnostics`.
pub mod interconnect_diagnostics {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct LinkStatus {
        #[prost(string, tag = "1")]
        pub circuit_id: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub lacp_status: ::core::option::Option<LinkLacpStatus>,
        #[prost(message, repeated, tag = "3")]
        pub lldp_statuses: ::prost::alloc::vec::Vec<LinkLldpStatus>,
        #[prost(message, optional, tag = "4")]
        pub packet_counts: ::core::option::Option<PacketCounts>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PacketCounts {
        #[prost(int64, tag = "1")]
        pub inbound_unicast: i64,
        #[prost(int64, tag = "2")]
        pub inbound_errors: i64,
        #[prost(int64, tag = "3")]
        pub inbound_discards: i64,
        #[prost(int64, tag = "4")]
        pub outbound_unicast: i64,
        #[prost(int64, tag = "5")]
        pub outbound_errors: i64,
        #[prost(int64, tag = "6")]
        pub outbound_discards: i64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct LinkLacpStatus {
        #[prost(enumeration = "link_lacp_status::State", tag = "1")]
        pub state: i32,
        #[prost(string, tag = "2")]
        pub google_system_id: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub neighbor_system_id: ::prost::alloc::string::String,
        #[prost(bool, tag = "4")]
        pub aggregatable: bool,
        #[prost(bool, tag = "5")]
        pub collecting: bool,
        #[prost(bool, tag = "6")]
        pub distributing: bool,
    }
    /// Nested message and enum types in `LinkLACPStatus`.
    pub mod link_lacp_status {
        #[derive(
            Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,
        )]
        #[repr(i32)]
        pub enum State {
            Unknown = 0,
            Active = 1,
            Detached = 2,
        }
        impl State {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    State::Unknown => "UNKNOWN",
                    State::Active => "ACTIVE",
                    State::Detached => "DETACHED",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "UNKNOWN" => Some(Self::Unknown),
                    "ACTIVE" => Some(Self::Active),
                    "DETACHED" => Some(Self::Detached),
                    _ => None,
                }
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct LinkLldpStatus {
        #[prost(string, tag = "1")]
        pub peer_system_name: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub peer_system_description: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub peer_chassis_id: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub peer_chassis_id_type: ::prost::alloc::string::String,
        #[prost(string, tag = "5")]
        pub peer_port_id: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub peer_port_id_type: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouterStatus {
    #[prost(string, tag = "1")]
    pub network: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub bgp_peer_status: ::prost::alloc::vec::Vec<router_status::BgpPeerStatus>,
}
/// Nested message and enum types in `RouterStatus`.
pub mod router_status {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct BgpPeerStatus {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub ip_address: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub peer_ip_address: ::prost::alloc::string::String,
        #[prost(enumeration = "bgp_peer_status::BgpStatus", tag = "4")]
        pub status: i32,
        #[prost(string, tag = "5")]
        pub state: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub uptime: ::prost::alloc::string::String,
        #[prost(int64, tag = "7")]
        pub uptime_seconds: i64,
        #[prost(message, optional, tag = "8")]
        pub prefix_counter: ::core::option::Option<PrefixCounter>,
    }
    /// Nested message and enum types in `BgpPeerStatus`.
    pub mod bgp_peer_status {
        #[derive(
            Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,
        )]
        #[repr(i32)]
        pub enum BgpStatus {
            Unknown = 0,
            Up = 1,
            Down = 2,
        }
        impl BgpStatus {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    BgpStatus::Unknown => "UNKNOWN",
                    BgpStatus::Up => "UP",
                    BgpStatus::Down => "DOWN",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "UNKNOWN" => Some(Self::Unknown),
                    "UP" => Some(Self::Up),
                    "DOWN" => Some(Self::Down),
                    _ => None,
                }
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PrefixCounter {
        #[prost(int64, tag = "1")]
        pub advertised: i64,
        #[prost(int64, tag = "2")]
        pub denied: i64,
        #[prost(int64, tag = "3")]
        pub received: i64,
        #[prost(int64, tag = "4")]
        pub sent: i64,
        #[prost(int64, tag = "5")]
        pub suppressed: i64,
        #[prost(int64, tag = "6")]
        pub withdrawn: i64,
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResourceState {
    StateUnknown = 0,
    StatePending = 1,
    StateProvisioning = 2,
    StateRunning = 3,
    StateSuspended = 4,
    StateDeleting = 5,
}
impl ResourceState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ResourceState::StateUnknown => "STATE_UNKNOWN",
            ResourceState::StatePending => "STATE_PENDING",
            ResourceState::StateProvisioning => "STATE_PROVISIONING",
            ResourceState::StateRunning => "STATE_RUNNING",
            ResourceState::StateSuspended => "STATE_SUSPENDED",
            ResourceState::StateDeleting => "STATE_DELETING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATE_UNKNOWN" => Some(Self::StateUnknown),
            "STATE_PENDING" => Some(Self::StatePending),
            "STATE_PROVISIONING" => Some(Self::StateProvisioning),
            "STATE_RUNNING" => Some(Self::StateRunning),
            "STATE_SUSPENDED" => Some(Self::StateSuspended),
            "STATE_DELETING" => Some(Self::StateDeleting),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListZonesRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListZonesResponse {
    #[prost(message, repeated, tag = "1")]
    pub zones: ::prost::alloc::vec::Vec<Zone>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetZoneRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNetworksRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNetworksResponse {
    #[prost(message, repeated, tag = "1")]
    pub networks: ::prost::alloc::vec::Vec<Network>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNetworkRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateNetworkRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub network_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub network: ::core::option::Option<Network>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteNetworkRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSubnetsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSubnetsResponse {
    #[prost(message, repeated, tag = "1")]
    pub subnets: ::prost::alloc::vec::Vec<Subnet>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSubnetRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubnetRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub subnet_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub subnet: ::core::option::Option<Subnet>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSubnetRequest {
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "2")]
    pub subnet: ::core::option::Option<Subnet>,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteSubnetRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInterconnectsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInterconnectsResponse {
    #[prost(message, repeated, tag = "1")]
    pub interconnects: ::prost::alloc::vec::Vec<Interconnect>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInterconnectRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInterconnectAttachmentsRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInterconnectAttachmentsResponse {
    #[prost(message, repeated, tag = "1")]
    pub interconnect_attachments: ::prost::alloc::vec::Vec<InterconnectAttachment>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInterconnectAttachmentRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInterconnectAttachmentRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub interconnect_attachment_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub interconnect_attachment: ::core::option::Option<InterconnectAttachment>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInterconnectAttachmentRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRoutersRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRoutersResponse {
    #[prost(message, repeated, tag = "1")]
    pub routers: ::prost::alloc::vec::Vec<Router>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRouterRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRouterRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub router_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub router: ::core::option::Option<Router>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRouterRequest {
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "2")]
    pub router: ::core::option::Option<Router>,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRouterRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiagnoseNetworkRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiagnoseNetworkResponse {
    #[prost(message, optional, tag = "1")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<diagnose_network_response::NetworkStatus>,
}
/// Nested message and enum types in `DiagnoseNetworkResponse`.
pub mod diagnose_network_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct NetworkStatus {
        #[prost(message, repeated, tag = "1")]
        pub subnet_status: ::prost::alloc::vec::Vec<super::SubnetStatus>,
        #[prost(enumeration = "network_status::MacsecStatus", tag = "2")]
        pub macsec_status_internal_links: i32,
    }
    /// Nested message and enum types in `NetworkStatus`.
    pub mod network_status {
        #[derive(
            Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,
        )]
        #[repr(i32)]
        pub enum MacsecStatus {
            Unspecified = 0,
            Secure = 1,
            Unsecure = 2,
        }
        impl MacsecStatus {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    MacsecStatus::Unspecified => "MACSEC_STATUS_UNSPECIFIED",
                    MacsecStatus::Secure => "SECURE",
                    MacsecStatus::Unsecure => "UNSECURE",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "MACSEC_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                    "SECURE" => Some(Self::Secure),
                    "UNSECURE" => Some(Self::Unsecure),
                    _ => None,
                }
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiagnoseInterconnectRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiagnoseInterconnectResponse {
    #[prost(message, optional, tag = "1")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<InterconnectDiagnostics>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiagnoseRouterRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiagnoseRouterResponse {
    #[prost(message, optional, tag = "1")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<RouterStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializeZoneRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InitializeZoneResponse {}
/// Generated client implementations.
pub mod edge_network_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// EdgeNetwork API provides managed, highly available cloud dynamic network
    /// configuration service to the GEC customer to enable edge application and
    /// network function solutions. This allows the customers to easily define and
    /// configure the network setup and property to meet the workload requirement.
    #[derive(Debug, Clone)]
    pub struct EdgeNetworkClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> EdgeNetworkClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> EdgeNetworkClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            EdgeNetworkClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// InitializeZone will initialize resources for a zone in a project.
        pub async fn initialize_zone(
            &mut self,
            request: impl tonic::IntoRequest<super::InitializeZoneRequest>,
        ) -> std::result::Result<tonic::Response<super::InitializeZoneResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/InitializeZone",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "InitializeZone",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deprecated: not implemented.
        /// Lists Zones in a given project and location.
        pub async fn list_zones(
            &mut self,
            request: impl tonic::IntoRequest<super::ListZonesRequest>,
        ) -> std::result::Result<tonic::Response<super::ListZonesResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/ListZones",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "ListZones",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deprecated: not implemented.
        /// Gets details of a single Zone.
        pub async fn get_zone(
            &mut self,
            request: impl tonic::IntoRequest<super::GetZoneRequest>,
        ) -> std::result::Result<tonic::Response<super::Zone>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/GetZone",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "GetZone",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Lists Networks in a given project and location.
        pub async fn list_networks(
            &mut self,
            request: impl tonic::IntoRequest<super::ListNetworksRequest>,
        ) -> std::result::Result<tonic::Response<super::ListNetworksResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/ListNetworks",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "ListNetworks",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Network.
        pub async fn get_network(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNetworkRequest>,
        ) -> std::result::Result<tonic::Response<super::Network>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/GetNetwork",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "GetNetwork",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Get the diagnostics of a single network resource.
        pub async fn diagnose_network(
            &mut self,
            request: impl tonic::IntoRequest<super::DiagnoseNetworkRequest>,
        ) -> std::result::Result<tonic::Response<super::DiagnoseNetworkResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/DiagnoseNetwork",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "DiagnoseNetwork",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new Network in a given project and location.
        pub async fn create_network(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateNetworkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateNetwork",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "CreateNetwork",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single Network.
        pub async fn delete_network(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteNetworkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteNetwork",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "DeleteNetwork",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Lists Subnets in a given project and location.
        pub async fn list_subnets(
            &mut self,
            request: impl tonic::IntoRequest<super::ListSubnetsRequest>,
        ) -> std::result::Result<tonic::Response<super::ListSubnetsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/ListSubnets",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "ListSubnets",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Subnet.
        pub async fn get_subnet(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSubnetRequest>,
        ) -> std::result::Result<tonic::Response<super::Subnet>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/GetSubnet",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "GetSubnet",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new Subnet in a given project and location.
        pub async fn create_subnet(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSubnetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateSubnet",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "CreateSubnet",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single Subnet.
        pub async fn update_subnet(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateSubnetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/UpdateSubnet",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "UpdateSubnet",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single Subnet.
        pub async fn delete_subnet(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteSubnetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteSubnet",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "DeleteSubnet",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Lists Interconnects in a given project and location.
        pub async fn list_interconnects(
            &mut self,
            request: impl tonic::IntoRequest<super::ListInterconnectsRequest>,
        ) -> std::result::Result<tonic::Response<super::ListInterconnectsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/ListInterconnects",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "ListInterconnects",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Interconnect.
        pub async fn get_interconnect(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInterconnectRequest>,
        ) -> std::result::Result<tonic::Response<super::Interconnect>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/GetInterconnect",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "GetInterconnect",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Get the diagnostics of a single interconnect resource.
        pub async fn diagnose_interconnect(
            &mut self,
            request: impl tonic::IntoRequest<super::DiagnoseInterconnectRequest>,
        ) -> std::result::Result<tonic::Response<super::DiagnoseInterconnectResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/DiagnoseInterconnect",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "DiagnoseInterconnect",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Lists InterconnectAttachments in a given project and location.
        pub async fn list_interconnect_attachments(
            &mut self,
            request: impl tonic::IntoRequest<super::ListInterconnectAttachmentsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListInterconnectAttachmentsResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/ListInterconnectAttachments",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "ListInterconnectAttachments",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single InterconnectAttachment.
        pub async fn get_interconnect_attachment(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInterconnectAttachmentRequest>,
        ) -> std::result::Result<tonic::Response<super::InterconnectAttachment>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/GetInterconnectAttachment",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "GetInterconnectAttachment",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new InterconnectAttachment in a given project and location.
        pub async fn create_interconnect_attachment(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateInterconnectAttachmentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateInterconnectAttachment",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "CreateInterconnectAttachment",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single InterconnectAttachment.
        pub async fn delete_interconnect_attachment(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteInterconnectAttachmentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteInterconnectAttachment",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "DeleteInterconnectAttachment",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Lists Routers in a given project and location.
        pub async fn list_routers(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRoutersRequest>,
        ) -> std::result::Result<tonic::Response<super::ListRoutersResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/ListRouters",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "ListRouters",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Router.
        pub async fn get_router(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRouterRequest>,
        ) -> std::result::Result<tonic::Response<super::Router>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/GetRouter",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "GetRouter",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Get the diagnostics of a single router resource.
        pub async fn diagnose_router(
            &mut self,
            request: impl tonic::IntoRequest<super::DiagnoseRouterRequest>,
        ) -> std::result::Result<tonic::Response<super::DiagnoseRouterResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/DiagnoseRouter",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "DiagnoseRouter",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new Router in a given project and location.
        pub async fn create_router(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateRouterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateRouter",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "CreateRouter",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single Router.
        pub async fn update_router(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRouterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/UpdateRouter",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "UpdateRouter",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single Router.
        pub async fn delete_router(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteRouterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteRouter",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "google.cloud.edgenetwork.v1.EdgeNetwork",
                "DeleteRouter",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
