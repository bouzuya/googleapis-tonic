// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatchJobCompletedLog {
    #[prost(string, tag = "1")]
    pub patch_job: ::prost::alloc::string::String,
    #[prost(enumeration = "patch_job_completed_log::State", tag = "2")]
    pub state: i32,
    #[prost(message, optional, tag = "3")]
    pub instance_details_summary: ::core::option::Option<
        patch_job_completed_log::InstanceDetailsSummary,
    >,
    #[prost(bool, tag = "4")]
    pub dry_run: bool,
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `PatchJobCompletedLog`.
pub mod patch_job_completed_log {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct InstanceDetailsSummary {
        #[prost(int64, tag = "1")]
        pub instances_pending: i64,
        #[prost(int64, tag = "2")]
        pub instances_inactive: i64,
        #[prost(int64, tag = "3")]
        pub instances_notified: i64,
        #[prost(int64, tag = "4")]
        pub instances_started: i64,
        #[prost(int64, tag = "5")]
        pub instances_downloading_patches: i64,
        #[prost(int64, tag = "6")]
        pub instances_applying_patches: i64,
        #[prost(int64, tag = "7")]
        pub instances_rebooting: i64,
        #[prost(int64, tag = "8")]
        pub instances_succeeded: i64,
        #[prost(int64, tag = "9")]
        pub instances_succeeded_reboot_required: i64,
        #[prost(int64, tag = "10")]
        pub instances_failed: i64,
        #[prost(int64, tag = "11")]
        pub instances_acked: i64,
        #[prost(int64, tag = "12")]
        pub instances_timed_out: i64,
        #[prost(int64, tag = "13")]
        pub instances_running_pre_patch_step: i64,
        #[prost(int64, tag = "14")]
        pub instances_running_post_patch_step: i64,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Started = 1,
        InstanceLookup = 2,
        Patching = 3,
        Succeeded = 4,
        CompletedWithErrors = 5,
        Canceled = 6,
        TimedOut = 7,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Started => "STARTED",
                State::InstanceLookup => "INSTANCE_LOOKUP",
                State::Patching => "PATCHING",
                State::Succeeded => "SUCCEEDED",
                State::CompletedWithErrors => "COMPLETED_WITH_ERRORS",
                State::Canceled => "CANCELED",
                State::TimedOut => "TIMED_OUT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "STARTED" => Some(Self::Started),
                "INSTANCE_LOOKUP" => Some(Self::InstanceLookup),
                "PATCHING" => Some(Self::Patching),
                "SUCCEEDED" => Some(Self::Succeeded),
                "COMPLETED_WITH_ERRORS" => Some(Self::CompletedWithErrors),
                "CANCELED" => Some(Self::Canceled),
                "TIMED_OUT" => Some(Self::TimedOut),
                _ => None,
            }
        }
    }
}
