// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UiDetectionRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub image_png: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub request: ::core::option::Option<DetectionRequest>,
    #[prost(bool, optional, tag = "3")]
    pub resize_image: ::core::option::Option<bool>,
    #[deprecated]
    #[prost(string, tag = "4")]
    pub test_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub test_metadata: ::core::option::Option<TestMetadata>,
    #[prost(bool, tag = "6")]
    pub force_image_resizing: bool,
    #[prost(bool, tag = "7")]
    pub return_transformed_image: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DetectionRequest {
    #[prost(oneof = "detection_request::DetectionRequestType", tags = "1, 2, 3")]
    pub detection_request_type: ::core::option::Option<
        detection_request::DetectionRequestType,
    >,
}
/// Nested message and enum types in `DetectionRequest`.
pub mod detection_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum DetectionRequestType {
        #[prost(message, tag = "1")]
        WordDetectionRequest(super::WordDetectionRequest),
        #[prost(message, tag = "2")]
        TextBlockDetectionRequest(super::TextBlockDetectionRequest),
        #[prost(message, tag = "3")]
        CustomIconDetectionRequest(super::CustomIconDetectionRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestMetadata {
    #[prost(string, tag = "1")]
    pub test_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub board: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub model: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub cros_build: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WordDetectionRequest {
    #[prost(string, tag = "1")]
    pub word: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub regex_mode: bool,
    #[prost(bool, tag = "3")]
    pub disable_approx_match: bool,
    #[prost(int32, optional, tag = "4")]
    pub max_edit_distance: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextBlockDetectionRequest {
    #[prost(string, repeated, tag = "1")]
    pub words: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub regex_mode: bool,
    #[prost(bool, tag = "3")]
    pub disable_approx_match: bool,
    #[prost(int32, optional, tag = "4")]
    pub max_edit_distance: ::core::option::Option<i32>,
    #[prost(bool, tag = "5")]
    pub specified_words_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomIconDetectionRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub icon_png: ::prost::alloc::vec::Vec<u8>,
    #[prost(int32, tag = "2")]
    pub match_count: i32,
    #[prost(double, tag = "3")]
    pub min_confidence_threshold: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UiDetectionResponse {
    #[prost(message, repeated, tag = "1")]
    pub bounding_boxes: ::prost::alloc::vec::Vec<BoundingBox>,
    #[prost(bytes = "vec", tag = "2")]
    pub transformed_image_png: ::prost::alloc::vec::Vec<u8>,
    #[prost(float, tag = "3")]
    pub resizing_scale_factor: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoundingBox {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub top: i32,
    #[prost(int32, tag = "3")]
    pub left: i32,
    #[prost(int32, tag = "4")]
    pub bottom: i32,
    #[prost(int32, tag = "5")]
    pub right: i32,
}
/// Generated client implementations.
pub mod ui_detection_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides image-based UI detection service.
    #[derive(Debug, Clone)]
    pub struct UiDetectionServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> UiDetectionServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> UiDetectionServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            UiDetectionServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Runs the detection.
        pub async fn execute_detection(
            &mut self,
            request: impl tonic::IntoRequest<super::UiDetectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UiDetectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.chromeos.uidetection.v1.UiDetectionService/ExecuteDetection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.chromeos.uidetection.v1.UiDetectionService",
                        "ExecuteDetection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
