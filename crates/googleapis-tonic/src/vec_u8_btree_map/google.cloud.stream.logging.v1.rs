// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationEventLog {
    #[prost(enumeration = "OperationEventType", tag = "1")]
    pub event_type: i32,
    #[prost(message, optional, tag = "2")]
    pub event_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "3")]
    pub operation: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub operation_artifacts: ::prost::alloc::vec::Vec<OperationArtifact>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationArtifact {
    #[prost(string, tag = "1")]
    pub artifact_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub artifact_uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionEventLog {
    #[prost(enumeration = "SessionEventType", tag = "1")]
    pub event_type: i32,
    #[prost(message, optional, tag = "2")]
    pub event_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "3")]
    pub session_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OperationEventType {
    Unspecified = 0,
    OperationEventCreateContentStarted = 1,
    OperationEventCreateContentEnded = 2,
    OperationEventBuildContentStarted = 3,
    OperationEventBuildContentEnded = 4,
    OperationEventUpdateContentStarted = 5,
    OperationEventUpdateContentEnded = 6,
    OperationEventDeleteContentStarted = 7,
    OperationEventDeleteContentEnded = 8,
    OperationEventCreateInstanceStarted = 9,
    OperationEventCreateInstanceEnded = 10,
    OperationEventUpdateInstanceStarted = 11,
    OperationEventUpdateInstanceEnded = 12,
    OperationEventDeleteInstanceStarted = 13,
    OperationEventDeleteInstanceEnded = 14,
}
impl OperationEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OperationEventType::Unspecified => "OPERATION_EVENT_TYPE_UNSPECIFIED",
            OperationEventType::OperationEventCreateContentStarted => {
                "OPERATION_EVENT_CREATE_CONTENT_STARTED"
            }
            OperationEventType::OperationEventCreateContentEnded => {
                "OPERATION_EVENT_CREATE_CONTENT_ENDED"
            }
            OperationEventType::OperationEventBuildContentStarted => {
                "OPERATION_EVENT_BUILD_CONTENT_STARTED"
            }
            OperationEventType::OperationEventBuildContentEnded => {
                "OPERATION_EVENT_BUILD_CONTENT_ENDED"
            }
            OperationEventType::OperationEventUpdateContentStarted => {
                "OPERATION_EVENT_UPDATE_CONTENT_STARTED"
            }
            OperationEventType::OperationEventUpdateContentEnded => {
                "OPERATION_EVENT_UPDATE_CONTENT_ENDED"
            }
            OperationEventType::OperationEventDeleteContentStarted => {
                "OPERATION_EVENT_DELETE_CONTENT_STARTED"
            }
            OperationEventType::OperationEventDeleteContentEnded => {
                "OPERATION_EVENT_DELETE_CONTENT_ENDED"
            }
            OperationEventType::OperationEventCreateInstanceStarted => {
                "OPERATION_EVENT_CREATE_INSTANCE_STARTED"
            }
            OperationEventType::OperationEventCreateInstanceEnded => {
                "OPERATION_EVENT_CREATE_INSTANCE_ENDED"
            }
            OperationEventType::OperationEventUpdateInstanceStarted => {
                "OPERATION_EVENT_UPDATE_INSTANCE_STARTED"
            }
            OperationEventType::OperationEventUpdateInstanceEnded => {
                "OPERATION_EVENT_UPDATE_INSTANCE_ENDED"
            }
            OperationEventType::OperationEventDeleteInstanceStarted => {
                "OPERATION_EVENT_DELETE_INSTANCE_STARTED"
            }
            OperationEventType::OperationEventDeleteInstanceEnded => {
                "OPERATION_EVENT_DELETE_INSTANCE_ENDED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OPERATION_EVENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "OPERATION_EVENT_CREATE_CONTENT_STARTED" => {
                Some(Self::OperationEventCreateContentStarted)
            }
            "OPERATION_EVENT_CREATE_CONTENT_ENDED" => {
                Some(Self::OperationEventCreateContentEnded)
            }
            "OPERATION_EVENT_BUILD_CONTENT_STARTED" => {
                Some(Self::OperationEventBuildContentStarted)
            }
            "OPERATION_EVENT_BUILD_CONTENT_ENDED" => {
                Some(Self::OperationEventBuildContentEnded)
            }
            "OPERATION_EVENT_UPDATE_CONTENT_STARTED" => {
                Some(Self::OperationEventUpdateContentStarted)
            }
            "OPERATION_EVENT_UPDATE_CONTENT_ENDED" => {
                Some(Self::OperationEventUpdateContentEnded)
            }
            "OPERATION_EVENT_DELETE_CONTENT_STARTED" => {
                Some(Self::OperationEventDeleteContentStarted)
            }
            "OPERATION_EVENT_DELETE_CONTENT_ENDED" => {
                Some(Self::OperationEventDeleteContentEnded)
            }
            "OPERATION_EVENT_CREATE_INSTANCE_STARTED" => {
                Some(Self::OperationEventCreateInstanceStarted)
            }
            "OPERATION_EVENT_CREATE_INSTANCE_ENDED" => {
                Some(Self::OperationEventCreateInstanceEnded)
            }
            "OPERATION_EVENT_UPDATE_INSTANCE_STARTED" => {
                Some(Self::OperationEventUpdateInstanceStarted)
            }
            "OPERATION_EVENT_UPDATE_INSTANCE_ENDED" => {
                Some(Self::OperationEventUpdateInstanceEnded)
            }
            "OPERATION_EVENT_DELETE_INSTANCE_STARTED" => {
                Some(Self::OperationEventDeleteInstanceStarted)
            }
            "OPERATION_EVENT_DELETE_INSTANCE_ENDED" => {
                Some(Self::OperationEventDeleteInstanceEnded)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SessionEventType {
    Unspecified = 0,
    SessionEventServerStreamerShuttingDown = 1,
    SessionEventServerStreamerReady = 2,
    SessionEventServerStreamerBinaryStarted = 3,
    SessionEventServerStreamerReadPodImageNames = 4,
    SessionEventServerStreamerConnectedToGame = 5,
    SessionEventServerStreamerConnectedToClient = 6,
    SessionEventServerStreamerDisconnectedFromClient = 7,
    SessionEventServerStreamerReceivedCreateSessionRequest = 8,
    SessionEventServerStreamerGameMessageStreamClosed = 9,
    SessionEventServerStreamerGameFrameStreamClosed = 10,
    SessionEventServerStreamerGameMessageStreamError = 11,
    SessionEventServerStreamerGameAudioStreamError = 12,
    SessionEventServerStreamerGameAudioStreamClosed = 13,
    SessionEventServerStreamerGameFrameStreamError = 14,
    SessionEventServerGameDisconnectingAfterPausedTooLong = 15,
    SessionEventServerStreamerReceivedExperimentConfiguration = 16,
    SessionEventServerGameConnectedToLoggingService = 17,
    SessionEventServerStreamerDeterminedSessionOptions = 18,
    SessionEventServerStreamerKilledInMiddleOfSession = 19,
    SessionEventServerGameUpdatedFramePipeline = 20,
    SessionEventServerError = 21,
}
impl SessionEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SessionEventType::Unspecified => "SESSION_EVENT_TYPE_UNSPECIFIED",
            SessionEventType::SessionEventServerStreamerShuttingDown => {
                "SESSION_EVENT_SERVER_STREAMER_SHUTTING_DOWN"
            }
            SessionEventType::SessionEventServerStreamerReady => {
                "SESSION_EVENT_SERVER_STREAMER_READY"
            }
            SessionEventType::SessionEventServerStreamerBinaryStarted => {
                "SESSION_EVENT_SERVER_STREAMER_BINARY_STARTED"
            }
            SessionEventType::SessionEventServerStreamerReadPodImageNames => {
                "SESSION_EVENT_SERVER_STREAMER_READ_POD_IMAGE_NAMES"
            }
            SessionEventType::SessionEventServerStreamerConnectedToGame => {
                "SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_GAME"
            }
            SessionEventType::SessionEventServerStreamerConnectedToClient => {
                "SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_CLIENT"
            }
            SessionEventType::SessionEventServerStreamerDisconnectedFromClient => {
                "SESSION_EVENT_SERVER_STREAMER_DISCONNECTED_FROM_CLIENT"
            }
            SessionEventType::SessionEventServerStreamerReceivedCreateSessionRequest => {
                "SESSION_EVENT_SERVER_STREAMER_RECEIVED_CREATE_SESSION_REQUEST"
            }
            SessionEventType::SessionEventServerStreamerGameMessageStreamClosed => {
                "SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_CLOSED"
            }
            SessionEventType::SessionEventServerStreamerGameFrameStreamClosed => {
                "SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_CLOSED"
            }
            SessionEventType::SessionEventServerStreamerGameMessageStreamError => {
                "SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_ERROR"
            }
            SessionEventType::SessionEventServerStreamerGameAudioStreamError => {
                "SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_ERROR"
            }
            SessionEventType::SessionEventServerStreamerGameAudioStreamClosed => {
                "SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_CLOSED"
            }
            SessionEventType::SessionEventServerStreamerGameFrameStreamError => {
                "SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_ERROR"
            }
            SessionEventType::SessionEventServerGameDisconnectingAfterPausedTooLong => {
                "SESSION_EVENT_SERVER_GAME_DISCONNECTING_AFTER_PAUSED_TOO_LONG"
            }
            SessionEventType::SessionEventServerStreamerReceivedExperimentConfiguration => {
                "SESSION_EVENT_SERVER_STREAMER_RECEIVED_EXPERIMENT_CONFIGURATION"
            }
            SessionEventType::SessionEventServerGameConnectedToLoggingService => {
                "SESSION_EVENT_SERVER_GAME_CONNECTED_TO_LOGGING_SERVICE"
            }
            SessionEventType::SessionEventServerStreamerDeterminedSessionOptions => {
                "SESSION_EVENT_SERVER_STREAMER_DETERMINED_SESSION_OPTIONS"
            }
            SessionEventType::SessionEventServerStreamerKilledInMiddleOfSession => {
                "SESSION_EVENT_SERVER_STREAMER_KILLED_IN_MIDDLE_OF_SESSION"
            }
            SessionEventType::SessionEventServerGameUpdatedFramePipeline => {
                "SESSION_EVENT_SERVER_GAME_UPDATED_FRAME_PIPELINE"
            }
            SessionEventType::SessionEventServerError => "SESSION_EVENT_SERVER_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SESSION_EVENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SESSION_EVENT_SERVER_STREAMER_SHUTTING_DOWN" => {
                Some(Self::SessionEventServerStreamerShuttingDown)
            }
            "SESSION_EVENT_SERVER_STREAMER_READY" => {
                Some(Self::SessionEventServerStreamerReady)
            }
            "SESSION_EVENT_SERVER_STREAMER_BINARY_STARTED" => {
                Some(Self::SessionEventServerStreamerBinaryStarted)
            }
            "SESSION_EVENT_SERVER_STREAMER_READ_POD_IMAGE_NAMES" => {
                Some(Self::SessionEventServerStreamerReadPodImageNames)
            }
            "SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_GAME" => {
                Some(Self::SessionEventServerStreamerConnectedToGame)
            }
            "SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_CLIENT" => {
                Some(Self::SessionEventServerStreamerConnectedToClient)
            }
            "SESSION_EVENT_SERVER_STREAMER_DISCONNECTED_FROM_CLIENT" => {
                Some(Self::SessionEventServerStreamerDisconnectedFromClient)
            }
            "SESSION_EVENT_SERVER_STREAMER_RECEIVED_CREATE_SESSION_REQUEST" => {
                Some(Self::SessionEventServerStreamerReceivedCreateSessionRequest)
            }
            "SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_CLOSED" => {
                Some(Self::SessionEventServerStreamerGameMessageStreamClosed)
            }
            "SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_CLOSED" => {
                Some(Self::SessionEventServerStreamerGameFrameStreamClosed)
            }
            "SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_ERROR" => {
                Some(Self::SessionEventServerStreamerGameMessageStreamError)
            }
            "SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_ERROR" => {
                Some(Self::SessionEventServerStreamerGameAudioStreamError)
            }
            "SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_CLOSED" => {
                Some(Self::SessionEventServerStreamerGameAudioStreamClosed)
            }
            "SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_ERROR" => {
                Some(Self::SessionEventServerStreamerGameFrameStreamError)
            }
            "SESSION_EVENT_SERVER_GAME_DISCONNECTING_AFTER_PAUSED_TOO_LONG" => {
                Some(Self::SessionEventServerGameDisconnectingAfterPausedTooLong)
            }
            "SESSION_EVENT_SERVER_STREAMER_RECEIVED_EXPERIMENT_CONFIGURATION" => {
                Some(Self::SessionEventServerStreamerReceivedExperimentConfiguration)
            }
            "SESSION_EVENT_SERVER_GAME_CONNECTED_TO_LOGGING_SERVICE" => {
                Some(Self::SessionEventServerGameConnectedToLoggingService)
            }
            "SESSION_EVENT_SERVER_STREAMER_DETERMINED_SESSION_OPTIONS" => {
                Some(Self::SessionEventServerStreamerDeterminedSessionOptions)
            }
            "SESSION_EVENT_SERVER_STREAMER_KILLED_IN_MIDDLE_OF_SESSION" => {
                Some(Self::SessionEventServerStreamerKilledInMiddleOfSession)
            }
            "SESSION_EVENT_SERVER_GAME_UPDATED_FRAME_PIPELINE" => {
                Some(Self::SessionEventServerGameUpdatedFramePipeline)
            }
            "SESSION_EVENT_SERVER_ERROR" => Some(Self::SessionEventServerError),
            _ => None,
        }
    }
}
