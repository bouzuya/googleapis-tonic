// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quota_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub metric: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub service: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_precise: bool,
    #[prost(string, tag = "6")]
    pub refresh_interval: ::prost::alloc::string::String,
    #[prost(enumeration = "quota_info::ContainerType", tag = "7")]
    pub container_type: i32,
    #[prost(string, repeated, tag = "8")]
    pub dimensions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "9")]
    pub metric_display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub quota_display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub metric_unit: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "12")]
    pub quota_increase_eligibility: ::core::option::Option<QuotaIncreaseEligibility>,
    #[prost(bool, tag = "13")]
    pub is_fixed: bool,
    #[prost(message, repeated, tag = "14")]
    pub dimensions_infos: ::prost::alloc::vec::Vec<DimensionsInfo>,
    #[prost(bool, tag = "15")]
    pub is_concurrent: bool,
    #[prost(string, tag = "17")]
    pub service_request_quota_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `QuotaInfo`.
pub mod quota_info {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ContainerType {
        Unspecified = 0,
        Project = 1,
        Folder = 2,
        Organization = 3,
    }
    impl ContainerType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ContainerType::Unspecified => "CONTAINER_TYPE_UNSPECIFIED",
                ContainerType::Project => "PROJECT",
                ContainerType::Folder => "FOLDER",
                ContainerType::Organization => "ORGANIZATION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CONTAINER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "PROJECT" => Some(Self::Project),
                "FOLDER" => Some(Self::Folder),
                "ORGANIZATION" => Some(Self::Organization),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuotaIncreaseEligibility {
    #[prost(bool, tag = "1")]
    pub is_eligible: bool,
    #[prost(enumeration = "quota_increase_eligibility::IneligibilityReason", tag = "2")]
    pub ineligibility_reason: i32,
}
/// Nested message and enum types in `QuotaIncreaseEligibility`.
pub mod quota_increase_eligibility {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum IneligibilityReason {
        Unspecified = 0,
        NoValidBillingAccount = 1,
        Other = 2,
    }
    impl IneligibilityReason {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                IneligibilityReason::Unspecified => "INELIGIBILITY_REASON_UNSPECIFIED",
                IneligibilityReason::NoValidBillingAccount => "NO_VALID_BILLING_ACCOUNT",
                IneligibilityReason::Other => "OTHER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INELIGIBILITY_REASON_UNSPECIFIED" => Some(Self::Unspecified),
                "NO_VALID_BILLING_ACCOUNT" => Some(Self::NoValidBillingAccount),
                "OTHER" => Some(Self::Other),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaPreference {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(btree_map = "string, string", tag = "2")]
    pub dimensions: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "3")]
    pub quota_config: ::core::option::Option<QuotaConfig>,
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "7")]
    pub service: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub quota_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub reconciling: bool,
    #[prost(string, tag = "11")]
    pub justification: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub contact_email: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaConfig {
    #[prost(int64, tag = "1")]
    pub preferred_value: i64,
    #[prost(string, tag = "2")]
    pub state_detail: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub granted_value: ::core::option::Option<i64>,
    #[prost(string, tag = "4")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(btree_map = "string, string", tag = "5")]
    pub annotations: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(enumeration = "quota_config::Origin", tag = "6")]
    pub request_origin: i32,
}
/// Nested message and enum types in `QuotaConfig`.
pub mod quota_config {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Origin {
        Unspecified = 0,
        CloudConsole = 1,
        AutoAdjuster = 2,
    }
    impl Origin {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Origin::Unspecified => "ORIGIN_UNSPECIFIED",
                Origin::CloudConsole => "CLOUD_CONSOLE",
                Origin::AutoAdjuster => "AUTO_ADJUSTER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ORIGIN_UNSPECIFIED" => Some(Self::Unspecified),
                "CLOUD_CONSOLE" => Some(Self::CloudConsole),
                "AUTO_ADJUSTER" => Some(Self::AutoAdjuster),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DimensionsInfo {
    #[prost(btree_map = "string, string", tag = "1")]
    pub dimensions: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "2")]
    pub details: ::core::option::Option<QuotaDetails>,
    #[prost(string, repeated, tag = "3")]
    pub applicable_locations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuotaDetails {
    #[prost(int64, tag = "1")]
    pub value: i64,
    #[prost(message, optional, tag = "3")]
    pub rollout_info: ::core::option::Option<RolloutInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RolloutInfo {
    #[prost(bool, tag = "1")]
    pub ongoing_rollout: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum QuotaSafetyCheck {
    Unspecified = 0,
    QuotaDecreaseBelowUsage = 1,
    QuotaDecreasePercentageTooHigh = 2,
}
impl QuotaSafetyCheck {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            QuotaSafetyCheck::Unspecified => "QUOTA_SAFETY_CHECK_UNSPECIFIED",
            QuotaSafetyCheck::QuotaDecreaseBelowUsage => "QUOTA_DECREASE_BELOW_USAGE",
            QuotaSafetyCheck::QuotaDecreasePercentageTooHigh => {
                "QUOTA_DECREASE_PERCENTAGE_TOO_HIGH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "QUOTA_SAFETY_CHECK_UNSPECIFIED" => Some(Self::Unspecified),
            "QUOTA_DECREASE_BELOW_USAGE" => Some(Self::QuotaDecreaseBelowUsage),
            "QUOTA_DECREASE_PERCENTAGE_TOO_HIGH" => {
                Some(Self::QuotaDecreasePercentageTooHigh)
            }
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQuotaInfosRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQuotaInfosResponse {
    #[prost(message, repeated, tag = "1")]
    pub quota_infos: ::prost::alloc::vec::Vec<QuotaInfo>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuotaInfoRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQuotaPreferencesRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQuotaPreferencesResponse {
    #[prost(message, repeated, tag = "1")]
    pub quota_preferences: ::prost::alloc::vec::Vec<QuotaPreference>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuotaPreferenceRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateQuotaPreferenceRequest {
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quota_preference_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub quota_preference: ::core::option::Option<QuotaPreference>,
    #[prost(enumeration = "QuotaSafetyCheck", repeated, tag = "4")]
    pub ignore_safety_checks: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateQuotaPreferenceRequest {
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "2")]
    pub quota_preference: ::core::option::Option<QuotaPreference>,
    #[prost(bool, tag = "3")]
    pub allow_missing: bool,
    #[prost(bool, tag = "4")]
    pub validate_only: bool,
    #[prost(enumeration = "QuotaSafetyCheck", repeated, tag = "5")]
    pub ignore_safety_checks: ::prost::alloc::vec::Vec<i32>,
}
/// Generated client implementations.
pub mod cloud_quotas_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The Cloud Quotas API is an infrastructure service for Google Cloud that lets
    /// service consumers list and manage their resource usage limits.
    ///
    /// - List/Get the metadata and current status of the quotas for a service.
    /// - Create/Update quota preferencess that declare the preferred quota values.
    /// - Check the status of a quota preference request.
    /// - List/Get pending and historical quota preference.
    #[derive(Debug, Clone)]
    pub struct CloudQuotasClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> CloudQuotasClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CloudQuotasClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            CloudQuotasClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists QuotaInfos of all quotas for a given project, folder or organization.
        pub async fn list_quota_infos(
            &mut self,
            request: impl tonic::IntoRequest<super::ListQuotaInfosRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListQuotaInfosResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.api.cloudquotas.v1.CloudQuotas/ListQuotaInfos",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.api.cloudquotas.v1.CloudQuotas",
                        "ListQuotaInfos",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieve the QuotaInfo of a quota for a project, folder or organization.
        pub async fn get_quota_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetQuotaInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::QuotaInfo>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.api.cloudquotas.v1.CloudQuotas/GetQuotaInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.api.cloudquotas.v1.CloudQuotas",
                        "GetQuotaInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists QuotaPreferences in a given project, folder or organization.
        pub async fn list_quota_preferences(
            &mut self,
            request: impl tonic::IntoRequest<super::ListQuotaPreferencesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListQuotaPreferencesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.api.cloudquotas.v1.CloudQuotas/ListQuotaPreferences",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.api.cloudquotas.v1.CloudQuotas",
                        "ListQuotaPreferences",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single QuotaPreference.
        pub async fn get_quota_preference(
            &mut self,
            request: impl tonic::IntoRequest<super::GetQuotaPreferenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuotaPreference>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.api.cloudquotas.v1.CloudQuotas/GetQuotaPreference",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.api.cloudquotas.v1.CloudQuotas",
                        "GetQuotaPreference",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new QuotaPreference that declares the desired value for a quota.
        pub async fn create_quota_preference(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateQuotaPreferenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuotaPreference>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.api.cloudquotas.v1.CloudQuotas/CreateQuotaPreference",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.api.cloudquotas.v1.CloudQuotas",
                        "CreateQuotaPreference",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single QuotaPreference. It can updates the
        /// config in any states, not just the ones pending approval.
        pub async fn update_quota_preference(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateQuotaPreferenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuotaPreference>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.api.cloudquotas.v1.CloudQuotas/UpdateQuotaPreference",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.api.cloudquotas.v1.CloudQuotas",
                        "UpdateQuotaPreference",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
