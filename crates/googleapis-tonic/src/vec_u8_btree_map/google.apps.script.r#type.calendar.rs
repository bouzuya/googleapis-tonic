// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalendarAddOnManifest {
    #[prost(message, optional, tag = "6")]
    pub homepage_trigger: ::core::option::Option<super::HomepageExtensionPoint>,
    #[prost(message, repeated, tag = "3")]
    pub conference_solution: ::prost::alloc::vec::Vec<ConferenceSolution>,
    #[prost(string, tag = "5")]
    pub create_settings_url_function: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub event_open_trigger: ::core::option::Option<CalendarExtensionPoint>,
    #[prost(message, optional, tag = "11")]
    pub event_update_trigger: ::core::option::Option<CalendarExtensionPoint>,
    #[prost(enumeration = "calendar_add_on_manifest::EventAccess", tag = "12")]
    pub current_event_access: i32,
}
/// Nested message and enum types in `CalendarAddOnManifest`.
pub mod calendar_add_on_manifest {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum EventAccess {
        Unspecified = 0,
        Metadata = 1,
        Read = 3,
        Write = 4,
        ReadWrite = 5,
    }
    impl EventAccess {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                EventAccess::Unspecified => "UNSPECIFIED",
                EventAccess::Metadata => "METADATA",
                EventAccess::Read => "READ",
                EventAccess::Write => "WRITE",
                EventAccess::ReadWrite => "READ_WRITE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "METADATA" => Some(Self::Metadata),
                "READ" => Some(Self::Read),
                "WRITE" => Some(Self::Write),
                "READ_WRITE" => Some(Self::ReadWrite),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConferenceSolution {
    #[prost(string, tag = "1")]
    pub on_create_function: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub logo_url: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalendarExtensionPoint {
    #[prost(string, tag = "1")]
    pub run_function: ::prost::alloc::string::String,
}
