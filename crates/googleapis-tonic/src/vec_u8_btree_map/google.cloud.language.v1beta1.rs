// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Document {
    #[prost(enumeration = "document::Type", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "4")]
    pub language: ::prost::alloc::string::String,
    #[prost(oneof = "document::Source", tags = "2, 3")]
    pub source: ::core::option::Option<document::Source>,
}
/// Nested message and enum types in `Document`.
pub mod document {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        Unspecified = 0,
        PlainText = 1,
        Html = 2,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Type::Unspecified => "TYPE_UNSPECIFIED",
                Type::PlainText => "PLAIN_TEXT",
                Type::Html => "HTML",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "PLAIN_TEXT" => Some(Self::PlainText),
                "HTML" => Some(Self::Html),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        #[prost(string, tag = "2")]
        Content(::prost::alloc::string::String),
        #[prost(string, tag = "3")]
        GcsContentUri(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sentence {
    #[prost(message, optional, tag = "1")]
    pub text: ::core::option::Option<TextSpan>,
    #[prost(message, optional, tag = "2")]
    pub sentiment: ::core::option::Option<Sentiment>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entity {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "entity::Type", tag = "2")]
    pub r#type: i32,
    #[prost(btree_map = "string, string", tag = "3")]
    pub metadata: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(float, tag = "4")]
    pub salience: f32,
    #[prost(message, repeated, tag = "5")]
    pub mentions: ::prost::alloc::vec::Vec<EntityMention>,
}
/// Nested message and enum types in `Entity`.
pub mod entity {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        Unknown = 0,
        Person = 1,
        Location = 2,
        Organization = 3,
        Event = 4,
        WorkOfArt = 5,
        ConsumerGood = 6,
        Other = 7,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Type::Unknown => "UNKNOWN",
                Type::Person => "PERSON",
                Type::Location => "LOCATION",
                Type::Organization => "ORGANIZATION",
                Type::Event => "EVENT",
                Type::WorkOfArt => "WORK_OF_ART",
                Type::ConsumerGood => "CONSUMER_GOOD",
                Type::Other => "OTHER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "PERSON" => Some(Self::Person),
                "LOCATION" => Some(Self::Location),
                "ORGANIZATION" => Some(Self::Organization),
                "EVENT" => Some(Self::Event),
                "WORK_OF_ART" => Some(Self::WorkOfArt),
                "CONSUMER_GOOD" => Some(Self::ConsumerGood),
                "OTHER" => Some(Self::Other),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Token {
    #[prost(message, optional, tag = "1")]
    pub text: ::core::option::Option<TextSpan>,
    #[prost(message, optional, tag = "2")]
    pub part_of_speech: ::core::option::Option<PartOfSpeech>,
    #[prost(message, optional, tag = "3")]
    pub dependency_edge: ::core::option::Option<DependencyEdge>,
    #[prost(string, tag = "4")]
    pub lemma: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sentiment {
    #[prost(float, tag = "1")]
    pub polarity: f32,
    #[prost(float, tag = "2")]
    pub magnitude: f32,
    #[prost(float, tag = "3")]
    pub score: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PartOfSpeech {
    #[prost(enumeration = "part_of_speech::Tag", tag = "1")]
    pub tag: i32,
    #[prost(enumeration = "part_of_speech::Aspect", tag = "2")]
    pub aspect: i32,
    #[prost(enumeration = "part_of_speech::Case", tag = "3")]
    pub case: i32,
    #[prost(enumeration = "part_of_speech::Form", tag = "4")]
    pub form: i32,
    #[prost(enumeration = "part_of_speech::Gender", tag = "5")]
    pub gender: i32,
    #[prost(enumeration = "part_of_speech::Mood", tag = "6")]
    pub mood: i32,
    #[prost(enumeration = "part_of_speech::Number", tag = "7")]
    pub number: i32,
    #[prost(enumeration = "part_of_speech::Person", tag = "8")]
    pub person: i32,
    #[prost(enumeration = "part_of_speech::Proper", tag = "9")]
    pub proper: i32,
    #[prost(enumeration = "part_of_speech::Reciprocity", tag = "10")]
    pub reciprocity: i32,
    #[prost(enumeration = "part_of_speech::Tense", tag = "11")]
    pub tense: i32,
    #[prost(enumeration = "part_of_speech::Voice", tag = "12")]
    pub voice: i32,
}
/// Nested message and enum types in `PartOfSpeech`.
pub mod part_of_speech {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Tag {
        Unknown = 0,
        Adj = 1,
        Adp = 2,
        Adv = 3,
        Conj = 4,
        Det = 5,
        Noun = 6,
        Num = 7,
        Pron = 8,
        Prt = 9,
        Punct = 10,
        Verb = 11,
        X = 12,
        Affix = 13,
    }
    impl Tag {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Tag::Unknown => "UNKNOWN",
                Tag::Adj => "ADJ",
                Tag::Adp => "ADP",
                Tag::Adv => "ADV",
                Tag::Conj => "CONJ",
                Tag::Det => "DET",
                Tag::Noun => "NOUN",
                Tag::Num => "NUM",
                Tag::Pron => "PRON",
                Tag::Prt => "PRT",
                Tag::Punct => "PUNCT",
                Tag::Verb => "VERB",
                Tag::X => "X",
                Tag::Affix => "AFFIX",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "ADJ" => Some(Self::Adj),
                "ADP" => Some(Self::Adp),
                "ADV" => Some(Self::Adv),
                "CONJ" => Some(Self::Conj),
                "DET" => Some(Self::Det),
                "NOUN" => Some(Self::Noun),
                "NUM" => Some(Self::Num),
                "PRON" => Some(Self::Pron),
                "PRT" => Some(Self::Prt),
                "PUNCT" => Some(Self::Punct),
                "VERB" => Some(Self::Verb),
                "X" => Some(Self::X),
                "AFFIX" => Some(Self::Affix),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Aspect {
        Unknown = 0,
        Perfective = 1,
        Imperfective = 2,
        Progressive = 3,
    }
    impl Aspect {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Aspect::Unknown => "ASPECT_UNKNOWN",
                Aspect::Perfective => "PERFECTIVE",
                Aspect::Imperfective => "IMPERFECTIVE",
                Aspect::Progressive => "PROGRESSIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ASPECT_UNKNOWN" => Some(Self::Unknown),
                "PERFECTIVE" => Some(Self::Perfective),
                "IMPERFECTIVE" => Some(Self::Imperfective),
                "PROGRESSIVE" => Some(Self::Progressive),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Case {
        Unknown = 0,
        Accusative = 1,
        Adverbial = 2,
        Complementive = 3,
        Dative = 4,
        Genitive = 5,
        Instrumental = 6,
        Locative = 7,
        Nominative = 8,
        Oblique = 9,
        Partitive = 10,
        Prepositional = 11,
        ReflexiveCase = 12,
        RelativeCase = 13,
        Vocative = 14,
    }
    impl Case {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Case::Unknown => "CASE_UNKNOWN",
                Case::Accusative => "ACCUSATIVE",
                Case::Adverbial => "ADVERBIAL",
                Case::Complementive => "COMPLEMENTIVE",
                Case::Dative => "DATIVE",
                Case::Genitive => "GENITIVE",
                Case::Instrumental => "INSTRUMENTAL",
                Case::Locative => "LOCATIVE",
                Case::Nominative => "NOMINATIVE",
                Case::Oblique => "OBLIQUE",
                Case::Partitive => "PARTITIVE",
                Case::Prepositional => "PREPOSITIONAL",
                Case::ReflexiveCase => "REFLEXIVE_CASE",
                Case::RelativeCase => "RELATIVE_CASE",
                Case::Vocative => "VOCATIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CASE_UNKNOWN" => Some(Self::Unknown),
                "ACCUSATIVE" => Some(Self::Accusative),
                "ADVERBIAL" => Some(Self::Adverbial),
                "COMPLEMENTIVE" => Some(Self::Complementive),
                "DATIVE" => Some(Self::Dative),
                "GENITIVE" => Some(Self::Genitive),
                "INSTRUMENTAL" => Some(Self::Instrumental),
                "LOCATIVE" => Some(Self::Locative),
                "NOMINATIVE" => Some(Self::Nominative),
                "OBLIQUE" => Some(Self::Oblique),
                "PARTITIVE" => Some(Self::Partitive),
                "PREPOSITIONAL" => Some(Self::Prepositional),
                "REFLEXIVE_CASE" => Some(Self::ReflexiveCase),
                "RELATIVE_CASE" => Some(Self::RelativeCase),
                "VOCATIVE" => Some(Self::Vocative),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Form {
        Unknown = 0,
        Adnomial = 1,
        Auxiliary = 2,
        Complementizer = 3,
        FinalEnding = 4,
        Gerund = 5,
        Realis = 6,
        Irrealis = 7,
        Short = 8,
        Long = 9,
        Order = 10,
        Specific = 11,
    }
    impl Form {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Form::Unknown => "FORM_UNKNOWN",
                Form::Adnomial => "ADNOMIAL",
                Form::Auxiliary => "AUXILIARY",
                Form::Complementizer => "COMPLEMENTIZER",
                Form::FinalEnding => "FINAL_ENDING",
                Form::Gerund => "GERUND",
                Form::Realis => "REALIS",
                Form::Irrealis => "IRREALIS",
                Form::Short => "SHORT",
                Form::Long => "LONG",
                Form::Order => "ORDER",
                Form::Specific => "SPECIFIC",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "FORM_UNKNOWN" => Some(Self::Unknown),
                "ADNOMIAL" => Some(Self::Adnomial),
                "AUXILIARY" => Some(Self::Auxiliary),
                "COMPLEMENTIZER" => Some(Self::Complementizer),
                "FINAL_ENDING" => Some(Self::FinalEnding),
                "GERUND" => Some(Self::Gerund),
                "REALIS" => Some(Self::Realis),
                "IRREALIS" => Some(Self::Irrealis),
                "SHORT" => Some(Self::Short),
                "LONG" => Some(Self::Long),
                "ORDER" => Some(Self::Order),
                "SPECIFIC" => Some(Self::Specific),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Gender {
        Unknown = 0,
        Feminine = 1,
        Masculine = 2,
        Neuter = 3,
    }
    impl Gender {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Gender::Unknown => "GENDER_UNKNOWN",
                Gender::Feminine => "FEMININE",
                Gender::Masculine => "MASCULINE",
                Gender::Neuter => "NEUTER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "GENDER_UNKNOWN" => Some(Self::Unknown),
                "FEMININE" => Some(Self::Feminine),
                "MASCULINE" => Some(Self::Masculine),
                "NEUTER" => Some(Self::Neuter),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Mood {
        Unknown = 0,
        ConditionalMood = 1,
        Imperative = 2,
        Indicative = 3,
        Interrogative = 4,
        Jussive = 5,
        Subjunctive = 6,
    }
    impl Mood {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Mood::Unknown => "MOOD_UNKNOWN",
                Mood::ConditionalMood => "CONDITIONAL_MOOD",
                Mood::Imperative => "IMPERATIVE",
                Mood::Indicative => "INDICATIVE",
                Mood::Interrogative => "INTERROGATIVE",
                Mood::Jussive => "JUSSIVE",
                Mood::Subjunctive => "SUBJUNCTIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "MOOD_UNKNOWN" => Some(Self::Unknown),
                "CONDITIONAL_MOOD" => Some(Self::ConditionalMood),
                "IMPERATIVE" => Some(Self::Imperative),
                "INDICATIVE" => Some(Self::Indicative),
                "INTERROGATIVE" => Some(Self::Interrogative),
                "JUSSIVE" => Some(Self::Jussive),
                "SUBJUNCTIVE" => Some(Self::Subjunctive),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Number {
        Unknown = 0,
        Singular = 1,
        Plural = 2,
        Dual = 3,
    }
    impl Number {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Number::Unknown => "NUMBER_UNKNOWN",
                Number::Singular => "SINGULAR",
                Number::Plural => "PLURAL",
                Number::Dual => "DUAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NUMBER_UNKNOWN" => Some(Self::Unknown),
                "SINGULAR" => Some(Self::Singular),
                "PLURAL" => Some(Self::Plural),
                "DUAL" => Some(Self::Dual),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Person {
        Unknown = 0,
        First = 1,
        Second = 2,
        Third = 3,
        ReflexivePerson = 4,
    }
    impl Person {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Person::Unknown => "PERSON_UNKNOWN",
                Person::First => "FIRST",
                Person::Second => "SECOND",
                Person::Third => "THIRD",
                Person::ReflexivePerson => "REFLEXIVE_PERSON",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PERSON_UNKNOWN" => Some(Self::Unknown),
                "FIRST" => Some(Self::First),
                "SECOND" => Some(Self::Second),
                "THIRD" => Some(Self::Third),
                "REFLEXIVE_PERSON" => Some(Self::ReflexivePerson),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Proper {
        Unknown = 0,
        Proper = 1,
        NotProper = 2,
    }
    impl Proper {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Proper::Unknown => "PROPER_UNKNOWN",
                Proper::Proper => "PROPER",
                Proper::NotProper => "NOT_PROPER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PROPER_UNKNOWN" => Some(Self::Unknown),
                "PROPER" => Some(Self::Proper),
                "NOT_PROPER" => Some(Self::NotProper),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Reciprocity {
        Unknown = 0,
        Reciprocal = 1,
        NonReciprocal = 2,
    }
    impl Reciprocity {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Reciprocity::Unknown => "RECIPROCITY_UNKNOWN",
                Reciprocity::Reciprocal => "RECIPROCAL",
                Reciprocity::NonReciprocal => "NON_RECIPROCAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "RECIPROCITY_UNKNOWN" => Some(Self::Unknown),
                "RECIPROCAL" => Some(Self::Reciprocal),
                "NON_RECIPROCAL" => Some(Self::NonReciprocal),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Tense {
        Unknown = 0,
        ConditionalTense = 1,
        Future = 2,
        Past = 3,
        Present = 4,
        Imperfect = 5,
        Pluperfect = 6,
    }
    impl Tense {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Tense::Unknown => "TENSE_UNKNOWN",
                Tense::ConditionalTense => "CONDITIONAL_TENSE",
                Tense::Future => "FUTURE",
                Tense::Past => "PAST",
                Tense::Present => "PRESENT",
                Tense::Imperfect => "IMPERFECT",
                Tense::Pluperfect => "PLUPERFECT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TENSE_UNKNOWN" => Some(Self::Unknown),
                "CONDITIONAL_TENSE" => Some(Self::ConditionalTense),
                "FUTURE" => Some(Self::Future),
                "PAST" => Some(Self::Past),
                "PRESENT" => Some(Self::Present),
                "IMPERFECT" => Some(Self::Imperfect),
                "PLUPERFECT" => Some(Self::Pluperfect),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Voice {
        Unknown = 0,
        Active = 1,
        Causative = 2,
        Passive = 3,
    }
    impl Voice {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Voice::Unknown => "VOICE_UNKNOWN",
                Voice::Active => "ACTIVE",
                Voice::Causative => "CAUSATIVE",
                Voice::Passive => "PASSIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "VOICE_UNKNOWN" => Some(Self::Unknown),
                "ACTIVE" => Some(Self::Active),
                "CAUSATIVE" => Some(Self::Causative),
                "PASSIVE" => Some(Self::Passive),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DependencyEdge {
    #[prost(int32, tag = "1")]
    pub head_token_index: i32,
    #[prost(enumeration = "dependency_edge::Label", tag = "2")]
    pub label: i32,
}
/// Nested message and enum types in `DependencyEdge`.
pub mod dependency_edge {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Label {
        Unknown = 0,
        Abbrev = 1,
        Acomp = 2,
        Advcl = 3,
        Advmod = 4,
        Amod = 5,
        Appos = 6,
        Attr = 7,
        Aux = 8,
        Auxpass = 9,
        Cc = 10,
        Ccomp = 11,
        Conj = 12,
        Csubj = 13,
        Csubjpass = 14,
        Dep = 15,
        Det = 16,
        Discourse = 17,
        Dobj = 18,
        Expl = 19,
        Goeswith = 20,
        Iobj = 21,
        Mark = 22,
        Mwe = 23,
        Mwv = 24,
        Neg = 25,
        Nn = 26,
        Npadvmod = 27,
        Nsubj = 28,
        Nsubjpass = 29,
        Num = 30,
        Number = 31,
        P = 32,
        Parataxis = 33,
        Partmod = 34,
        Pcomp = 35,
        Pobj = 36,
        Poss = 37,
        Postneg = 38,
        Precomp = 39,
        Preconj = 40,
        Predet = 41,
        Pref = 42,
        Prep = 43,
        Pronl = 44,
        Prt = 45,
        Ps = 46,
        Quantmod = 47,
        Rcmod = 48,
        Rcmodrel = 49,
        Rdrop = 50,
        Ref = 51,
        Remnant = 52,
        Reparandum = 53,
        Root = 54,
        Snum = 55,
        Suff = 56,
        Tmod = 57,
        Topic = 58,
        Vmod = 59,
        Vocative = 60,
        Xcomp = 61,
        Suffix = 62,
        Title = 63,
        Advphmod = 64,
        Auxcaus = 65,
        Auxvv = 66,
        Dtmod = 67,
        Foreign = 68,
        Kw = 69,
        List = 70,
        Nomc = 71,
        Nomcsubj = 72,
        Nomcsubjpass = 73,
        Numc = 74,
        Cop = 75,
        Dislocated = 76,
    }
    impl Label {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Label::Unknown => "UNKNOWN",
                Label::Abbrev => "ABBREV",
                Label::Acomp => "ACOMP",
                Label::Advcl => "ADVCL",
                Label::Advmod => "ADVMOD",
                Label::Amod => "AMOD",
                Label::Appos => "APPOS",
                Label::Attr => "ATTR",
                Label::Aux => "AUX",
                Label::Auxpass => "AUXPASS",
                Label::Cc => "CC",
                Label::Ccomp => "CCOMP",
                Label::Conj => "CONJ",
                Label::Csubj => "CSUBJ",
                Label::Csubjpass => "CSUBJPASS",
                Label::Dep => "DEP",
                Label::Det => "DET",
                Label::Discourse => "DISCOURSE",
                Label::Dobj => "DOBJ",
                Label::Expl => "EXPL",
                Label::Goeswith => "GOESWITH",
                Label::Iobj => "IOBJ",
                Label::Mark => "MARK",
                Label::Mwe => "MWE",
                Label::Mwv => "MWV",
                Label::Neg => "NEG",
                Label::Nn => "NN",
                Label::Npadvmod => "NPADVMOD",
                Label::Nsubj => "NSUBJ",
                Label::Nsubjpass => "NSUBJPASS",
                Label::Num => "NUM",
                Label::Number => "NUMBER",
                Label::P => "P",
                Label::Parataxis => "PARATAXIS",
                Label::Partmod => "PARTMOD",
                Label::Pcomp => "PCOMP",
                Label::Pobj => "POBJ",
                Label::Poss => "POSS",
                Label::Postneg => "POSTNEG",
                Label::Precomp => "PRECOMP",
                Label::Preconj => "PRECONJ",
                Label::Predet => "PREDET",
                Label::Pref => "PREF",
                Label::Prep => "PREP",
                Label::Pronl => "PRONL",
                Label::Prt => "PRT",
                Label::Ps => "PS",
                Label::Quantmod => "QUANTMOD",
                Label::Rcmod => "RCMOD",
                Label::Rcmodrel => "RCMODREL",
                Label::Rdrop => "RDROP",
                Label::Ref => "REF",
                Label::Remnant => "REMNANT",
                Label::Reparandum => "REPARANDUM",
                Label::Root => "ROOT",
                Label::Snum => "SNUM",
                Label::Suff => "SUFF",
                Label::Tmod => "TMOD",
                Label::Topic => "TOPIC",
                Label::Vmod => "VMOD",
                Label::Vocative => "VOCATIVE",
                Label::Xcomp => "XCOMP",
                Label::Suffix => "SUFFIX",
                Label::Title => "TITLE",
                Label::Advphmod => "ADVPHMOD",
                Label::Auxcaus => "AUXCAUS",
                Label::Auxvv => "AUXVV",
                Label::Dtmod => "DTMOD",
                Label::Foreign => "FOREIGN",
                Label::Kw => "KW",
                Label::List => "LIST",
                Label::Nomc => "NOMC",
                Label::Nomcsubj => "NOMCSUBJ",
                Label::Nomcsubjpass => "NOMCSUBJPASS",
                Label::Numc => "NUMC",
                Label::Cop => "COP",
                Label::Dislocated => "DISLOCATED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "ABBREV" => Some(Self::Abbrev),
                "ACOMP" => Some(Self::Acomp),
                "ADVCL" => Some(Self::Advcl),
                "ADVMOD" => Some(Self::Advmod),
                "AMOD" => Some(Self::Amod),
                "APPOS" => Some(Self::Appos),
                "ATTR" => Some(Self::Attr),
                "AUX" => Some(Self::Aux),
                "AUXPASS" => Some(Self::Auxpass),
                "CC" => Some(Self::Cc),
                "CCOMP" => Some(Self::Ccomp),
                "CONJ" => Some(Self::Conj),
                "CSUBJ" => Some(Self::Csubj),
                "CSUBJPASS" => Some(Self::Csubjpass),
                "DEP" => Some(Self::Dep),
                "DET" => Some(Self::Det),
                "DISCOURSE" => Some(Self::Discourse),
                "DOBJ" => Some(Self::Dobj),
                "EXPL" => Some(Self::Expl),
                "GOESWITH" => Some(Self::Goeswith),
                "IOBJ" => Some(Self::Iobj),
                "MARK" => Some(Self::Mark),
                "MWE" => Some(Self::Mwe),
                "MWV" => Some(Self::Mwv),
                "NEG" => Some(Self::Neg),
                "NN" => Some(Self::Nn),
                "NPADVMOD" => Some(Self::Npadvmod),
                "NSUBJ" => Some(Self::Nsubj),
                "NSUBJPASS" => Some(Self::Nsubjpass),
                "NUM" => Some(Self::Num),
                "NUMBER" => Some(Self::Number),
                "P" => Some(Self::P),
                "PARATAXIS" => Some(Self::Parataxis),
                "PARTMOD" => Some(Self::Partmod),
                "PCOMP" => Some(Self::Pcomp),
                "POBJ" => Some(Self::Pobj),
                "POSS" => Some(Self::Poss),
                "POSTNEG" => Some(Self::Postneg),
                "PRECOMP" => Some(Self::Precomp),
                "PRECONJ" => Some(Self::Preconj),
                "PREDET" => Some(Self::Predet),
                "PREF" => Some(Self::Pref),
                "PREP" => Some(Self::Prep),
                "PRONL" => Some(Self::Pronl),
                "PRT" => Some(Self::Prt),
                "PS" => Some(Self::Ps),
                "QUANTMOD" => Some(Self::Quantmod),
                "RCMOD" => Some(Self::Rcmod),
                "RCMODREL" => Some(Self::Rcmodrel),
                "RDROP" => Some(Self::Rdrop),
                "REF" => Some(Self::Ref),
                "REMNANT" => Some(Self::Remnant),
                "REPARANDUM" => Some(Self::Reparandum),
                "ROOT" => Some(Self::Root),
                "SNUM" => Some(Self::Snum),
                "SUFF" => Some(Self::Suff),
                "TMOD" => Some(Self::Tmod),
                "TOPIC" => Some(Self::Topic),
                "VMOD" => Some(Self::Vmod),
                "VOCATIVE" => Some(Self::Vocative),
                "XCOMP" => Some(Self::Xcomp),
                "SUFFIX" => Some(Self::Suffix),
                "TITLE" => Some(Self::Title),
                "ADVPHMOD" => Some(Self::Advphmod),
                "AUXCAUS" => Some(Self::Auxcaus),
                "AUXVV" => Some(Self::Auxvv),
                "DTMOD" => Some(Self::Dtmod),
                "FOREIGN" => Some(Self::Foreign),
                "KW" => Some(Self::Kw),
                "LIST" => Some(Self::List),
                "NOMC" => Some(Self::Nomc),
                "NOMCSUBJ" => Some(Self::Nomcsubj),
                "NOMCSUBJPASS" => Some(Self::Nomcsubjpass),
                "NUMC" => Some(Self::Numc),
                "COP" => Some(Self::Cop),
                "DISLOCATED" => Some(Self::Dislocated),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityMention {
    #[prost(message, optional, tag = "1")]
    pub text: ::core::option::Option<TextSpan>,
    #[prost(enumeration = "entity_mention::Type", tag = "2")]
    pub r#type: i32,
}
/// Nested message and enum types in `EntityMention`.
pub mod entity_mention {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        Unknown = 0,
        Proper = 1,
        Common = 2,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Type::Unknown => "TYPE_UNKNOWN",
                Type::Proper => "PROPER",
                Type::Common => "COMMON",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TYPE_UNKNOWN" => Some(Self::Unknown),
                "PROPER" => Some(Self::Proper),
                "COMMON" => Some(Self::Common),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextSpan {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub begin_offset: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeSentimentRequest {
    #[prost(message, optional, tag = "1")]
    pub document: ::core::option::Option<Document>,
    #[prost(enumeration = "EncodingType", tag = "2")]
    pub encoding_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeSentimentResponse {
    #[prost(message, optional, tag = "1")]
    pub document_sentiment: ::core::option::Option<Sentiment>,
    #[prost(string, tag = "2")]
    pub language: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub sentences: ::prost::alloc::vec::Vec<Sentence>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeEntitiesRequest {
    #[prost(message, optional, tag = "1")]
    pub document: ::core::option::Option<Document>,
    #[prost(enumeration = "EncodingType", tag = "2")]
    pub encoding_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeEntitiesResponse {
    #[prost(message, repeated, tag = "1")]
    pub entities: ::prost::alloc::vec::Vec<Entity>,
    #[prost(string, tag = "2")]
    pub language: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeSyntaxRequest {
    #[prost(message, optional, tag = "1")]
    pub document: ::core::option::Option<Document>,
    #[prost(enumeration = "EncodingType", tag = "2")]
    pub encoding_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeSyntaxResponse {
    #[prost(message, repeated, tag = "1")]
    pub sentences: ::prost::alloc::vec::Vec<Sentence>,
    #[prost(message, repeated, tag = "2")]
    pub tokens: ::prost::alloc::vec::Vec<Token>,
    #[prost(string, tag = "3")]
    pub language: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnotateTextRequest {
    #[prost(message, optional, tag = "1")]
    pub document: ::core::option::Option<Document>,
    #[prost(message, optional, tag = "2")]
    pub features: ::core::option::Option<annotate_text_request::Features>,
    #[prost(enumeration = "EncodingType", tag = "3")]
    pub encoding_type: i32,
}
/// Nested message and enum types in `AnnotateTextRequest`.
pub mod annotate_text_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Features {
        #[prost(bool, tag = "1")]
        pub extract_syntax: bool,
        #[prost(bool, tag = "2")]
        pub extract_entities: bool,
        #[prost(bool, tag = "3")]
        pub extract_document_sentiment: bool,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnotateTextResponse {
    #[prost(message, repeated, tag = "1")]
    pub sentences: ::prost::alloc::vec::Vec<Sentence>,
    #[prost(message, repeated, tag = "2")]
    pub tokens: ::prost::alloc::vec::Vec<Token>,
    #[prost(message, repeated, tag = "3")]
    pub entities: ::prost::alloc::vec::Vec<Entity>,
    #[prost(message, optional, tag = "4")]
    pub document_sentiment: ::core::option::Option<Sentiment>,
    #[prost(string, tag = "5")]
    pub language: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EncodingType {
    None = 0,
    Utf8 = 1,
    Utf16 = 2,
    Utf32 = 3,
}
impl EncodingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EncodingType::None => "NONE",
            EncodingType::Utf8 => "UTF8",
            EncodingType::Utf16 => "UTF16",
            EncodingType::Utf32 => "UTF32",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "UTF8" => Some(Self::Utf8),
            "UTF16" => Some(Self::Utf16),
            "UTF32" => Some(Self::Utf32),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod language_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides text analysis operations such as sentiment analysis and entity
    /// recognition.
    #[derive(Debug, Clone)]
    pub struct LanguageServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> LanguageServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> LanguageServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            LanguageServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Analyzes the sentiment of the provided text.
        pub async fn analyze_sentiment(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalyzeSentimentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalyzeSentimentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.language.v1beta1.LanguageService/AnalyzeSentiment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.language.v1beta1.LanguageService",
                        "AnalyzeSentiment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Finds named entities (currently proper names and common nouns) in the text
        /// along with entity types, salience, mentions for each entity, and
        /// other properties.
        pub async fn analyze_entities(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalyzeEntitiesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalyzeEntitiesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.language.v1beta1.LanguageService/AnalyzeEntities",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.language.v1beta1.LanguageService",
                        "AnalyzeEntities",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Analyzes the syntax of the text and provides sentence boundaries and
        /// tokenization along with part of speech tags, dependency trees, and other
        /// properties.
        pub async fn analyze_syntax(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalyzeSyntaxRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalyzeSyntaxResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.language.v1beta1.LanguageService/AnalyzeSyntax",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.language.v1beta1.LanguageService",
                        "AnalyzeSyntax",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// A convenience method that provides all the features that analyzeSentiment,
        /// analyzeEntities, and analyzeSyntax provide in one call.
        pub async fn annotate_text(
            &mut self,
            request: impl tonic::IntoRequest<super::AnnotateTextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnnotateTextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.language.v1beta1.LanguageService/AnnotateText",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.language.v1beta1.LanguageService",
                        "AnnotateText",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
