// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCatalogsRequest {
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCatalogsResponse {
    #[prost(message, repeated, tag = "1")]
    pub catalogs: ::prost::alloc::vec::Vec<Catalog>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchProductsRequest {
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchProductsResponse {
    #[prost(message, repeated, tag = "1")]
    pub products: ::prost::alloc::vec::Vec<Product>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchVersionsRequest {
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchVersionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub versions: ::prost::alloc::vec::Vec<Version>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Catalog {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Product {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub asset_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub display_metadata: ::core::option::Option<::prost_types::Struct>,
    #[prost(string, tag = "4")]
    pub icon_uri: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "10")]
    pub asset_references: ::prost::alloc::vec::Vec<AssetReference>,
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssetReference {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub inputs: ::core::option::Option<Inputs>,
    #[prost(enumeration = "asset_reference::AssetValidationState", tag = "7")]
    pub validation_status: i32,
    #[prost(message, optional, tag = "8")]
    pub validation_operation: ::core::option::Option<
        super::super::super::longrunning::Operation,
    >,
    #[prost(message, optional, tag = "16")]
    pub gcs_source: ::core::option::Option<GcsSource>,
    #[prost(message, optional, tag = "12")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "13")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    #[deprecated]
    #[prost(string, tag = "14")]
    pub version: ::prost::alloc::string::String,
    #[prost(oneof = "asset_reference::Source", tags = "10, 11, 15")]
    pub source: ::core::option::Option<asset_reference::Source>,
}
/// Nested message and enum types in `AssetReference`.
pub mod asset_reference {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum AssetValidationState {
        Unspecified = 0,
        Pending = 1,
        Valid = 2,
        Invalid = 3,
    }
    impl AssetValidationState {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                AssetValidationState::Unspecified => "ASSET_VALIDATION_STATE_UNSPECIFIED",
                AssetValidationState::Pending => "PENDING",
                AssetValidationState::Valid => "VALID",
                AssetValidationState::Invalid => "INVALID",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ASSET_VALIDATION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "PENDING" => Some(Self::Pending),
                "VALID" => Some(Self::Valid),
                "INVALID" => Some(Self::Invalid),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        #[prost(string, tag = "10")]
        Asset(::prost::alloc::string::String),
        #[prost(string, tag = "11")]
        GcsPath(::prost::alloc::string::String),
        #[prost(message, tag = "15")]
        GitSource(super::GitSource),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inputs {
    #[prost(message, optional, tag = "1")]
    pub parameters: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GcsSource {
    #[prost(string, tag = "1")]
    pub gcs_path: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub generation: i64,
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitSource {
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub dir: ::prost::alloc::string::String,
    #[prost(oneof = "git_source::Ref", tags = "3, 4, 5")]
    pub r#ref: ::core::option::Option<git_source::Ref>,
}
/// Nested message and enum types in `GitSource`.
pub mod git_source {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ref {
        #[prost(string, tag = "3")]
        Commit(::prost::alloc::string::String),
        #[prost(string, tag = "4")]
        Branch(::prost::alloc::string::String),
        #[prost(string, tag = "5")]
        Tag(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Version {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub asset: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Generated client implementations.
pub mod private_catalog_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// `PrivateCatalog` allows catalog consumers to retrieve `Catalog`, `Product`
    /// and `Version` resources under a target resource context.
    ///
    /// `Catalog` is computed based on the \[Association\]\[\]s linked to the target
    /// resource and its ancestors. Each association's
    /// \[google.cloud.privatecatalogproducer.v1beta.Catalog\]\[\] is transformed into a
    /// `Catalog`. If multiple associations have the same parent
    /// \[google.cloud.privatecatalogproducer.v1beta.Catalog\]\[\], they are
    /// de-duplicated into one `Catalog`. Users must have
    /// `cloudprivatecatalog.catalogTargets.get` IAM permission on the resource
    /// context in order to access catalogs. `Catalog` contains the resource name and
    /// a subset of data of the original
    /// \[google.cloud.privatecatalogproducer.v1beta.Catalog\]\[\].
    ///
    /// `Product` is child resource of the catalog. A `Product` contains the resource
    /// name and a subset of the data of the original
    /// \[google.cloud.privatecatalogproducer.v1beta.Product\]\[\].
    ///
    /// `Version` is child resource of the product. A `Version` contains the resource
    /// name and a subset of the data of the original
    /// \[google.cloud.privatecatalogproducer.v1beta.Version\]\[\].
    #[derive(Debug, Clone)]
    pub struct PrivateCatalogClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> PrivateCatalogClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PrivateCatalogClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            PrivateCatalogClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Search \[Catalog\]\[google.cloud.privatecatalog.v1beta1.Catalog\] resources that consumers have access to, within the
        /// scope of the consumer cloud resource hierarchy context.
        pub async fn search_catalogs(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchCatalogsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchCatalogsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.privatecatalog.v1beta1.PrivateCatalog/SearchCatalogs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.privatecatalog.v1beta1.PrivateCatalog",
                        "SearchCatalogs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Search \[Product\]\[google.cloud.privatecatalog.v1beta1.Product\] resources that consumers have access to, within the
        /// scope of the consumer cloud resource hierarchy context.
        pub async fn search_products(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchProductsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchProductsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.privatecatalog.v1beta1.PrivateCatalog/SearchProducts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.privatecatalog.v1beta1.PrivateCatalog",
                        "SearchProducts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Search \[Version\]\[google.cloud.privatecatalog.v1beta1.Version\] resources that consumers have access to, within the
        /// scope of the consumer cloud resource hierarchy context.
        pub async fn search_versions(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchVersionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchVersionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.privatecatalog.v1beta1.PrivateCatalog/SearchVersions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.privatecatalog.v1beta1.PrivateCatalog",
                        "SearchVersions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
